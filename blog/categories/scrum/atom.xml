<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Scrum | Matsue Blog]]></title>
  <link href="https://matsue.github.io/blog/categories/scrum/atom.xml" rel="self"/>
  <link href="https://matsue.github.io/"/>
  <updated>2015-12-03T22:26:10+09:00</updated>
  <id>https://matsue.github.io/</id>
  <author>
    <name><![CDATA[Hiroki Matsue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rakuten Technology Conference 2015に参加しました]]></title>
    <link href="https://matsue.github.io/blog/2015/11/24/rakuten-technology-conference-2015/"/>
    <updated>2015-11-24T20:07:45+09:00</updated>
    <id>https://matsue.github.io/blog/2015/11/24/rakuten-technology-conference-2015</id>
    <content type="html"><![CDATA[<p><a href="http://rakutentechnologyconference2015.sched.org/">Rakuten Technology Conference 2015</a>に参加しました。二子玉川にある楽天の新社屋Crimson Houseでの開催でした。</p>

<p>並行して複数のセッションが行われていたので見逃したセッションも多いですが、以下のタイムテーブルの各セッション詳細にYoutubeへのリンクがあるので安心です。
<a href="http://rakutentechnologyconference2015.sched.org/grid/">http://rakutentechnologyconference2015.sched.org/grid/</a></p>

<p>全てのセッションが英語ですので、その点でも動画で再確認できるのは素敵です。</p>

<p>以下は参加したセッションについてのまとめです。</p>

<!--more-->


<h2>　Will AI surpass human intelligence? &ndash; Beyond Deep Learning (Yutaka Matsuo)</h2>

<p><div class="embed-video-container"><iframe src="//www.youtube.com/embed/s7yey8hfQII" allowfullscreen></iframe></div></p>

<p><a href="http://rakutentechnologyconference2015.sched.org/event/4B4g/will-ai-surpass-human-intelligence-beyond-deep-hellip">http://rakutentechnologyconference2015.sched.org/event/4B4g/will-ai-surpass-human-intelligence-beyond-deep-hellip</a></p>

<p>松尾先生による、これまでのAIの歴史とディープラーニングを用いた研究成果、そして今後の展望についてのお話。</p>

<p>上記動画の28分あたりから紹介されている、ディープラーニングに関連する映像が衝撃的です。
画像解析とゲームスコアによる評価付けで、ブロック崩しやレースゲームをAIが効率良く解いている様子が紹介されています。
どの動画でも前半はやみくもにゲームをプレイしているAIも学習が進むと、ブロック崩しで端に穴をあけてまとめてブロックを崩したり、レースゲームで最適なコース取りをしていて、その急成長ぶりは気味の悪さも感じさせます。</p>

<p>近年の画像解析のアルゴリズムコンペでも、同一人物の顔を見つける処理をした場合の誤認識率は5%を下回り、同一人物・別人物と誤認識していた画像は人間が見ても判別が難しいそうです。</p>

<p>また近年の学習をしていくAIのことを<strong>&ldquo;Child AI&rdquo;</strong>、過去のAIにあったような人間が直接に解法や知識を与えておくアプローチでつくるAIを<strong>&ldquo;Adult AI&rdquo;</strong>と呼び分けていました。</p>

<h2>Programmable IoT Platform “SORACOM&#8221; (Ken Tamagawa)</h2>

<p><div class="embed-video-container"><iframe src="//www.youtube.com/embed/XtdijMoKC1o" allowfullscreen></iframe></div></p>

<p><a href="http://rakutentechnologyconference2015.sched.org/event/4N57/programmable-iot-platform-soracom">http://rakutentechnologyconference2015.sched.org/event/4N57/programmable-iot-platform-soracom</a></p>

<p>玉川さんによるSORACOMのお話。</p>

<p>キャリアが提供するパケット通信、帯域制限といった機能を賄うデータセンターのサーバーは、すべて用意しようとすると700億円近くもするらしいです。。</p>

<p>そこでMVNO。SORACOMはIoT向けのMVNOでAWSのようなWebコンソールから管理下のSIMの帯域制限などができます。</p>

<p>使っている例として大手企業や、以下の様なデバイスが紹介されていました。</p>

<ul>
<li><a href="https://akerun.com/">Akerun</a></li>
<li><a href="http://kibi-dango.jp/info.php?type=items&amp;id=I0000137">LiveConnect</a></li>
</ul>


<h3>SORACOM Beam</h3>

<p>SIMカードから送られたパケットをキャリアネットワークから先で自動で暗号化してくれるサービス。例えば<strong>HTTP通信はHTTPS通信に</strong>してくれます。デバイス側ではSSL通信の処理をしなくてよいので、<strong>バッテリーの使用量削減</strong>も期待できます。
<a href="http://whill.us/">WHILL</a>でも使われてるらしいです。</p>

<h3>今後の展開</h3>

<p>最近ではカスタムDNS等の機能をリリースしており、今後も既存のプラットフォームをAWS上で各国にリリースすることでグローバルに展開していくとのことです。</p>

<h3>Q&amp;A</h3>

<ul>
<li>物理サーバは使ってないのか？それはボトルネックにならないのか？

<ul>
<li>ドコモのデータセンターにあるが、拡張可能なためボトルネックにはならない。</li>
</ul>
</li>
<li>なぜSORACOMをやろうと決心したのか？

<ul>
<li>AWSにいたころ、時差ボケで眠れない夜にSORACOMのプレスリリースを書いて、翌日の朝にそのプレスリリースを読んでこれはいけると思ったのがきっかけ</li>
</ul>
</li>
<li>SORACOM Beamはどのくらい電力使用量を減らすのか？

<ul>
<li>具体的なデータは持ってないが、HTTPSの処理は多大なリソースを使っていた部分をHTTPで処理できる分、削減できると考える。</li>
</ul>
</li>
<li>Software SIMについてどう考えるか？

<ul>
<li>いまのSORACOMはSIMカードが必要。リモートでプロファイルが書き換えられるSoftware SIMはSORACOMとも相性が良いので、調査中。実際にEU諸国での例もあるので展開が楽しみ。</li>
</ul>
</li>
</ul>


<h2>Rakuten and Microsoft talk DevOps in Real world (Kotaro Ogino / Drew Robbins / Tsuyoshi Ushio)</h2>

<p><div class="embed-video-container"><iframe src="//www.youtube.com/embed/mZ8tgEtubGE" allowfullscreen></iframe></div></p>

<p><a href="http://rakutentechnologyconference2015.sched.org/event/3iON/rakuten-and-microsoft-talk-devops-in-real-world">http://rakutentechnologyconference2015.sched.org/event/3iON/rakuten-and-microsoft-talk-devops-in-real-world</a></p>

<p>動画冒頭の&#8221;DevOps!!!&ldquo;コールは音量に注意してください笑</p>

<p><strong>The Phoenix Project</strong>がアメリカではDevOpsのバイブル本とのことです。</p>

<table border="0" cellpadding="0" cellspacing="0"><tr><td valign="top"><div style="border:1px solid;margin:0px;padding:6px 0px;width:160px;text-align:center;float:left"><a href="http://hb.afl.rakuten.co.jp/hgc/0ecae152.d6af1699.0ecae153.1dd72672/?pc=http%3a%2f%2fbooks.rakuten.co.jp%2frb%2f12928326%2f%3fscid%3daf_link_tbl&amp;m=http%3a%2f%2fm.rakuten.co.jp%2fbook%2fi%2f17111893%2f" target="_blank"><img src="https://hbb.afl.rakuten.co.jp/hgb/?pc=https%3a%2f%2fthumbnail.image.rakuten.co.jp%2f%400_mall%2fbook%2fcabinet%2f2508%2f9780988262508.jpg%3f_ex%3d128x128&amp;m=https%3a%2f%2fthumbnail.image.rakuten.co.jp%2f%400_mall%2fbook%2fcabinet%2f2508%2f9780988262508.jpg%3f_ex%3d80x80" alt="The Phoenix Project: A Novel about IT, DevOps, and Helping Your Business Win" border="0" style="margin:0px;padding:0px"></a><p style="font-size:12px;line-height:1.4em;text-align:left;margin:0px;padding:2px 6px"><a href="http://hb.afl.rakuten.co.jp/hgc/0ecae152.d6af1699.0ecae153.1dd72672/?pc=http%3a%2f%2fbooks.rakuten.co.jp%2frb%2f12928326%2f%3fscid%3daf_link_tbl&amp;m=http%3a%2f%2fm.rakuten.co.jp%2fbook%2fi%2f17111893%2f" target="_blank">The Phoenix Project: A Novel about IT, DevOps, and Helping Your Business Win</a><br><span style="">著者：Gene Kim</span><br><span style="">価格：3,421円（税込、送料込）</span></p></div></td>
<td valign="top"><div style="border:1px solid;margin:0px;padding:6px 0px;width:160px;text-align:center;float:left"><a href="http://hb.afl.rakuten.co.jp/hgc/0ecae152.d6af1699.0ecae153.1dd72672/?pc=http%3a%2f%2fbooks.rakuten.co.jp%2frb%2f12883862%2f%3fscid%3daf_link_tbl&amp;m=http%3a%2f%2fm.rakuten.co.jp%2fbook%2fi%2f17062168%2f" target="_blank"><img src="https://hbb.afl.rakuten.co.jp/hgb/?pc=https%3a%2f%2fthumbnail.image.rakuten.co.jp%2f%400_mall%2fbook%2fcabinet%2f5357%2f9784822285357.jpg%3f_ex%3d128x128&amp;m=https%3a%2f%2fthumbnail.image.rakuten.co.jp%2f%400_mall%2fbook%2fcabinet%2f5357%2f9784822285357.jpg%3f_ex%3d80x80" alt="The　DevOps逆転だ！" border="0" style="margin:0px;padding:0px"></a><p style="font-size:12px;line-height:1.4em;text-align:left;margin:0px;padding:2px 6px"><a href="http://hb.afl.rakuten.co.jp/hgc/0ecae152.d6af1699.0ecae153.1dd72672/?pc=http%3a%2f%2fbooks.rakuten.co.jp%2frb%2f12883862%2f%3fscid%3daf_link_tbl&amp;m=http%3a%2f%2fm.rakuten.co.jp%2fbook%2fi%2f17062168%2f" target="_blank">The　DevOps逆転だ！</a><br><span style="">著者：ジーン・キム</span><br><span style="">価格：2,376円（税込、送料込）</span></p></div></td></tr></table>


<h3>DevOps Journey (Micorsoft)</h3>

<p>Visual Studioは1997年にリリースされ、当時は2、3年おきにリリースするというサイクルでした。
そして最初のリリース後はバグ修正だけに終始してユーザのフィードバックに応えることはありませんでした。</p>

<p>2008年移行にその体制は変わって、2013年にはVisual Studio Onlineという形でリリースがされました。</p>

<p>DevとOpsとPMに分かれていたチームは</p>

<ol>
<li>Dev &amp; Opsで<strong>Development Team</strong>になり、</li>
<li>Dev &amp; Ops &amp; PMで<strong>Feature Team</strong>になり、</li>
</ol>


<p>顧客とコラボレーションして動くようになりました。
その結果、いまでは1週間で80デプロイを行い、それでもインシデント数は1ヶ月で10個だけになったそうです。</p>

<p>さらに凄いのは、この変化は会社のサポートが最初からあって起きたわけではなく、以下のフェーズを経て少数の熱意から変化したそうです。</p>

<ol>
<li><strong>Change agent(s)</strong> : DevOpsを始める少数の人、ユニコーンによるDevOps開始</li>
<li><strong>Grassroots</strong> : 著名人などを招いた会社内でのイベントの実施</li>
<li><strong>Tops down</strong></li>
<li><strong>Scale</strong> : Dojoシステム</li>
</ol>


<p>今では<strong>Dojoシステム</strong>というものがあり、週一程度で定期開催される会でCI等についていつでも学ぶことができます。
それでもまだDevOps Journeyの途上だということです。</p>

<p>他社のDevOps Journeyとしては以下のストーリーが紹介されました。</p>

<ul>
<li>Rakuten: <strong>Microservices</strong>により、大きな企業の中であっても、各チームはスタートアップのように振る舞う</li>
<li>Yahoo! Japan: DevとOpsの壁をなくすために、<strong>Devチームのユニコーン(リーダー格)の人をOpsに入れる</strong>ことで、Opsに自動化の文化を生み出す</li>
</ul>


<h3>Test Automation for DevOps (Rakuten)</h3>

<p>発表者の荻野さんは楽天のIDやポイント、決済を管理するGroup Core Serviceという部署で働いていており、多くのビジネス要求がある中でどのようにDevOpsを回しているかの紹介がありました。</p>

<p>スケール可能なパフォーマンステストを行うため、楽天内のOpenStack環境を使い、数クリックでGatlingによるテストを実行できるとのことです。そして全てのCI結果はKibanaにより集計されていました。かっこいい。</p>

<h3>CI Strategies (Microsoft)</h3>

<p>Microsoftでは以下のような戦略・手法をとっています。</p>

<ul>
<li>クラウドとオンプレミスのコードベースを共有する</li>
<li>いつでもデプロイ可能にする</li>
<li>Canary testing (カナリアテスト) : 一部のサーバクラスタにだけ新機能をリリースし、問題がなければ他のクラスタにもスケールしていく</li>
<li>Feature flags : ランタイムで機能のON/OFF</li>
</ul>


<h3>Continuous Delivery Strategy Map</h3>

<p>牛尾さんがDevOpsインタビューをする中で気づいた戦略マップにはSpeed、Qualityの2つの軸があります。</p>

<p>Cookpadが行っているような、いつでもロールバックできるようにする戦略はSpeed重視、荻野さんの例やカナリアテストを使う戦略はQuality重視になります。</p>

<h2>Building Smart Applications with an Algorithm Marketplace : Diego Oppenheimer, Algorithmia &amp; DEX &amp; DEX(TRA) : Dextra (Daryl Arnold / Diego Oppenheimer)</h2>

<p><div class="embed-video-container"><iframe src="//www.youtube.com/embed/T0Pob0hyRps" allowfullscreen></iframe></div></p>

<p><a href="http://rakutentechnologyconference2015.sched.org/event/4B5P/building-smart-applications-with-an-algorithm-markehellip">http://rakutentechnologyconference2015.sched.org/event/4B5P/building-smart-applications-with-an-algorithm-markehellip</a></p>

<h3>Algorithmia</h3>

<p>Algorithmiaは人々がアルゴリズムを発見・利用できる状態にすることを目的とする会社で、様々なアルゴリズムをサイト上で試用・購入することができます。</p>

<p>アルゴリズムエコノミーが必要な背景としては以下の事例を挙げていました。</p>

<ul>
<li>2009年には8ゼタバイト(テラ->ペタ->エクサ->ゼタ)のデータが生み出され、2020年には35ゼタバイトに上る</li>
<li>1時間あたり、100万台の新しいデバイスがオンラインになっている</li>
<li>1分あたり、20時間分の動画がアップロードされている</li>
</ul>


<p>実際のアルゴリズムの例は、以下が挙げられていました。</p>

<ul>
<li>Nudity detection: <a href="https://isitnude.com/">isitnude</a> / <a href="http://blog.algorithmia.com/post/121967357859/isitnude">ブログ</a></li>
<li>Face recognition: <a href="http://fr-demo.aerobaticapp.com/">Name That Actor</a> / <a href="http://blog.algorithmia.com/post/130768558569/whos-who-facial-recognition-made-simple">ブログ</a></li>
<li>Web page recommender: <a href="https://algorithmia.com/recommends">https://algorithmia.com/recommends</a></li>
<li>keyword tags for a URL: <a href="https://algorithmia.com/algorithms/tags/AutoTagURL">https://algorithmia.com/algorithms/tags/AutoTagURL</a></li>
</ul>


<p>他の事例については以下のリンク先を見て、いくつか試してみるとわかりやすいです。</p>

<p><a href="https://algorithmia.com/use-cases">https://algorithmia.com/use-cases</a></p>

<h2>DevOps with Lego and Chocolate simulation game (Dana Pylayeva)</h2>

<p><div class="embed-video-container"><iframe src="//www.youtube.com/embed/Lup62Wf783Y" allowfullscreen></iframe></div></p>

<p><a href="http://rakutentechnologyconference2015.sched.org/event/4B4r/devops-with-lego-and-chocolate-simulation-game">http://rakutentechnologyconference2015.sched.org/event/4B4r/devops-with-lego-and-chocolate-simulation-game</a></p>

<p>DevOpsについて、ワークショップ形式で実際に他の方々とゲームで学べるセッションです。
文章では伝わりづらいかと思いますが、概ね以下のようなルールのゲームが行われました。</p>

<ul>
<li>ビジネス、Dev、Opsを持つ3つのチームにわかれ、さらにチーム内でそれぞれに、アドミンやテスターといった役割が割り振られる</li>
<li>ビジネスの要求を基に、レゴで組み立てられたプロダクトを各チームはたくさん生産することを目的に取り組む</li>
<li>生産する時間な数スプリント用意されていて、各スプリント間には振り返りの時間と、ルール変更がある</li>
</ul>


<p>上記のルール変更が大きなポイントで、例えばゲーム開始当初は</p>

<ul>
<li>Devのみがレゴを組み立てて良い</li>
<li>Opsだけが使用できるレゴの種類を知っていて納品できる</li>
</ul>


<p>という風に完全に役割が分かれています。</p>

<p>スプリントが進むとルールが変化し、</p>

<ul>
<li>Devも使用できるレゴを知って良いし、納品しても良い</li>
<li>Opsもレゴを組み立てて良い</li>
</ul>


<p>となります。</p>

<p>そうするとDevもOpsも待っているだけの時間がなくなり、スプリントを進めるごとに納品できるプロダクトが増えていきます。</p>

<p><img class="<a" src="href="https://lh3.googleusercontent.com/-B-9FHwzzITE/VmA3C9cA6XI/AAAAAAAAfzU/J5vvP4t3gWo/w530-h707-p-rw/IMG_3748.JPG">https://lh3.googleusercontent.com/-B-9FHwzzITE/VmA3C9cA6XI/AAAAAAAAfzU/J5vvP4t3gWo/w530-h707-p-rw/IMG_3748.JPG</a>&#8221;></p>

<p>このワークショップでは、以下の様な実際の現場にありそうなイベント・体験が用意されていたのが印象的でした。</p>

<ul>
<li>Devが作ったものが完成してから、Opsの段階で<strong>セキュリティの要件でプロダクトが差し戻される</strong>イベントがある</li>
<li>セキュリティ要件を修正したあと、<strong>ビジネス判断で完成品のデプロイが延期になる</strong>イベントがある</li>
<li>スプリントが進んでDevがOpsを兼ねるようになると、Ops陣もDevに入らないと<strong>やることがなくなる</strong>(逆も然り)</li>
</ul>


<p>また、突然その場であった人たちとお互いの会社も国籍も分からないまま、ルールも手探りで、英語と日本語であれこれ言いながらやれた体験が特に面白く感じました。</p>

<p><a href="https://matsue.github.io/blog/2015/03/05/scrumgatheringtokyo-2015/">Regional Scrum Gathering Tokyo 2015</a>でもそうでしたが、こういったワークショップは気づきが多く、個人的には満足感が高いです。</p>

<hr />

<p>以上です。さいごに、講演者・スタッフの皆様、素敵なカンファレンスをありがとうございました！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Regional Scrum Gathering Tokyo 2015に参加した]]></title>
    <link href="https://matsue.github.io/blog/2015/03/05/scrumgatheringtokyo-2015/"/>
    <updated>2015-03-05T20:43:28+09:00</updated>
    <id>https://matsue.github.io/blog/2015/03/05/scrumgatheringtokyo-2015</id>
    <content type="html"><![CDATA[<p><a href="http://2015.scrumgatheringtokyo.org/">Regional Scrum Gathering Tokyo 2015</a>に参加した。<br/>
3日分の発表内容メモと感想のまとめ。長い。</p>

<p>3日間のイベントで、初日は主にスクラム実践者の方々のセッション、2日目はオープンスペーステクノロジーというディスカッション形式、
3日目はコーチや本の執筆をされている方々からのキーノートという構成。3日目のみ有料だった。</p>

<ul>
<li><a href="https://www.facebook.com/ScrumGatheringTokyo">https://www.facebook.com/ScrumGatheringTokyo</a></li>
<li><a href="https://twitter.com/search?q=%23rsgt2015">https://twitter.com/search?q=%23rsgt2015</a></li>
</ul>


<!--more-->


<h2>Day1</h2>

<p>初日は以下の4つのセッションに参加した。</p>

<ul>
<li>James O. Coplienさんの<a href="http://2015.scrumgatheringtokyo.org/event/5907692ca1c112723617f2438a0501cb#.VPLm-1PadrN">Scrum Patterns: The New Defacto Scrum Standard</a></li>
<li>藤村 新さんの<a href="http://2015.scrumgatheringtokyo.org/event/b23e2d897cdf780a82622dd55b865e11#.VPLl41PadrM">開発モデルの作り方 ～守破離の破！～</a></li>
<li>Mitsuyuki　Shiibaさんの<a href="http://2015.scrumgatheringtokyo.org/event/6bc960ff87b12ca853fea5497627b3ea#.VPLl4FPadrM">スクラムマスターは要らない</a></li>
<li>林 栄一さんとMasanari Motohasiさんの<a href="http://2015.scrumgatheringtokyo.org/event/e8ab120c5e4a83383b7da588da120a83#.VPLl71PadrM">アジャイルコミュニケーションプラログラム ~チームワークに関する心理学的アプローチ~</a></li>
</ul>


<h3>Scrum Patterns: The New Defacto Scrum Standard</h3>

<p><a href="https://picasaweb.google.com/lh/photo/34HCmZmvOTJlDDlJU2EebNMTjNZETYmyPJy0liipFm0?feat=embedwebsite"><img src="https://lh4.googleusercontent.com/-RNmV-m2WKJs/VPfPzR7rtsI/AAAAAAAASj8/_y55odF2IN8/s800/IMG_20150228_103457.jpg" height="600" width="800" /></a></p>

<p>Copeさんによるスクラムとは何かを再確認するような発表。
英語だったので意味を取り違えてる部分もあると思うが、以下のようなことを言っていた。</p>

<blockquote><ul>
<li>スクラムはただのルールブック。</li>
<li>チェスプレーヤーに例えれば、ルールを知っているだけでは良いプレーヤーとは言えない。</li>
<li>スクラムにおいてマネージャーという存在はいらない。無駄。スクラムでは自己管理する。タスクマネージャーというのもいらない。</li>
<li>Kanbanを使ってるチームは病気。</li>
<li>チームのゴールは価値を創ること。スクラムやルール自体はゴールじゃない。</li>
<li>スクラムによって、どのようにして学ぶかを学ぶ。</li>
<li>毎朝のスタンドアップミーティングは何のためにあるのか？SBIを管理するショートプランニングミーティングみたいなもの。</li>
<li>もしもスプリントが終わった時にベロシティの見積もり通りになる確率が50%以上なら誰かが嘘をついてる。</li>
<li>息子は14歳でCSMになれたんだから皆も出来る。</li>
<li>ベロシティは6ヶ月で倍になる。なってないなら、あなたは理解してない。</li>
<li>信頼が大事。マネージャーやテスターを信頼してますか？</li>
<li>アジャイルマニフェストにあるように顧客との協調が必要。</li>
</ul>
</blockquote>

<p>なぜKanbanを使うのは良くないのか聞いたところ、
例えば1つの製品をデリバリーするために、</p>

<ol>
<li>パーツAをつくるチーム: 生産性98</li>
<li>パーツBをつくるチーム: 生産性96</li>
<li>テストするチーム: 生産性100</li>
</ol>


<p>がいたとすると工程2のところで在庫が出る、という説明だった。
なのでHenrik Knibergさんの本に出てくるステータスが細かく管理され、WIPが制限されているようなカンバンを指しているわけではない。
役割が分断されているようなチームは無駄がでて良くないよね、という意見だと解釈した。</p>

<p>また、見積もったタスクが全てDONEできる確率は体感として50%以下な感じがするんだけど、と言ってみたところ、</p>

<ol>
<li>スプリントへの割り込みタスクを止める人がいない</li>
<li>違うチームへの依頼で待ち時間がある</li>
</ol>


<p>といったことが原因でしょという話になった。
これは確かにそうなんだけれども、他のチームと働くことが多いというチームの性質や、
会社の枠組みでロールの分断された組織があるという状況もあるのでなかなか難しい印象。
ただ、これらについては他の方とも話しているうちに試してみたいアイデアを得た。</p>

<p>Copeさん節はいつも通りかなりの破壊力があったし、理想の組織での話のように感じる部分はあるが、原点となるマインドと強いパッションには共感を覚える。
スクラムというと色んな要素はあるものの、価値を生み出すのがゴール。</p>

<h3>開発モデルの作り方 ～守破離の破！～</h3>

<iframe src="//www.slideshare.net/slideshow/embed_code/45257394" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/aratafuji/ss-45257394" title="開発モデルの作り方(守破離の破)" target="_blank">開発モデルの作り方(守破離の破)</a> </strong> from <strong><a href="//www.slideshare.net/aratafuji" target="_blank">Arata Fujimura</a></strong> </div></p>

<blockquote><ul>
<li>とりあえずやってみることでプラクティス厨じゃだめだと気付いた。</li>
<li>ざっくり開発者が言ってきた日数に係数かけて見積もる。エンジニア「２日です」オーナー「わかりました(４日か)」。</li>
<li>自己流から破はできない。型があるから型やぶり、型がない人が型を破ったら形無し。</li>
</ul>
</blockquote>

<p>リーン開発の現場を参考にされていることも、その他の部分でもすごく共感できることの多かったセッション。</p>

<p>現状、良かれと思って基本や事例から変化させて取り込んでる手法についてはプラクティス厨になっている気もする。
色んな方々の知識によってスクラムの基本形ができていて、それから学べる要素も多いと思うので基本形をもう一度見直したくなった。</p>

<h3>スクラムマスターは要らない</h3>

<iframe src="//www.slideshare.net/slideshow/embed_code/45257107" width="425" height="355" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/bufferings/ss-45257107" title="スクラムマスターは要らない" target="_blank">スクラムマスターは要らない</a> </strong> from <strong><a href="//www.slideshare.net/bufferings" target="_blank">Mitsuyuki Shiiba</a></strong> </div></p>

<blockquote><ul>
<li>全員POであってほしい。</li>
<li>以前は計画もスピードも重視で根性で乗り切ってた。</li>
<li>今は大阪の組織は全てスクラム。</li>
<li>当時、ベンチャーからの成長で組織はカオスだった。</li>
<li>「エンジニアとして働きたいチーム」をつくろうとした。</li>
<li>摩擦とヒエラルキーに悩んだ。</li>
<li>摩擦を生む境目が何か考えた。それは責任範囲だと考えた。「ここからはあなたの仕事、責任」</li>
<li>もう一つはエンジニアに期待してない。スキル低いエンジニアでも回せるようにしよう。</li>
<li>なんでこういう組織になったか考えた。失敗を乗り越えるためだと考えた。失敗しないように。「この範囲なら失敗しないよね」</li>
<li>子供に転んでほしくないと考えた。そのためには転ばせる必要がある。</li>
<li>エンジニアへの期待値をあげて、責任範囲を細かくしない。</li>
<li>タイムボックス、スコープ、レトロスペクティブで失敗を小さく、失敗できるように。</li>
<li>スキル高い人だけがチーム入ってほしいのではなく、成長できるようにしたかった。</li>
<li>いますぐ終わらせる、できるひとにとりあえずやってもらうではなく、コスト払っても３ヶ月後に早く開発できるようにしたかった。</li>
<li>立ち上げメンバーのようにユーザにとってうれしいことを考え、プロダクトオーナーシップを持ってほしい。</li>
<li>そもそもみんな持ってるはず。</li>
<li>「ここまででいいよ」と壁つくってた。</li>
<li>「あなたが一番いいと思うものつくって」というようにした、始めはおそるおそるだったが、徐々にみんな言える環境になった。</li>
<li>次はみんなが働きたいと思う組織を目指した。</li>
<li>チームを超える横串の場をつくった。</li>
<li>マネージャとかもフラット、ただのロールという認識を広めた。。</li>
<li>組織５０人でもやもやしてることを出した、レトロスペクティブ。

<ul>
<li>ex.全チームにホワイトボード、プロジェクタ導入、カフェテリアの匂いをなくす</li>
</ul>
</li>
<li>希望者全員CSMの研修にいってもらった。</li>
<li>いけない人向けには大阪に人を呼んだりした。</li>
<li>とりのぞける障害はとった、だから「みんなで大阪の開発部を良くしていこう」</li>
<li>組織というプロダクトを変えた。</li>
<li>ただやる人はいらない。プロダクトオーナーシップをもったスクラムマスター、エンジニアになってほしい。</li>
</ul>
</blockquote>

<p>本編以外のQAへの回答からの抜粋は以下。</p>

<ul>
<li>方向性の違いは否定するのではなく、話し合ってもともとの原因を探る。</li>
<li>取り組みの結果、もともとPO、SM、PMとか全部やってたのをメンバー任せられた。</li>
<li>消極的な人にも参加をよびかける。ほっておかない。定期的な面談とかやるんじゃなく、気付いたらすぐ伝える。</li>
</ul>


<p>うーん、羨ましい。
質問への回答にも少しあるが、コミュニケーション的な部分でぶつかった壁や解決したことが多々あったんじゃないかと思う。
今の状況ではKPTやるとどんなものが上がっているのか気になる。</p>

<h3>アジャイルコミュニケーションプラログラム ~チームワークに関する心理学的アプローチ~</h3>

<p><a href="https://picasaweb.google.com/lh/photo/FIwv2PGb2QfTk2b6gT-4xdMTjNZETYmyPJy0liipFm0?feat=embedwebsite"><img src="https://lh4.googleusercontent.com/-PoT7anCuYzI/VPfPzW6bDPI/AAAAAAAASj4/-V2AiFZQ66Q/s800/IMG_20150228_165337.jpg" height="600" width="800" /></a></p>

<p>「言っても仕方ない」「どうせダメだ」みたいな心境になった人、させる人について対応や原因を考えるセッション。</p>

<p>例えば、「報告しろ」+「自分で考えろ」という矛盾した指示(ダブルバインド)を出されたりすると、そのような心境をつくる一因になると考えられる。
ペアや4人組でのワークでは、身の回りで起きているコミュニケーション不全の状況を考え、励ましの言葉を考え、それを人から言われてみる、というようなことをした。</p>

<p>こういうセッションはむずむずするが、ワークと割り切って普段やらないことを試したり、意識できてないようなところを確認できるので面白い。
あーあるある、という状況に名前をつけて認識できるようにする感じ。関連する本を1冊読んでみたくなった。</p>

<h3>クロージング</h3>

<p><a href="https://picasaweb.google.com/lh/photo/-8m3QTZ1cMGw8ZXEb4n0J9MTjNZETYmyPJy0liipFm0?feat=embedwebsite"><img src="https://lh3.googleusercontent.com/-KW_oTBU3pZo/VPfPzaRiGKI/AAAAAAAASj4/ESG_jlF9J1s/s800/IMG_20150228_173624.jpg" height="600" width="800" /></a></p>

<p>初日のクロージングは参加者全員で来年度のRSGTのポスター・テーマを考えた。
それぞれ10人程度の9チームに分かれ、意見をまとめ、発表した。</p>

<p>限られた時間内に焦りながら成果を出そうとする感覚は、マシュマロゲームみたいな印象。
すみません、プロトタイプとか全然つくりませんでした。アイデア考えて、締め切り直前に最終版を書き始めました。</p>

<p>みなさんどうやって取り組んだろうか？
振り返りしたチームもあるようだし、自分がいたチームは「だれが」「なにを」期待するイベントにしたいかのアイデアを考えて投票、
それに合うフレーズのアイデアを出し合うようなフローで参加した。</p>

<p>意外に感じたのは、チーム内で我先にとファシリテーター役出るかと思ったらそうでもなかった。お見合い。
そんな雰囲気の中でも活発に意見を出して、雰囲気をつくっていた女性の方々すごいと思いました。</p>

<h2>Day2</h2>

<h3>Open Space Technology</h3>

<p><a href="https://picasaweb.google.com/lh/photo/wTFS1FiWL85lr_cuRREbSdMTjNZETYmyPJy0liipFm0?feat=embedwebsite"><img src="https://lh3.googleusercontent.com/--NZKsShM8S0/VPfPzZsy1nI/AAAAAAAASj4/10eN7so2MPA/s800/IMG_20150301_130543.jpg" height="600" width="800" /></a></p>

<p>2日目は全てOpen Space Technologyの時間。
午前はアイデア募集をして、似たものはまとめて、午後に向けて時間と場所の割り振りをした。</p>

<p>私は&#8221;スクラムで取ると嬉しいメトリクス・数字&#8221;というテーマで時間をとらせてもらい、以下のようなアイデアがでた。</p>

<p><a href="https://picasaweb.google.com/lh/photo/QrY0T6zZ6vUQ-MPDKLrbQdMTjNZETYmyPJy0liipFm0?feat=embedwebsite"><img src="https://lh6.googleusercontent.com/-eORdhihYEiw/VPfPzWwV1aI/AAAAAAAASj8/wdv5wzE2sKk/s800/IMG_20150301_150056.jpg" height="600" width="800" /></a></p>

<table>
<thead>
<tr>
<th>測定手法・項目</th>
<th>効果</th>
</tr>
</thead>
<tbody>
<tr>
<td>ベロシティ</td>
<td>見積もり精度向上</td>
</tr>
<tr>
<td>各タスクが何日で完了したか</td>
<td>見積もり精度向上</td>
</tr>
<tr>
<td>◯◯さんが実施したレビュー回数</td>
<td>特定の人への依存の視覚化</td>
</tr>
<tr>
<td>テストカバレッジ</td>
<td>品質</td>
</tr>
<tr>
<td>テストの書き出し、実装にかかった時間</td>
<td>工数視覚化?</td>
</tr>
<tr>
<td>割り込みタスクの数・かかった時間</td>
<td>見積もり精度向上</td>
</tr>
<tr>
<td>バグの数</td>
<td>見積もり精度向上</td>
</tr>
<tr>
<td>デモミーティング参加者のフィードバック数</td>
<td>期待値や成果の指標</td>
</tr>
<tr>
<td>目標達成できると思う率</td>
<td>心境・潜在タスクの視覚化</td>
</tr>
<tr>
<td>TODO・FIXMEコメント、つみのこしタスクの量</td>
<td>潜在タスクの視覚化、理解度の視覚化</td>
</tr>
<tr>
<td>コードの静的チェック</td>
<td>技術的負債の視覚化</td>
</tr>
<tr>
<td>トラックナンバー</td>
<td>特定の人への依存の視覚化</td>
</tr>
<tr>
<td>タスクや開発プロセスが停滞してたとこ共有</td>
<td>特定の人への依存の低減、プロセス上のボトルネックの発見</td>
</tr>
<tr>
<td>UATの実行時間</td>
<td>性能保証、変化に気づける</td>
</tr>
<tr>
<td>スプリントへの満足度</td>
<td>開発プロセス上の問題発見</td>
</tr>
<tr>
<td>問い合わせに返答してる率</td>
<td>対応もれ防止</td>
</tr>
<tr>
<td>最終ソースコミット時刻</td>
<td>働く環境の状況が見える</td>
</tr>
<tr>
<td>同じ種類のバグを出してないか</td>
<td>コード改善</td>
</tr>
</tbody>
</table>


<p>もっとはやくデリバリーしたいと思っても、どこが原因になってるか見えてないことは多いので、
上がったような項目からアイデアを得て改善できると嬉しい。</p>

<h3>Lean Coffee</h3>

<p><a href="https://picasaweb.google.com/lh/photo/EB0j90S5-Rpu7hQuoLYjvNMTjNZETYmyPJy0liipFm0?feat=embedwebsite"><img src="https://lh5.googleusercontent.com/-nxVFGEs0Hhc/VPfPzQlwsjI/AAAAAAAASj8/YJxjadGNobU/s800/IMG_20150301_123951.jpg" height="600" width="800" /></a></p>

<p>ランチの時間にはLean Coffeeを行った。Coffeeは飲んでないけど。
テーマを出し合って、投票して人気だったのテーマから順にディスカッションをする。
7分ごとに議論を継続するか、次の話題に移っていくかの確認がある。</p>

<p>適度に時間が区切られており、人数も少人数だったのでわりと集中して参加できた印象。</p>

<p>議論ででたアイデアの中で、&#8221;メンバーそれぞれがスプリントの名前を出し合う&#8221;というのが個人的に面白いと思った。
ビジョンが共有されてなければ、全く違うものが出てそれに気づくだろうし、
見返した時に何をしてきたのか、何が不足しているのかの考えるヒントになる。</p>

<h2>Day3</h2>

<p><a href="https://picasaweb.google.com/lh/photo/6HOUhH24kW39OgxzcL3JHNMTjNZETYmyPJy0liipFm0?feat=embedwebsite"><img src="https://lh6.googleusercontent.com/-tEUEtwrX5vY/VPfPzdNNIJI/AAAAAAAASj4/87n2Lmag_6w/s800/IMG_20150302_144630.jpg" height="800" width="600" /></a></p>

<p>3日目は以下の4つのセッションがあった。</p>

<ul>
<li>Kazumasa Ebataさんの<a href="http://2015.scrumgatheringtokyo.org/event/328d75dfb6132d6ced031e7ba846cc1b#.VPfjHVPadrM">Promotion of Growth Led by Scrum. ~ Road to Agile/KAIZEN. Improve THE Experience for Challenger ~</a></li>
<li>森崎 修司さんの<a href="http://2015.scrumgatheringtokyo.org/event/e34accd4020c1869e4a77e23390c3565#.VPfjIFPadrM">レビューの課題と対策、モダンコードレビューの動向</a></li>
<li>Kiro HARADAさん、Lê Trọng Hiệpさん、Phạm Anh Đớiさんの<a href="http://2015.scrumgatheringtokyo.org/event/1fdf35d5512cb65be238b2dc6985a888#.VPfjIVPadrM">State of Agile / Software Dev in Vietnam and relationship between Japan and Vietnam</a></li>
<li>Mary Gormanさんの<a href="http://2015.scrumgatheringtokyo.org/event/1fe726ea088481ce98590a251857d1fb#.VPfjJFPadrM">アジャイルな発見プラクティスを革新し、活性化させましょう Innovate and Invigorate Your Agile Discovery Practices</a></li>
</ul>


<h3>Promotion of Growth Led by Scrum. ~ Road to Agile/KAIZEN. Improve THE Experience for Challenger ~</h3>

<blockquote><ul>
<li>日本の状況は誤った情報が多い印象。</li>
<li>自分の本もスクラムに色付けしたもの。</li>
<li>今から学ぼうとするとミスリーディングが多い。正しい情報が多い状況をつくっていきたい。</li>
<li>スクラムを選択肢にいれてほしい。</li>
</ul>


<p><!-- br --></p>

<ul>
<li>◯◯ブートキャンプとか◯◯サムライも誰かが経験したもの。</li>
<li>第一ソースに会う機会を増やしていったほうがいいと感じる。</li>
</ul>


<p><!-- br --></p>

<ul>
<li>奴隷になってる。会社やスクラムの。</li>
<li>スクラムだからではなく、スクラムの目指してるものを考えれてるのか。</li>
</ul>


<p><!-- br --></p>

<ul>
<li>Ken Schwaberのgoogleでの動画から分かるように、透明感、３ヶ月後とかの状況を知る、把握するためのツール</li>
<li>ビジネスを成功させるものではない</li>
<li>できない人がやって数ヶ月後ほとんど何も完成してないだろう、それがわかる</li>
</ul>


<p><!-- br --></p>

<ul>
<li>改善したい人のペルソナを考える</li>
<li>飢餓感タイプか(圧倒的当事者意識くん)</li>
<li>危機感タイプか(やればできるこ)</li>
<li>飢餓感タイプは与えることに抵抗ない</li>
<li>危機感タイプはいただければやります、ひどいともうほっといてください</li>
</ul>


<p><!-- br --></p>

<ul>
<li>飢餓：「忙しいからほっておいてくれ！」</li>
<li>危機：「トラブルさえなければいい」</li>
<li>どちらもなにも求めてない。どちらもスクラムほしがってない。</li>
</ul>


<p><!-- br --></p>

<ul>
<li>飢餓：あなたの望みの助けになるよ、と伝える。</li>
<li>危機：なんで重要なのかというイメージもってもらう。イメージさえできればできる。</li>
<li>アプローチは対象によって違う</li>
</ul>


<p><!-- br --></p>

<ul>
<li>えばたさんは危機感タイプ。だから本場に行くことで危機感を覚えるように動く</li>
<li>フィードバックは&#8221;言う&#8221;ことだけではない。なんでも言ってたら、それはただの独り言</li>
<li>適切に行動を変える刺激を与えたり、与えなかったりすること</li>
<li>挑戦する場がなければ人は動かない</li>
</ul>


<p><!-- br --></p>

<ul>
<li>スクラムにはフィードバックが組み込まれてる</li>
<li>ルール通りにやることで、８割方のフィードバック得られるはず</li>
</ul>


<p><!-- br --></p>

<ul>
<li>スクラムスレーブ(奴隷)になる。どうやって未来をつくっていくのかを考えないと。</li>
<li>ブラックボックスな状態でスクラムやります、は仲間をつくらない。</li>
</ul>


<p><!-- br --></p>

<ul>
<li>スクラムでプロダクトよくなるは嘘。または、あくまでも特定の状況での事例にすぎない。</li>
<li>機会を多くして、プロダクトよくする機会がふえるだけ。</li>
</ul>


<p><!-- br --></p>

<ul>
<li>チームもいきなり成長することはない。</li>
<li>スクラムは現状をつきつけて残酷。ベロシティとか。</li>
</ul>


<p><!-- br --></p>

<ul>
<li>「組織が違うんです。頭でっかちいるんです。」</li>
<li>じゃあ働きかけていきましょう。キーパーソンに。スクラムにはそういうことを考えるきっかけがあるだけ。</li>
</ul>


<p><!-- br --></p>

<ul>
<li>勇気をもって未来をつくってほしい。未来はリスクある。そこにいる人が勇気を持たなければならない。</li>
<li>スクラムやったからよくなるとは限らない。</li>
</ul>
</blockquote>

<p>公演中に紹介されていたKen Schwaberさんの動画は多分これ。</p>

<p><div class="embed-video-container"><iframe src="//www.youtube.com/embed/_47VWIvOKH8" allowfullscreen></iframe></div></p>

<p>また、メモ上では大分省略しているが、
2タイプのペルソナに対して継続・ゴール設定といった状況に合わせた具体的なメッセージの紹介があった。</p>

<p>周りの方々を見ていてもそうだが、1次ソースに触れるというのは大事なんだろうなあと感じた。
また、2タイプにわけて考えるという切り口は面白い。
相手の求めるフィードバックに役立つのはもちろん、自分がどっちかを意識しておくことで、人との違いに変にイライラせずに済みそう。</p>

<h3>レビューの課題と対策、モダンコードレビューの動向</h3>

<blockquote><p>モダン: どの時点でのモダンかわからない。
例えば&#8221;新&#8221;喜劇。</p>

<p>エンピリカルソフトウェア、フィードバックを基にした研究。</p>

<p>ソフトウェアレビューの目的：</p>

<ul>
<li>不具合の修正コストの低減</li>
<li>保守性向上</li>
<li>状況把握と承認</li>
</ul>


<p>レビューは指摘ポイントの自由度高く、本質的な欠陥の指摘が少ない。</p>

<p>アンチパターンの例:</p>

<ul>
<li>コードの前半ばかり見てる</li>
<li>作り直してやろうかと考える</li>
<li>時間があるだけやり続ける</li>
<li>人間関係の持ち込み</li>
<li>見栄の張り合い、「なにか言わないと」</li>
<li>人格攻撃、「センスないね」</li>
</ul>


<p>ある研究の結果:</p>

<ul>
<li>機能的な問題(21.4%)</li>
<li>保守上の問題(71.1%)</li>
</ul>


<p>教科書的な対応としては、レビューする前に目的を定義する。</p>

<ul>
<li>命名規則</li>
<li>ユーザビリティ</li>
<li>性能問題</li>
</ul>


<p>そのための方法:</p>

<ul>
<li>コードレビュー</li>
<li>手動テスト</li>
<li>テストコード、テスト自動化</li>
</ul>


<p><!-- br --></p>

<ul>
<li>見つけると効果ある(定数を右に書くかどうかは効果低そう)</li>
<li>コスト減らす(特殊な状況だけ起きるものとかカバー)</li>
<li>あとあと拡張しやすくする（プラグインにするとか）</li>
</ul>


<p>リーディングテクニック:</p>

<ul>
<li>シナリオを用意して個々に割り当てる</li>
<li>先にシナリオはチームで合意しておく

<ul>
<li>ex.メモリリークないか(確保と解放の数あってるか)、無停止でデプロイできるか</li>
</ul>
</li>
</ul>


<p>シナリオのメリット:</p>

<ul>
<li>限界を知って割りきれる。「初めてやるし仕方ない」</li>
<li>問題の指摘するふりした攻撃とかを減らせる。</li>
</ul>


<p><!-- br --></p>

<ul>
<li>唯一の正解があるわけではない</li>
<li><p>身の丈にあったシナリオ設定する</p>

<ul>
<li>ex.鉄道のシステムとかつくるのと違って、絶対に落ちないアプリそれほど求められてない</li>
</ul>


<p> <!-- br --></p></li>
<li><p>タブとかスペースの数は息の長くないモジュールにやっても仕方ない</p></li>
<li>が、OSSだとちょっと違う</li>
<li>メンテナがいないと滅びるのでevolvabilityが重視される</li>
</ul>


<p><!-- br --></p>

<ul>
<li>アジャイルでなくても信頼、助け合いは必要</li>
<li>言葉の端々への配慮必要</li>
<li>態度を変えさせるための指摘してはだめ</li>
</ul>


<p>新人向けの注意:</p>

<ul>
<li>問題指摘されても自分の批判と考えないように</li>
<li>「知ってました」「そうでしたっけ」と照れ隠ししない</li>
<li>厳しい批判に「自分でやってください」と逆上しない</li>
<li>「本質的でない」と逆批判しない</li>
</ul>


<p>モダンコードレビューは:</p>

<ul>
<li>パスアラウンドに似てる、メールでなげて回覧板みたいにするやつ</li>
<li>OSSのコードレビューに似てる</li>
</ul>


<p>欠陥検出以外に・・</p>

<ul>
<li>情報共有</li>
<li>透明性向上</li>
<li>代替実装方法の検討</li>
<li>良い点、続けてもらいたいことも積極的に伝える</li>
</ul>


<p>グーグルでのコードレビュー:</p>

<ul>
<li>目的は協調であり、欠陥検出ではない</li>
<li>コーディングプロセスの一部として統合されてる</li>
</ul>


<p>メリット</p>

<ul>
<li>修正時間を短くする</li>
<li>新人の教育</li>
<li>信頼感の醸成</li>
</ul>


<p>グーグルのツール:</p>

<ul>
<li>mondrianというツールで管理</li>
<li>OSSクローンのrietveldがある</li>
</ul>


<p>シスコでのコードレビュー:<br/>
シスコでのコードレビューも小さくたくさんやってる感じ</p>

<p>Microsoftはcodeflowというツール。mondrianやgerritと似てる。</p>

<p>コードレビューに期待することアンケートでは</p>

<ul>
<li>保守性</li>
<li>情報共有</li>
<li>やってること見える化</li>
</ul>


<p>あたり上位にきてた。バグ見つけるだけじゃない。</p>

<p>モダンコードレビューでの注意点</p>

<ul>
<li>断片でみるので全体での一貫性や整合性が見落としがち</li>
<li>些細な指摘ならないシナリオ設定</li>
<li>誰かがみるだろうと放置</li>
<li>特定の人に集中する</li>
</ul>
</blockquote>

<p>Githubなどで利用されているプルリクエストがちょうどモダンコードレビューに当たるとのこと。<br/>
なんでプルリクという形に落ち着いてるのか考えるきっかけになる。
また、どうしてOSSでは保守性が重視されるのか、という切り口は面白いと思った。</p>

<p>そして紹介されていたアンチパターンは、耳の痛いものばかり。。</p>

<h3>State of Agile / Software Dev in Vietnam and relationship between Japan and Vietnam</h3>

<blockquote><ul>
<li>ベトナムの現状、手法やhowが多い</li>
<li>value driven development</li>
<li>これからwhyに変わっていくだろう</li>
</ul>


<p>問題:</p>

<ul>
<li>まずは信頼が大事。コードの品質よりも大事だとおもう。

<ul>
<li>日本はレポート多い。下手すると毎時間。</li>
</ul>
</li>
<li>言葉の壁。定義されてない期待。

<ul>
<li>ex.５分早くミーティングにいくべき。とか</li>
<li>やりたいこと(日本語)->仕様書(日本語)->ベトナム語と、たくさんの変換</li>
</ul>
</li>
</ul>


<p>POをオフショア先に置くのが一つの解決策では。
プロキシPOではなく。スクラムチームまるごとをオフショア先におく。</p></blockquote>

<p>プロキシする人が多いとややこしいというのは共感。
依頼側も依頼される側も「信頼関係を築きたい」と考えている状況ならもっとシンプルになりそう。</p>

<p>今回の発表者のお二人もそうだし、紹介されていたベトナムでのイベントはとても盛り上がっている印象を受けた。
ベトナムでは多くの講演が英語らしい。
ベトナム行きたい。</p>

<h3>Innovate and Invigorate Your Agile Discovery Practices</h3>

<blockquote><ul>
<li>多くのチームは一度ディスカバーに時間を費やした後、多くの時間をデリバリーに費やしている</li>
<li>ディスカバーとデリバリーのフローは断絶されてるべきではない。</li>
<li>そしてジャストオンタイムであるべき。</li>
</ul>


<p><!-- br --></p>

<ul>
<li>inovate(革新) + invigorate(活性化)</li>
</ul>


<p><!-- br --></p>

<ul>
<li>一般的なストーリーはユーザーとアクションから構成される</li>
</ul>


<p><!-- br --></p>

<ul>
<li>要件は機能要件と非機能要件に分けられる</li>
<li>それらの要件をさらに7つに分解したのが&#8221;7 product demensions&#8221;(プロダクトの7側面)</li>
</ul>


<p><!-- br --></p>

<ul>
<li>チームはinterdependent(互いに依存している状態)がよい</li>
<li>独立状態でもなく</li>
<li>依存でもなく(一方的な)</li>
</ul>


<p><!-- br --></p>

<ul>
<li>イメージを共有するために、より視覚的に考えるべき</li>
<li>実際に7側面を考える場を設けるとそれはエネルギッシュで騒がしい場になる</li>
<li>ディスカバーすることでモチベーションも高まる</li>
</ul>
</blockquote>

<p>今回紹介されたDtoD本は日本語に翻訳されている。紹介動画もある。</p>

<table border="0" cellpadding="0" cellspacing="0"><tr><td valign="top"><div style="border:1px solid;margin:0px;padding:6px 0px;width:260px;text-align:center;float:left"><a href="http://hb.afl.rakuten.co.jp/hgc/0ecae152.d6af1699.0ecae153.1dd72672/?pc=http%3a%2f%2fitem.rakuten.co.jp%2fbook%2f13138583%2f%3fscid%3daf_link_tbl&amp;m=http%3a%2f%2fm.rakuten.co.jp%2fbook%2fi%2f17331482%2f" target="_blank"><img src="https://hbb.afl.rakuten.co.jp/hgb/?pc=https%3a%2f%2fthumbnail.image.rakuten.co.jp%2f%400_mall%2fbook%2fcabinet%2fnoimage_01.gif%3f_ex%3d240x240&amp;m=https%3a%2f%2fthumbnail.image.rakuten.co.jp%2f%400_mall%2fbook%2fcabinet%2fnoimage_01.gif%3f_ex%3d80x80" alt="発見から納品へ [ Gottesdiener，Ellen ]" border="0" style="margin:0px;padding:0px"></a><p style="font-size:12px;line-height:1.4em;text-align:left;margin:0px;padding:2px 6px"><a href="http://hb.afl.rakuten.co.jp/hgc/0ecae152.d6af1699.0ecae153.1dd72672/?pc=http%3a%2f%2fitem.rakuten.co.jp%2fbook%2f13138583%2f%3fscid%3daf_link_tbl&amp;m=http%3a%2f%2fm.rakuten.co.jp%2fbook%2fi%2f17331482%2f" target="_blank">発見から納品へ [ Gottesdiener，Ellen ]</a><br><span style="">価格：3,500円（税込、送料込）</span><br></p></div></td></tr></table>


<p><div class="embed-video-container"><iframe src="//www.youtube.com/embed/x9oIpZaXTDs" allowfullscreen></iframe></div></p>

<p>イメージ的にはスコープや要件に新たな切り口を定義する感じだろうか。</p>

<hr />

<p>発表者の方々はHowではなくWhyを語る人が多い印象を受けた。
ただ、Howを実践することでWhyを発見することはあるはず。
一方で、もっと人やプロダクトの価値にもっとフォーカスすべきだなあと感じた。</p>

<p>ベトナムの方々は強いインパクトがあった。
彼らはスクラムの未来を考えよう、とビジョンやマインドを語っていたし、若かった。ベトナムのIT業界の平均年齢は27歳らしい。</p>

<p>今回のイベントに参加して、本家アジャイルカンファレンスにも行きたくなった。</p>

<p>最後に、実行委員の皆様ありがとうございました。</p>
]]></content>
  </entry>
  
</feed>
