<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Erlang | Matsue Blog]]></title>
  <link href="http://matsue.github.io/blog/categories/erlang/atom.xml" rel="self"/>
  <link href="http://matsue.github.io/"/>
  <updated>2015-03-05T21:12:47+09:00</updated>
  <id>http://matsue.github.io/</id>
  <author>
    <name><![CDATA[Hiroki Matsue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Erlang User Conference 2014 に参加した]]></title>
    <link href="http://matsue.github.io/blog/2014/06/12/euc2014/"/>
    <updated>2014-06-12T14:09:40+09:00</updated>
    <id>http://matsue.github.io/blog/2014/06/12/euc2014</id>
    <content type="html"><![CDATA[<p>ストックホルムで開催された<a href="http://www.erlang-factory.com/euc2014">Erlang User Conference 2014</a>に参加した。</p>

<p><img src="/images/2014-06-12-euc2014/euc2014_sponsors.jpg" title="&lsquo;euc2014_sponsors&rsquo; &lsquo;The flag of sponsors ato Erlang User Conference 2014&rsquo;" ></p>

<p>大変有難いことに<a href="http://www.erlang-factory.com/euc2014/yosuke-hara">LeoFSのセッション</a>の一部で、7分ほど登壇させていただいた。</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/35673208" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/rakutentech/scaling-and-high-performance-storage-system-leofs" title="Scaling and High Performance Storage System: LeoFS" target="_blank">Scaling and High Performance Storage System: LeoFS</a> </strong> from <strong><a href="http://www.slideshare.net/rakutentech" target="_blank">Rakuten, Inc</a></strong> </div></p>

<!-- more -->


<p>私が話したのは主にLeoFSのユースケースで、</p>

<ul>
<li>現時点で600TB程度のディスク総量でクラスタを組んでいる

<ul>
<li>データセンター間のレプリケーション機能を使っていきたい</li>
</ul>
</li>
<li>社内のファイル共有にownCloudをLeoFSと組み合わせて使っている

<ul>
<li>各国のグループ会社との動画の共有などに使われている</li>
</ul>
</li>
</ul>


<p>というようなことを紹介した。<br/>
私たちのセッションには30名ほどの方が聞きにきてくれていたかと思う。</p>

<h2>Day1</h2>

<p>初日は以下のセッションに参加した。</p>

<ol>
<li>Welcome to the Erlang User Conference!</li>
<li>Keynote: Composing a Functional Community (Katie Miller)</li>
<li>Scaling and High Performance Storage System: LeoFS (Yosuke Hara) => 発表</li>
<li>The Last REST Client You Will Ever Need (Loïc Hoguin)</li>
<li>Concuerror: Into Real Code (Stavros Aronis)</li>
<li>Building a Distributed Data Ingestion System with RabbitMQ (Alvaro Videla)</li>
<li>Building a Cloud with Erlang and SmartOS - How Hard Could it Possibly Be? (Heinz Gies)</li>
<li>Locks - Erlang-style Scalable Distributed Locking (Ulf Wiger)</li>
</ol>


<h3>Composing a Functional Community</h3>

<p>初日のキーノートは<a href="http://www.lambdaladies.com/">Lambda Ladies</a>という関数型言語の女性コミュニティから、Katieさんによる発表。</p>

<p>FP(Functional Programming)コミュニティの発展には以下が必要というお話でした。</p>

<ul>
<li>Education ビギナー向けの教育</li>
<li>Safe space ハラスメント対策とか</li>
<li>Mentoring 励ます メンティーはメンターになっていく</li>
</ul>


<p>今のテックスペースやコミュニティはデフォルトで男性向けである話や、実際に女性達が感じていることが紹介されていて、ほとんど男性で埋まっていた会場に対してパンチの効いた発表。<br/>
<a href="http://www.codemiller.com/blog/2013/07/06/functional-frock-a-dress-fit-for-a-lambda-lady/">Haskellによる6つのソートアルゴリズムがプリントされたギークドレス</a>も印象的でした。</p>

<ul>
<li>発表者プロフィール: <a href="http://www.erlang-factory.com/euc2014/katie-miller">http://www.erlang-factory.com/euc2014/katie-miller</a></li>
<li>スライド: <a href="http://community.codemiller.com/#/">http://community.codemiller.com/#/</a></li>
</ul>


<h3>The Last REST Client You Will Ever Need</h3>

<p>webサーバの<a href="https://github.com/extend/cowboy">cowboy</a>の開発者であるLoicさんによる発表。</p>

<p>REST APIに使うMedia TypeにJSON、Msgpack、HTML、XMLに代わってBEDというのを考えてるよ、という話。<br/>
Media Typeは独自の定義が使えるので、以下のようなタイプを提唱していた。</p>

<ul>
<li>application/x-bed</li>
<li>application/x-bed-stream</li>
</ul>


<p>バイト数は短く、圧縮もなしで、relationも定義できて・・というようなものを目指しているよう。<br/>
現時点では構想の段階でレポジトリはないが、プロジェクトは作成されている。
<a href="https://github.com/bed-project">https://github.com/bed-project</a></p>

<p>ヘルプ絶賛募集中とのことなので、BEDが気になった方はLoicさんにコンタクトをとるといいと思う。</p>

<ul>
<li>発表者プロフィール: <a href="http://www.erlang-factory.com/euc2014/loc-hoguin">http://www.erlang-factory.com/euc2014/loc-hoguin</a></li>
<li>スライド: <a href="http://ninenines.eu/talks/bed/bed.html">http://ninenines.eu/talks/bed/bed.html</a></li>
</ul>


<h3>Building a Distributed Data Ingestion System with RabbitMQ</h3>

<p>&ldquo;RabbitMQ in Action&#8221;の著者のAlvaroさんによるRabbitMQのデザインパターン紹介。</p>

<p>複数のDC間でのログ集めにRabbitMQを使ってるらしい。<br/>
スケールしていくには<a href="http://www.rabbitmq.com/federation.html">Federation Plugin</a>を使うといいよという内容。<br/>
性能が必要だが、メッセージのロスが許されるような場合はno-ackモードという選択肢もあるとのこと。</p>

<p>以下のデモページでメッセージが分配される様子を紹介しながらの発表だった。</p>

<ul>
<li>デモ実行ページ: <a href="http://tryrabbitmq.com/">http://tryrabbitmq.com/</a></li>
<li>デモのソース: <a href="https://github.com/RabbitMQSimulator/RabbitMQSimulator">https://github.com/RabbitMQSimulator/RabbitMQSimulator</a></li>
</ul>


<p>各workerにメッセージが分散される様子を見れるデモページは、ついついポチポチ押したくなってしまう。<br/>
正規表現を使ってのメッセージの内容に応じたルーティングもできる模様。</p>

<p>Fedarationを使った分散の例は以下のリンクでもJavaのコードを交えて紹介されているようだ。
<a href="http://jaxenter.com/distributed-log-aggregation-with-rabbitmq-federation-49154.html">http://jaxenter.com/distributed-log-aggregation-with-rabbitmq-federation-49154.html</a></p>

<ul>
<li>発表者プロフィール: <a href="http://www.erlang-factory.com/euc2014/alvaro-videla">http://www.erlang-factory.com/euc2014/alvaro-videla</a></li>
<li>スライド: <a href="http://www.erlang-factory.com/static/upload/media/1402395255933144rabbitmq_data_ingestion_euc.pdf">http://www.erlang-factory.com/static/upload/media/1402395255933144rabbitmq_data_ingestion_euc.pdf</a></li>
</ul>


<h2>Day2</h2>

<p>二日目に参加したセッションはこちら。</p>

<ol>
<li>Welcome to the 2nd Day of the EUC!</li>
<li>Keynote: Erlang, Open Networking, and the Future of Computing (Stuart Bailey)</li>
<li>Powering your Web and Mobile Applications (Jordan Wilberding)</li>
<li>Monitoring Erlang Systems with WombatOAM (Richard Jonas)</li>
<li>Scaling Erlang on 10K or More Cores: An Overview of the RELEASE Project (Simon Thompson)</li>
<li>Real-Time Performance at Massive Scale (Francois Orsini)</li>
<li>Where Shall I Parallelize? (Tamás Kozsik)</li>
<li>Elixir Tooling: Exploring Beyond the Language (Eric Meadows-Jönsson)</li>
<li>Latest News from the OTP Team - Kenneth Lundin</li>
<li>Announcement of the Erlang User of the Year &amp; the Most Influential Talk of 1999</li>
</ol>


<h3>Elixir Tooling: Exploring Beyond the Language</h3>

<p>ElixirコミッターのEricさんによる発表。</p>

<p>はじめにElixirの今年のニュースとして以下の３つを挙げていた。</p>

<ul>
<li>version1.0がリリース予定</li>
<li><a href="http://elixirconf.com/">ElixirConf</a>が開催予定</li>
<li>パッケージマネージャの<a href="https://hex.pm/">Hex</a>がリリースされた</li>
</ul>


<h4>Mix</h4>

<p>Mixというのはプロジェクト作成、コンパイル、テスト、などなどをサポートしてくれるツール。
ErlangのrebarやRubyでのrakeやbundleに似たことをしてくれる模様。</p>

<p>以下のツールを入れると、Mixのコマンドが拡張されるようだ。</p>

<ul>
<li>ecto <a href="https://github.com/elixir-lang/ecto">https://github.com/elixir-lang/ecto</a></li>
<li>exrm <a href="https://github.com/bitwalker/exrm">https://github.com/bitwalker/exrm</a></li>
</ul>


<p>ectoはDBのラッパーや管理を提供し、exrmはリリースをサポートしてくれる模様。</p>

<h4>Hex</h4>

<p>Elixirのパッケージマネージャで最近リリースされたばかりのようだ。<br/>
パッケージはS3でホスティングされてるとのこと。</p>

<h4>IEx</h4>

<p>Erlangでいうところのerl, Rubyでいうところのirbにあたる、Elixirの実行ターミナル。</p>

<p>IEx.pryを書いておくと実行中のコードの途中でiexに入ってデバッグできるらしい。pryにインスパイアされたものだそうだ。</p>

<p>iexシェルの中では<code>h Enum.map/2</code>とかするとヘルプも見えるとのこと。</p>

<h4>ExUnit</h4>

<p>tagsやfilter機能を使うと環境毎にテストを分けたり、特定ケースだけ実行することができるようだ。</p>

<p>またElixirではdoctestも提供されているとのこと。この形式で書かれたコメントは、後でドキュメントとして生成されるだけでなく、書かれているコードはテストとしての実行もしてくれる。</p>

<h4>Standard library</h4>

<ul>
<li><a href="http://elixir-lang.org/docs/stable/elixir/Stream.html">Stream</a>

<ul>
<li>再帰的にファイルの各行に処理するコードが、eachにブロック渡すだけのコードにできる。</li>
<li>遅延評価されるので必要になったときだけ実際にファイルをオープンしてる。</li>
</ul>
</li>
<li><a href="http://elixir-lang.org/docs/stable/elixir/Agent.html">Agent</a>

<ul>
<li>OTPを抽象化してくれるライブラリ</li>
</ul>
</li>
<li><p><a href="http://elixir-lang.org/docs/stable/elixir/Task.html">Task</a></p>

<ul>
<li>非同期に処理をするために使うライブラリ</li>
<li>Task.asyncでタスクを作って、Task.awaitで待つ、というような使い方。</li>
</ul>
</li>
<li><p>発表者プロフィール: <a href="http://www.erlang-factory.com/euc2014/eric-meadowsjnsson">http://www.erlang-factory.com/euc2014/eric-meadowsjnsson</a></p></li>
<li>スライド: <a href="http://www.erlang-factory.com/static/upload/media/1402598794815412elixirtooling.pdf">http://www.erlang-factory.com/static/upload/media/1402598794815412elixirtooling.pdf</a></li>
</ul>


<h3>Latest News from the OTP Team</h3>

<p>OTPチームからの17系以降の変更点の紹介。</p>

<ul>
<li>新しいデータ型のMaps</li>
<li>binary周りで発生していた、スレッドにおけるブロックが減る</li>
<li>ライセンスがEPL(Erlang Public License)からApache License Version 2.0に代わる</li>
</ul>


<p>ライセンスに関しては以前、Mozilla Public Licenseへの移行も検討されていたようだ。
ライセンス変更にあたり、コミッターの方々にはメールで同意を求めるので&#8221;Yes&#8221;という準備しておいてね！というようなことを言っていた。</p>

<h2>Day3</h2>

<p>最終日は以下のチュートリアルに参加した。</p>

<ol>
<li>Introduction to Load Testing with Tsung (Radosław Szymczyszyn)</li>
<li>Erlang in Production - Tricks and Tools for Running Erlang Production Systems (Jesper Louis Andersen)</li>
<li>Load Testing Made Easy (Diana Corbacho)</li>
<li>Deploying and Monitoring Erlang Nodes in the Cloud (Csaba Hoch)</li>
</ol>


<p><img src="/images/2014-06-12-euc2014/euc2014_ericsson.jpg" title="&lsquo;euc2014_ericsson&rsquo; &lsquo;Ericsson Group headquarters&rsquo;" ></p>

<p>WombatOAMやMegaloadといったErlang監視ツール、ロードテストサポートツールにも実際に触れることができたがこちらはOSSではないようだ。</p>

<h3>Introduction to Load Testing with Tsung</h3>

<p>ロードテストツールであるTsungの紹介。こちら、Erlang製のJMeterのようなもの。</p>

<p>チュートリアルは以下の資料に従い、Vagrantで構築された複数VMを使って行われた。Tsungの資料はあまりないと思われるので貴重だ。</p>

<ul>
<li><a href="https://github.com/lavrin/euc-2014">https://github.com/lavrin/euc-2014</a></li>
<li><a href="https://github.com/lavrin/tsung-scenarios">https://github.com/lavrin/tsung-scenarios</a></li>
</ul>


<p>Tsungに関するメモ。</p>

<ul>
<li>指定されたユーザ数でランダムなアクセスをシミュレーションできる

<ul>
<li>XMPP、TCP、HTTPなどのロードテストができる</li>
<li>ログインパスワード指定できる</li>
<li>ユーザによってはログインしかしないとかシミュレーションできる</li>
<li>パスにIDとかいれてリクエスト生成してくれる</li>
</ul>
</li>
<li>今回のサンプルでdurationが14400 minutesなのは十分に大きくするため</li>
<li>ディレクトリ構成やログインユーザ、elrangのcookieなど環境揃っている必要があるが、複数のノードからtsungの実行もできるらしい</li>
<li>テストの結果はtsplotとかでグラフにできるらしい</li>
<li>テスト時に、<code>ulimit -n</code>の上限に引っかかる可能性あるので注意しておく</li>
<li>クラスタでやるときはtsung-controllerというのもあるらしいが、使用には注意らしい(SPOF?)</li>
<li>dumptrafficというオプションをオンにすると、大量のログがでるので注意</li>
<li><p>JMeterと違ってErlangなので、テスト時にはerlangのメソッドを直接呼ぶようなテストもできるらしい</p></li>
<li><p>発表者プロフィール: <a href="http://www.erlang-factory.com/euc2014/radosaw-szymczyszyn">http://www.erlang-factory.com/euc2014/radosaw-szymczyszyn</a></p></li>
</ul>


<h3>Erlang in Production</h3>

<p>運用者が朝まで寝ていられるシステムをつくるにはどうすればいいかという話。</p>

<p>まず、システムはいつ壊れるのかという話を&#8221;How Complex Systems Fail&#8221;というRichard Cookさんの資料を引用しつつ紹介。
たぶん元の資料は<a href="http://www.ctlab.org/documents/How%20Complex%20Systems%20Fail.pdf">こちら</a>。</p>

<p>紹介されていたライブラリの一部。
- <a href="https://github.com/feuerlabs/exometer">https://github.com/feuerlabs/exometer</a><br/>
- <a href="https://github.com/klarna/circuit_breaker">https://github.com/klarna/circuit_breaker</a>
- <a href="https://github.com/basho/sidejob">https://github.com/basho/sidejob</a>
- <a href="https://github.com/uwiger/jobs">https://github.com/uwiger/jobs</a>
- <a href="https://github.com/massemanet/eper">https://github.com/massemanet/eper</a></p>

<p>上記のライブラリは、Erlangプロセスの情報を収集したり、ジョブスケジューリングをしてくれるもののようだ。</p>

<p>以降は、使ってるライブラリや設定の話。</p>

<h4>sys.configについて</h4>

<p><code>erl -man config</code>でも確認できるがconfigは、他のファイルも読めるので環境ごとのファイルを置いておくようにするといいらしい。</p>

<h4>Lager</h4>

<p><a href="https://github.com/basho/lager">https://github.com/basho/lager</a></p>

<p>logライブラリにはlagerを使って、どこかに集めている。
<a href="https://github.com/boundary/folsom">folsom</a>のデータ飛ばしてるらしい。</p>

<h4>alarm_handler</h4>

<p>SASLの一部。アラートは自分で定義できて、Nagiosサーバにもデータ飛ばすこともできる。
アラームがオフになる時(?)にlagerに流し込むとかもできる。</p>

<p>Nagiosと組み合わせる際は、ファイル書き出されたステータスをNagiosが定期的に確認するようにしていたらしい。</p>

<h4>os_mon</h4>

<p><a href="http://erlang.org/doc/man/os_mon_app.html">http://erlang.org/doc/man/os_mon_app.html</a></p>

<p>cpu usageみたりもできる。mem_supでメモリ使い過ぎ検知もできる。</p>

<h4>fuse</h4>

<p><a href="https://github.com/jlouis/fuse">https://github.com/jlouis/fuse</a></p>

<p>マウントに使うfuseとは別のErlangライブラリ。<br/>
たとえばmysql落ちた時にほかのノードの処理をキックするのに使う。</p>

<h4>Folsom</h4>

<p><a href="https://github.com/boundary/folsom">https://github.com/boundary/folsom</a></p>

<p>メトリクスのライブラリ。</p>

<p>データ転送にはUDP使ってる、リモートが落ちてたり遅いことに影響されないように。<br/>
counters, gauges, spirals, histogramsなどのグラフが用意されている。<br/>
グラフを見るに当たっての注意点としては、平均を見るのは危険。低い方と高い方に値が固まっているかもしれないので。なので、95th、99thパーセンタイルの情報をみるべき。</p>

<h4>なにを集計する？</h4>

<p>取れるものすべてを集計してる。</p>

<ul>
<li>query times</li>
<li>internal heavy weight processing</li>
<li>API endpoints</li>
<li>every cascading subsystem</li>
<li>cache hit/miss, あとDBたたいた時にどうだったのか</li>
</ul>


<h4>Tracing / Recon</h4>

<ul>
<li><a href="http://ferd.github.io/recon/">http://ferd.github.io/recon/</a></li>
<li><a href="https://github.com/ferd/recon">https://github.com/ferd/recon</a></li>
</ul>


<p>reconは各pidが何を実行しているかわかるようにしてくれるらしい。
recon_traceでオンラインtracingもできるらしい。</p>

<h2>会場の写真</h2>

<p>カンファレンス会場に使われた建物。
<img src="/images/2014-06-12-euc2014/euc2014_venue.jpg" title="&lsquo;euc2014_venue&rsquo; &lsquo;The venue of EUC2014&rsquo;" ></p>

<p>カンファレンス会場では何故かファミコンが置かれていて、グラディウスやボンバーマンをプレイされていた。コナミコマンドは使っていないようだ。
<img src="/images/2014-06-12-euc2014/euc2014_game.jpg" title="&lsquo;euc2014_game&rsquo; &lsquo;Game space at EUC2014&rsquo;" ></p>

<p>カンファレンス会場でのランチの様子。
<img src="/images/2014-06-12-euc2014/euc2014_lunch.jpg" title="&lsquo;euc2014_lunch&rsquo; &lsquo;Lunch time at EUC2014&rsquo;" ></p>

<p>チュートリアルで使われたEricssonの一室。
<img src="/images/2014-06-12-euc2014/euc2014_tutorial_room.jpg" title="&lsquo;euc2014_tutorial_room&rsquo; &lsquo;Tutorial room at Ericsson&rsquo;" ></p>

<p>Ericssonでのランチ。スウェーデンではサンドイッチの出る場面が多い。
<img src="/images/2014-06-12-euc2014/euc2014_tutorial_lunch.jpg" title="&lsquo;euc2014_tutorial_lunch&rsquo; &lsquo;Lunch time at Ericsson&rsquo;" ></p>

<h2>おわりに</h2>

<p>EUCに参加するのは二度目で、前回は<a href="http://www.erlang-factory.com/conference/ErlangUserConference2012">2012年のEUC</a>に参加していた。</p>

<p>以前は日に何度かあるコーヒブレイクの45分が非常に長く感じられたのだが、今回は会場で知り合った方と話せたこともあってか、あっという間に感じられた。<br/>
英語への敷居が前よりも下がったのかもしれない。<a href="http://d.hatena.ne.jp/hyoshiok/20130602">コーヒーを取るタイミング</a>で、目が合ったら&#8221;hi&#8221;と言ってみたりもした。<br/>
わずかだがJoe Armstrongさんとも話せて嬉しい限りだ。</p>

<p>また、あまり前回は意識していなかったが、発表者はみんな英語が母国語とは限らない。<br/>
よく聞いていると、言いたいことが出てこなかったり、発音を気にして言い直したりしている。<br/>
ヨーロッパの各地から来ている人がいるので、イントネーションも様々だった。<br/>
英語での発表には、多少の不自由を感じながらもみんなやっているのかもしれない。</p>

<p>最後に、今回の発表・参加にあたってレビューや調整をしてくれた皆様に感謝します。</p>
]]></content>
  </entry>
  
</feed>
