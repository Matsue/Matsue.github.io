<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Erlang Meetup on Matsue Blog</title>
    <link>http://matsue.github.io/categories/erlang-meetup/</link>
    <description>Recent content in Erlang Meetup on Matsue Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>jp-ja</language>
    <copyright>All rights reserved - 2015</copyright>
    <lastBuildDate>Thu, 12 Jun 2014 14:09:40 +0900</lastBuildDate>
    <atom:link href="http://matsue.github.io/categories/erlang-meetup/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Erlang User Conference 2014 に参加した</title>
      <link>http://matsue.github.io/post/2014-06-12-euc2014/</link>
      <pubDate>Thu, 12 Jun 2014 14:09:40 +0900</pubDate>
      
      <guid>http://matsue.github.io/post/2014-06-12-euc2014/</guid>
      <description>

&lt;p&gt;ストックホルムで開催された&lt;a href=&#34;http://www.erlang-factory.com/euc2014&#34;&gt;Erlang User Conference 2014&lt;/a&gt;に参加した。&lt;/p&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://matsue.github.io/images/2014-06-12-euc2014/euc2014_sponsors.jpg&#34; alt=&#34;euc2014_sponsors&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        The flag of sponsors ato Erlang User Conference 2014
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;



&lt;p&gt;大変有難いことに&lt;a href=&#34;http://www.erlang-factory.com/euc2014/yosuke-hara&#34;&gt;LeoFSのセッション&lt;/a&gt;の一部で、7分ほど登壇させていただいた。&lt;/p&gt;

&lt;iframe src=&#34;http://www.slideshare.net/slideshow/embed_code/35673208&#34; width=&#34;427&#34; height=&#34;356&#34; frameborder=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; scrolling=&#34;no&#34; style=&#34;border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;&#34; allowfullscreen&gt; &lt;/iframe&gt;

&lt;div class=&#34;embed-video-container&#34;&gt;
  &lt;iframe src=&#34;https://player.vimeo.com/video/104514109#t=1658s?autoplay=0&amp;title=0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;私が話したのは主にLeoFSのユースケースで、&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;現時点で600TB程度のディスク総量でクラスタを組んでいる

&lt;ul&gt;
&lt;li&gt;データセンター間のレプリケーション機能を使っていきたい&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;社内のファイル共有にownCloudをLeoFSと組み合わせて使っている

&lt;ul&gt;
&lt;li&gt;各国のグループ会社との動画の共有などに使われている&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というようなことを紹介した。&lt;br /&gt;
私たちのセッションには30名ほどの方が聞きにきてくれていたかと思う。&lt;/p&gt;

&lt;h2 id=&#34;day1:9da3f0553ce003d0108bc87f772b3e0d&#34;&gt;Day1&lt;/h2&gt;

&lt;p&gt;初日は以下のセッションに参加した。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Welcome to the Erlang User Conference!&lt;/li&gt;
&lt;li&gt;Keynote: Composing a Functional Community (Katie Miller)&lt;/li&gt;
&lt;li&gt;Scaling and High Performance Storage System: LeoFS (Yosuke Hara) =&amp;gt; 発表&lt;/li&gt;
&lt;li&gt;The Last REST Client You Will Ever Need (Loïc Hoguin)&lt;/li&gt;
&lt;li&gt;Concuerror: Into Real Code (Stavros Aronis)&lt;/li&gt;
&lt;li&gt;Building a Distributed Data Ingestion System with RabbitMQ (Alvaro Videla)&lt;/li&gt;
&lt;li&gt;Building a Cloud with Erlang and SmartOS - How Hard Could it Possibly Be? (Heinz Gies)&lt;/li&gt;
&lt;li&gt;Locks - Erlang-style Scalable Distributed Locking (Ulf Wiger)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;composing-a-functional-community:9da3f0553ce003d0108bc87f772b3e0d&#34;&gt;Composing a Functional Community&lt;/h3&gt;

&lt;p&gt;初日のキーノートは&lt;a href=&#34;http://www.lambdaladies.com/&#34;&gt;Lambda Ladies&lt;/a&gt;という関数型言語の女性コミュニティから、Katieさんによる発表。&lt;/p&gt;

&lt;p&gt;FP(Functional Programming)コミュニティの発展には以下が必要というお話でした。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Education ビギナー向けの教育&lt;/li&gt;
&lt;li&gt;Safe space ハラスメント対策とか&lt;/li&gt;
&lt;li&gt;Mentoring 励ます メンティーはメンターになっていく&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今のテックスペースやコミュニティはデフォルトで男性向けである話や、実際に女性達が感じていることが紹介されていて、ほとんど男性で埋まっていた会場に対してパンチの効いた発表。&lt;br /&gt;
&lt;a href=&#34;http://www.codemiller.com/blog/2013/07/06/functional-frock-a-dress-fit-for-a-lambda-lady/&#34;&gt;Haskellによる6つのソートアルゴリズムがプリントされたギークドレス&lt;/a&gt;も印象的でした。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;発表者プロフィール: &lt;a href=&#34;http://www.erlang-factory.com/euc2014/katie-miller&#34;&gt;http://www.erlang-factory.com/euc2014/katie-miller&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;スライド: &lt;a href=&#34;http://community.codemiller.com/#/&#34;&gt;http://community.codemiller.com/#/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;the-last-rest-client-you-will-ever-need:9da3f0553ce003d0108bc87f772b3e0d&#34;&gt;The Last REST Client You Will Ever Need&lt;/h3&gt;

&lt;p&gt;webサーバの&lt;a href=&#34;https://github.com/extend/cowboy&#34;&gt;cowboy&lt;/a&gt;の開発者であるLoicさんによる発表。&lt;/p&gt;

&lt;p&gt;REST APIに使うMedia TypeにJSON、Msgpack、HTML、XMLに代わってBEDというのを考えてるよ、という話。&lt;br /&gt;
Media Typeは独自の定義が使えるので、以下のようなタイプを提唱していた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;application/x-bed&lt;/li&gt;
&lt;li&gt;application/x-bed-stream&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;バイト数は短く、圧縮もなしで、relationも定義できて・・というようなものを目指しているよう。&lt;br /&gt;
現時点では構想の段階でレポジトリはないが、プロジェクトは作成されている。
&lt;a href=&#34;https://github.com/bed-project&#34;&gt;https://github.com/bed-project&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;ヘルプ絶賛募集中とのことなので、BEDが気になった方はLoicさんにコンタクトをとるといいと思う。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;発表者プロフィール: &lt;a href=&#34;http://www.erlang-factory.com/euc2014/loc-hoguin&#34;&gt;http://www.erlang-factory.com/euc2014/loc-hoguin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;スライド: &lt;a href=&#34;http://ninenines.eu/talks/bed/bed.html&#34;&gt;http://ninenines.eu/talks/bed/bed.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;building-a-distributed-data-ingestion-system-with-rabbitmq:9da3f0553ce003d0108bc87f772b3e0d&#34;&gt;Building a Distributed Data Ingestion System with RabbitMQ&lt;/h3&gt;

&lt;p&gt;&amp;ldquo;RabbitMQ in Action&amp;rdquo;の著者のAlvaroさんによるRabbitMQのデザインパターン紹介。&lt;/p&gt;

&lt;p&gt;複数のDC間でのログ集めにRabbitMQを使ってるらしい。&lt;br /&gt;
スケールしていくには&lt;a href=&#34;http://www.rabbitmq.com/federation.html&#34;&gt;Federation Plugin&lt;/a&gt;を使うといいよという内容。&lt;br /&gt;
性能が必要だが、メッセージのロスが許されるような場合はno-ackモードという選択肢もあるとのこと。&lt;/p&gt;

&lt;p&gt;以下のデモページでメッセージが分配される様子を紹介しながらの発表だった。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;デモ実行ページ: &lt;a href=&#34;http://tryrabbitmq.com/&#34;&gt;http://tryrabbitmq.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;デモのソース: &lt;a href=&#34;https://github.com/RabbitMQSimulator/RabbitMQSimulator&#34;&gt;https://github.com/RabbitMQSimulator/RabbitMQSimulator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;各workerにメッセージが分散される様子を見れるデモページは、ついついポチポチ押したくなってしまう。&lt;br /&gt;
正規表現を使ってのメッセージの内容に応じたルーティングもできる模様。&lt;/p&gt;

&lt;p&gt;Fedarationを使った分散の例は以下のリンクでもJavaのコードを交えて紹介されているようだ。
&lt;a href=&#34;http://jaxenter.com/distributed-log-aggregation-with-rabbitmq-federation-49154.html&#34;&gt;http://jaxenter.com/distributed-log-aggregation-with-rabbitmq-federation-49154.html&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;発表者プロフィール: &lt;a href=&#34;http://www.erlang-factory.com/euc2014/alvaro-videla&#34;&gt;http://www.erlang-factory.com/euc2014/alvaro-videla&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;スライド: &lt;a href=&#34;http://www.erlang-factory.com/static/upload/media/1402395255933144rabbitmq_data_ingestion_euc.pdf&#34;&gt;http://www.erlang-factory.com/static/upload/media/1402395255933144rabbitmq_data_ingestion_euc.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;day2:9da3f0553ce003d0108bc87f772b3e0d&#34;&gt;Day2&lt;/h2&gt;

&lt;p&gt;二日目に参加したセッションはこちら。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Welcome to the 2nd Day of the EUC!&lt;/li&gt;
&lt;li&gt;Keynote: Erlang, Open Networking, and the Future of Computing (Stuart Bailey)&lt;/li&gt;
&lt;li&gt;Powering your Web and Mobile Applications (Jordan Wilberding)&lt;/li&gt;
&lt;li&gt;Monitoring Erlang Systems with WombatOAM (Richard Jonas)&lt;/li&gt;
&lt;li&gt;Scaling Erlang on 10K or More Cores: An Overview of the RELEASE Project (Simon Thompson)&lt;/li&gt;
&lt;li&gt;Real-Time Performance at Massive Scale (Francois Orsini)&lt;/li&gt;
&lt;li&gt;Where Shall I Parallelize? (Tamás Kozsik)&lt;/li&gt;
&lt;li&gt;Elixir Tooling: Exploring Beyond the Language (Eric Meadows-Jönsson)&lt;/li&gt;
&lt;li&gt;Latest News from the OTP Team - Kenneth Lundin&lt;/li&gt;
&lt;li&gt;Announcement of the Erlang User of the Year &amp;amp; the Most Influential Talk of 1999&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;elixir-tooling-exploring-beyond-the-language:9da3f0553ce003d0108bc87f772b3e0d&#34;&gt;Elixir Tooling: Exploring Beyond the Language&lt;/h3&gt;

&lt;p&gt;ElixirコミッターのEricさんによる発表。&lt;/p&gt;

&lt;p&gt;はじめにElixirの今年のニュースとして以下の３つを挙げていた。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;version1.0がリリース予定&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://elixirconf.com/&#34;&gt;ElixirConf&lt;/a&gt;が開催予定&lt;/li&gt;
&lt;li&gt;パッケージマネージャの&lt;a href=&#34;https://hex.pm/&#34;&gt;Hex&lt;/a&gt;がリリースされた&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;mix:9da3f0553ce003d0108bc87f772b3e0d&#34;&gt;Mix&lt;/h4&gt;

&lt;p&gt;Mixというのはプロジェクト作成、コンパイル、テスト、などなどをサポートしてくれるツール。
ErlangのrebarやRubyでのrakeやbundleに似たことをしてくれる模様。&lt;/p&gt;

&lt;p&gt;以下のツールを入れると、Mixのコマンドが拡張されるようだ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ecto &lt;a href=&#34;https://github.com/elixir-lang/ecto&#34;&gt;https://github.com/elixir-lang/ecto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;exrm &lt;a href=&#34;https://github.com/bitwalker/exrm&#34;&gt;https://github.com/bitwalker/exrm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ectoはDBのラッパーや管理を提供し、exrmはリリースをサポートしてくれる模様。&lt;/p&gt;

&lt;h4 id=&#34;hex:9da3f0553ce003d0108bc87f772b3e0d&#34;&gt;Hex&lt;/h4&gt;

&lt;p&gt;Elixirのパッケージマネージャで最近リリースされたばかりのようだ。&lt;br /&gt;
パッケージはS3でホスティングされてるとのこと。&lt;/p&gt;

&lt;h4 id=&#34;iex:9da3f0553ce003d0108bc87f772b3e0d&#34;&gt;IEx&lt;/h4&gt;

&lt;p&gt;Erlangでいうところのerl, Rubyでいうところのirbにあたる、Elixirの実行ターミナル。&lt;/p&gt;

&lt;p&gt;IEx.pryを書いておくと実行中のコードの途中でiexに入ってデバッグできるらしい。pryにインスパイアされたものだそうだ。&lt;/p&gt;

&lt;p&gt;iexシェルの中では&lt;code&gt;h Enum.map/2&lt;/code&gt;とかするとヘルプも見えるとのこと。&lt;/p&gt;

&lt;h4 id=&#34;exunit:9da3f0553ce003d0108bc87f772b3e0d&#34;&gt;ExUnit&lt;/h4&gt;

&lt;p&gt;tagsやfilter機能を使うと環境毎にテストを分けたり、特定ケースだけ実行することができるようだ。&lt;/p&gt;

&lt;p&gt;またElixirではdoctestも提供されているとのこと。この形式で書かれたコメントは、後でドキュメントとして生成されるだけでなく、書かれているコードはテストとしての実行もしてくれる。&lt;/p&gt;

&lt;h4 id=&#34;standard-library:9da3f0553ce003d0108bc87f772b3e0d&#34;&gt;Standard library&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://elixir-lang.org/docs/stable/elixir/Stream.html&#34;&gt;Stream&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;再帰的にファイルの各行に処理するコードが、eachにブロック渡すだけのコードにできる。&lt;/li&gt;
&lt;li&gt;遅延評価されるので必要になったときだけ実際にファイルをオープンしてる。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://elixir-lang.org/docs/stable/elixir/Agent.html&#34;&gt;Agent&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;OTPを抽象化してくれるライブラリ&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://elixir-lang.org/docs/stable/elixir/Task.html&#34;&gt;Task&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;非同期に処理をするために使うライブラリ&lt;/li&gt;
&lt;li&gt;Task.asyncでタスクを作って、Task.awaitで待つ、というような使い方。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;発表者プロフィール: &lt;a href=&#34;http://www.erlang-factory.com/euc2014/eric-meadowsjnsson&#34;&gt;http://www.erlang-factory.com/euc2014/eric-meadowsjnsson&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;スライド: &lt;a href=&#34;http://www.erlang-factory.com/static/upload/media/1402598794815412elixirtooling.pdf&#34;&gt;http://www.erlang-factory.com/static/upload/media/1402598794815412elixirtooling.pdf&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;latest-news-from-the-otp-team:9da3f0553ce003d0108bc87f772b3e0d&#34;&gt;Latest News from the OTP Team&lt;/h3&gt;

&lt;p&gt;OTPチームからの17系以降の変更点の紹介。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;新しいデータ型のMaps&lt;/li&gt;
&lt;li&gt;binary周りで発生していた、スレッドにおけるブロックが減る&lt;/li&gt;
&lt;li&gt;ライセンスがEPL(Erlang Public License)からApache License Version 2.0に代わる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ライセンスに関しては以前、Mozilla Public Licenseへの移行も検討されていたようだ。
ライセンス変更にあたり、コミッターの方々にはメールで同意を求めるので&amp;rdquo;Yes&amp;rdquo;という準備しておいてね！というようなことを言っていた。&lt;/p&gt;

&lt;h2 id=&#34;day3:9da3f0553ce003d0108bc87f772b3e0d&#34;&gt;Day3&lt;/h2&gt;

&lt;p&gt;最終日は以下のチュートリアルに参加した。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Introduction to Load Testing with Tsung (Radosław Szymczyszyn)&lt;/li&gt;
&lt;li&gt;Erlang in Production - Tricks and Tools for Running Erlang Production Systems (Jesper Louis Andersen)&lt;/li&gt;
&lt;li&gt;Load Testing Made Easy (Diana Corbacho)&lt;/li&gt;
&lt;li&gt;Deploying and Monitoring Erlang Nodes in the Cloud (Csaba Hoch)&lt;/li&gt;
&lt;/ol&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://matsue.github.io/images/2014-06-12-euc2014/euc2014_ericsson.jpg&#34; alt=&#34;euc2014_ericsson&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Ericsson Group headquarters
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;



&lt;p&gt;WombatOAMやMegaloadといったErlang監視ツール、ロードテストサポートツールにも実際に触れることができたがこちらはOSSではないようだ。&lt;/p&gt;

&lt;h3 id=&#34;introduction-to-load-testing-with-tsung:9da3f0553ce003d0108bc87f772b3e0d&#34;&gt;Introduction to Load Testing with Tsung&lt;/h3&gt;

&lt;p&gt;ロードテストツールであるTsungの紹介。こちら、Erlang製のJMeterのようなもの。&lt;/p&gt;

&lt;p&gt;チュートリアルは以下の資料に従い、Vagrantで構築された複数VMを使って行われた。Tsungの資料はあまりないと思われるので貴重だ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/lavrin/euc-2014&#34;&gt;https://github.com/lavrin/euc-2014&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/lavrin/tsung-scenarios&#34;&gt;https://github.com/lavrin/tsung-scenarios&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tsungに関するメモ。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;指定されたユーザ数でランダムなアクセスをシミュレーションできる

&lt;ul&gt;
&lt;li&gt;XMPP、TCP、HTTPなどのロードテストができる&lt;/li&gt;
&lt;li&gt;ログインパスワード指定できる&lt;/li&gt;
&lt;li&gt;ユーザによってはログインしかしないとかシミュレーションできる&lt;/li&gt;
&lt;li&gt;パスにIDとかいれてリクエスト生成してくれる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;今回のサンプルでdurationが14400 minutesなのは十分に大きくするため&lt;/li&gt;
&lt;li&gt;ディレクトリ構成やログインユーザ、elrangのcookieなど環境揃っている必要があるが、複数のノードからtsungの実行もできるらしい&lt;/li&gt;
&lt;li&gt;テストの結果はtsplotとかでグラフにできるらしい&lt;/li&gt;
&lt;li&gt;テスト時に、&lt;code&gt;ulimit -n&lt;/code&gt;の上限に引っかかる可能性あるので注意しておく&lt;/li&gt;
&lt;li&gt;クラスタでやるときはtsung-controllerというのもあるらしいが、使用には注意らしい(SPOF?)&lt;/li&gt;
&lt;li&gt;dumptrafficというオプションをオンにすると、大量のログがでるので注意&lt;/li&gt;

&lt;li&gt;&lt;p&gt;JMeterと違ってErlangなので、テスト時にはerlangのメソッドを直接呼ぶようなテストもできるらしい&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;発表者プロフィール: &lt;a href=&#34;http://www.erlang-factory.com/euc2014/radosaw-szymczyszyn&#34;&gt;http://www.erlang-factory.com/euc2014/radosaw-szymczyszyn&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;erlang-in-production:9da3f0553ce003d0108bc87f772b3e0d&#34;&gt;Erlang in Production&lt;/h3&gt;

&lt;p&gt;運用者が朝まで寝ていられるシステムをつくるにはどうすればいいかという話。&lt;/p&gt;

&lt;p&gt;まず、システムはいつ壊れるのかという話を&amp;rdquo;How Complex Systems Fail&amp;rdquo;というRichard Cookさんの資料を引用しつつ紹介。
たぶん元の資料は&lt;a href=&#34;http://www.ctlab.org/documents/How%20Complex%20Systems%20Fail.pdf&#34;&gt;こちら&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;紹介されていたライブラリの一部。
- &lt;a href=&#34;https://github.com/feuerlabs/exometer&#34;&gt;https://github.com/feuerlabs/exometer&lt;/a&gt;&lt;br /&gt;
- &lt;a href=&#34;https://github.com/klarna/circuit_breaker&#34;&gt;https://github.com/klarna/circuit_breaker&lt;/a&gt;
- &lt;a href=&#34;https://github.com/basho/sidejob&#34;&gt;https://github.com/basho/sidejob&lt;/a&gt;
- &lt;a href=&#34;https://github.com/uwiger/jobs&#34;&gt;https://github.com/uwiger/jobs&lt;/a&gt;
- &lt;a href=&#34;https://github.com/massemanet/eper&#34;&gt;https://github.com/massemanet/eper&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;上記のライブラリは、Erlangプロセスの情報を収集したり、ジョブスケジューリングをしてくれるもののようだ。&lt;/p&gt;

&lt;p&gt;以降は、使ってるライブラリや設定の話。&lt;/p&gt;

&lt;h4 id=&#34;sys-configについて:9da3f0553ce003d0108bc87f772b3e0d&#34;&gt;sys.configについて&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;erl -man config&lt;/code&gt;でも確認できるがconfigは、他のファイルも読めるので環境ごとのファイルを置いておくようにするといいらしい。&lt;/p&gt;

&lt;h4 id=&#34;lager:9da3f0553ce003d0108bc87f772b3e0d&#34;&gt;Lager&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/basho/lager&#34;&gt;https://github.com/basho/lager&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;logライブラリにはlagerを使って、どこかに集めている。
&lt;a href=&#34;https://github.com/boundary/folsom&#34;&gt;folsom&lt;/a&gt;のデータ飛ばしてるらしい。&lt;/p&gt;

&lt;h4 id=&#34;alarm-handler:9da3f0553ce003d0108bc87f772b3e0d&#34;&gt;alarm_handler&lt;/h4&gt;

&lt;p&gt;SASLの一部。アラートは自分で定義できて、Nagiosサーバにもデータ飛ばすこともできる。
アラームがオフになる時(?)にlagerに流し込むとかもできる。&lt;/p&gt;

&lt;p&gt;Nagiosと組み合わせる際は、ファイル書き出されたステータスをNagiosが定期的に確認するようにしていたらしい。&lt;/p&gt;

&lt;h4 id=&#34;os-mon:9da3f0553ce003d0108bc87f772b3e0d&#34;&gt;os_mon&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://erlang.org/doc/man/os_mon_app.html&#34;&gt;http://erlang.org/doc/man/os_mon_app.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;cpu usageみたりもできる。mem_supでメモリ使い過ぎ検知もできる。&lt;/p&gt;

&lt;h4 id=&#34;fuse:9da3f0553ce003d0108bc87f772b3e0d&#34;&gt;fuse&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/jlouis/fuse&#34;&gt;https://github.com/jlouis/fuse&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;マウントに使うfuseとは別のErlangライブラリ。&lt;br /&gt;
たとえばmysql落ちた時にほかのノードの処理をキックするのに使う。&lt;/p&gt;

&lt;h4 id=&#34;folsom:9da3f0553ce003d0108bc87f772b3e0d&#34;&gt;Folsom&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/boundary/folsom&#34;&gt;https://github.com/boundary/folsom&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;メトリクスのライブラリ。&lt;/p&gt;

&lt;p&gt;データ転送にはUDP使ってる、リモートが落ちてたり遅いことに影響されないように。&lt;br /&gt;
counters, gauges, spirals, histogramsなどのグラフが用意されている。&lt;br /&gt;
グラフを見るに当たっての注意点としては、平均を見るのは危険。低い方と高い方に値が固まっているかもしれないので。なので、95th、99thパーセンタイルの情報をみるべき。&lt;/p&gt;

&lt;h4 id=&#34;なにを集計する:9da3f0553ce003d0108bc87f772b3e0d&#34;&gt;なにを集計する？&lt;/h4&gt;

&lt;p&gt;取れるものすべてを集計してる。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;query times&lt;/li&gt;
&lt;li&gt;internal heavy weight processing&lt;/li&gt;
&lt;li&gt;API endpoints&lt;/li&gt;
&lt;li&gt;every cascading subsystem&lt;/li&gt;
&lt;li&gt;cache hit/miss, あとDBたたいた時にどうだったのか&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;tracing-recon:9da3f0553ce003d0108bc87f772b3e0d&#34;&gt;Tracing / Recon&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ferd.github.io/recon/&#34;&gt;http://ferd.github.io/recon/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ferd/recon&#34;&gt;https://github.com/ferd/recon&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;reconは各pidが何を実行しているかわかるようにしてくれるらしい。
recon_traceでオンラインtracingもできるらしい。&lt;/p&gt;

&lt;h2 id=&#34;会場の写真:9da3f0553ce003d0108bc87f772b3e0d&#34;&gt;会場の写真&lt;/h2&gt;

&lt;p&gt;カンファレンス会場に使われた建物。

&lt;figure &gt;
    
        &lt;img src=&#34;http://matsue.github.io/images/2014-06-12-euc2014/euc2014_venue.jpg&#34; alt=&#34;euc2014_venue&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        The venue of EUC2014
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;

&lt;/p&gt;

&lt;p&gt;カンファレンス会場では何故かファミコンが置かれていて、グラディウスやボンバーマンをプレイされていた。コナミコマンドは使っていないようだ。

&lt;figure &gt;
    
        &lt;img src=&#34;http://matsue.github.io/images/2014-06-12-euc2014/euc2014_game.jpg&#34; alt=&#34;euc2014_game&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Game space at EUC2014
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;

&lt;/p&gt;

&lt;p&gt;カンファレンス会場でのランチの様子。

&lt;figure &gt;
    
        &lt;img src=&#34;http://matsue.github.io/images/2014-06-12-euc2014/euc2014_lunch.jpg&#34; alt=&#34;euc2014_lunch&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Lunch time at EUC2014
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;

&lt;/p&gt;

&lt;p&gt;チュートリアルで使われたEricssonの一室。

&lt;figure &gt;
    
        &lt;img src=&#34;http://matsue.github.io/images/2014-06-12-euc2014/euc2014_tutorial_room.jpg&#34; alt=&#34;euc2014_tutorial_room&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Tutorial room at Ericsson
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;

&lt;/p&gt;

&lt;p&gt;Ericssonでのランチ。スウェーデンではサンドイッチの出る場面が多い。

&lt;figure &gt;
    
        &lt;img src=&#34;http://matsue.github.io/images/2014-06-12-euc2014/euc2014_tutorial_lunch.jpg&#34; alt=&#34;euc2014_tutorial_lunch&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;p&gt;
        Lunch time at Ericsson
        
            
        
        &lt;/p&gt; 
    &lt;/figcaption&gt;
    
&lt;/figure&gt;

&lt;/p&gt;

&lt;h2 id=&#34;おわりに:9da3f0553ce003d0108bc87f772b3e0d&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;EUCに参加するのは二度目で、前回は&lt;a href=&#34;http://www.erlang-factory.com/conference/ErlangUserConference2012&#34;&gt;2012年のEUC&lt;/a&gt;に参加していた。&lt;/p&gt;

&lt;p&gt;以前は日に何度かあるコーヒブレイクの45分が非常に長く感じられたのだが、今回は会場で知り合った方と話せたこともあってか、あっという間に感じられた。&lt;br /&gt;
英語への敷居が前よりも下がったのかもしれない。&lt;a href=&#34;http://d.hatena.ne.jp/hyoshiok/20130602&#34;&gt;コーヒーを取るタイミング&lt;/a&gt;で、目が合ったら&amp;rdquo;hi&amp;rdquo;と言ってみたりもした。&lt;br /&gt;
わずかだがJoe Armstrongさんとも話せて嬉しい限りだ。&lt;/p&gt;

&lt;p&gt;また、あまり前回は意識していなかったが、発表者はみんな英語が母国語とは限らない。&lt;br /&gt;
よく聞いていると、言いたいことが出てこなかったり、発音を気にして言い直したりしている。&lt;br /&gt;
ヨーロッパの各地から来ている人がいるので、イントネーションも様々だった。&lt;br /&gt;
英語での発表には、多少の不自由を感じながらもみんなやっているのかもしれない。&lt;/p&gt;

&lt;p&gt;最後に、今回の発表・参加にあたってレビューや調整をしてくれた皆様に感謝します。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>