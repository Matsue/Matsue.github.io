<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Matsue Blog]]></title>
  <link href="http://matsue.github.io/atom.xml" rel="self"/>
  <link href="http://matsue.github.io/"/>
  <updated>2015-02-07T00:51:13+09:00</updated>
  <id>http://matsue.github.io/</id>
  <author>
    <name><![CDATA[Hiroki Matsue]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Useful Apps in Paris]]></title>
    <link href="http://matsue.github.io/blog/2015/02/06/useful-apps-in-paris/"/>
    <updated>2015-02-06T15:01:38+09:00</updated>
    <id>http://matsue.github.io/blog/2015/02/06/useful-apps-in-paris</id>
    <content type="html"><![CDATA[<p>パリに滞在していた際に、便利だったり面白いと感じたアプリやサービスの紹介。</p>

<ul>
<li>パリ生活に役立つアプリ

<ul>
<li><a href="#citymapper">Citymapper - 街中の移動に役立つアプリ</a></li>
<li><a href="#flashInvaders">FlashInvaders - 街を歩くのが楽しくなるアプリ</a></li>
<li><a href="#le-fooding">Le Fooding - パリのレストラン探し</a></li>
<li><a href="#vivino">Vivino - ワインの記録のお供に</a></li>
<li><a href="#allocine">AlloCiné - 映画を観たくなった時に</a></li>
<li><a href="#priceminister">PriceMinister - ネットでお買い物</a></li>
</ul>
</li>
<li>旅行に役立つアプリ

<ul>
<li><a href="#capitaine-train">Capitaine Train - 列車の予約</a></li>
<li><a href="#skyscanner">Skyscanner - 飛行機の予約</a></li>
<li><a href="#booking-com">Booking.com - 宿の予約</a></li>
</ul>
</li>
<li>その他の気になったサービス達

<ul>
<li><a href="#car-sharing">車の貸し借り</a></li>
<li><a href="#study-japanese">日本語の勉強</a></li>
</ul>
</li>
</ul>


<h2>パリ生活に役立つアプリ</h2>

<h3><a name="citymapper"></a>Citymapper - 街中の移動に役立つアプリ</h3>

<p><img src="https://lh6.googleusercontent.com/-F4b4zb-Fn64/VNSUUDgCGeI/AAAAAAAASAI/Op9fHfrh8nw/w389-h692-no/Screenshot_2014-10-09-23-09-16.png"></p>

<ul>
<li>iOS: <a href="https://itunes.apple.com/app/id469463298">https://itunes.apple.com/app/id469463298</a></li>
<li>Android: <a href="https://play.google.com/store/apps/details?id=com.citymapper.app.release">https://play.google.com/store/apps/details?id=com.citymapper.app.release</a></li>
</ul>


<p>これはパリで最も重宝したアプリ！
Google Mapsも十分便利だけれど、Citymapperは自転車やバスも含めて検索してくれるところが良い。</p>

<p>パリではレンタル自転車のVelibが随所に設置されていて簡単に利用できることともあり、
自転車も含めてルート検索したくなるのだけれど、このアプリなら簡単に検索して比較できる。</p>

<p>またVelib乗り場で使用可能な自転車の数や、駐車先の場所や空き状況も表示してくれるのも嬉しい。</p>

<p>Velibのオフィシャルアプリ(<a href="https://itunes.apple.com/jp/app/velib/id577807727">iOS</a> / <a href="https://play.google.com/store/apps/details?id=com.paris.velib">Android</a>)もあるけれど、結局Citymapperがあればほとんど使う機会は無かった。</p>

<p>車でお出かけの際はWaze(<a href="https://itunes.apple.com/us/app/waze-social-gps-traffic/id323229106">iOS</a> / <a href="https://play.google.com/store/apps/details?id=com.waze">Android</a>)をナビに使ってる人も多い。</p>

<h3><a name="flashInvaders"></a>FlashInvaders - 街を歩くのが楽しくなるアプリ</h3>

<p><img src="https://lh6.googleusercontent.com/-Ld9PZUGVPaE/VNSUegz98YI/AAAAAAAASA0/-HPriFz5Yaw/w389-h692-no/15%2B-%2B1"></p>

<ul>
<li>iOS: <a href="https://itunes.apple.com/jp/app/flashinvaders/id895180919">https://itunes.apple.com/jp/app/flashinvaders/id895180919</a></li>
<li>Android: <a href="https://play.google.com/store/apps/details?id=com.ltu.flashInvader">https://play.google.com/store/apps/details?id=com.ltu.flashInvader</a></li>
</ul>


<p>Citymapperに次いで使用率の高かったアプリ。</p>

<p><a href="http://en.wikipedia.org/wiki/Invader_%28artist%29">インベーダー氏</a>が街中に設置したインベーダーを模したストリートアートを写真に収めると、
ポイントが貰えるというアプリ。</p>

<p>見つけると嬉しいので、やり始めるとついつい街を歩きながらも外壁を見ながら歩いてしまう。
インベーダーは、ビルの最上階や水路の壁など、「どうやって置いたの？」と思われる場所に潜伏していたりする。</p>

<p>特にポイント集めたら何か貰えるわけでもないのだが楽しい。
そして、1人でやるよりも誰かと見つけたインベーダー情報を交換しながらやる方が楽しい。
ときどき、写真を撮っていると他のインベーダー収集家と、「あっちの壁にもいたよ」といったコミュニケーションも生まれたりする。
個人的にはアプリのドット感も好き。</p>

<p>インベーダー氏は世界中で3069匹、計62都市でインベーダーを設置したらしく、
<a href="http://space-invaders.com/world/paris/">パリ</a>には1135匹ものインベーダーがおり、完全に本拠地。
<a href="http://space-invaders.com/world/tokyo/">東京</a>にも138匹いるらしい。</p>

<p><a href="http://instagram.com/invaderwashere/">Instagram</a>や<a href="https://www.youtube.com/watch?v=gBXjpfX576w">Youtube</a>では、潜伏しているインベーダーの写真・映像が見れる。
「え、そこにいたの！」と普段通っている道でも新たな発見があるかもしれない。</p>

<p>ちなみにパリではインベーダー以外にもたくさんのストリートアートを見かけ、
パリの人々にはラクガキというよりはちゃんとアートとして受け入れられているように感じた。</p>

<h3><a name="le-fooding"></a>Le Fooding - パリのレストラン探し</h3>

<p><img src="https://lh6.googleusercontent.com/-JYx9cYSjKvI/VNSXYZmTNsI/AAAAAAAASBI/1ltWwvER--Y/w519-h692-no/IMG_20140730_130613.jpg"></p>

<p>旅行先で人気のスポットを探す際は<a href="http://www.tripadvisor.com/">TripAdvisor</a>が便利だけれど、
パリのレストランで検索するとあまりにも候補が多すぎて使いづらい。</p>

<p>美味しいレストランを見ていると、<a href="http://lefooding.com/fr/restaurants">Le Fooding</a>や<a href="http://www.timeout.fr/paris/restaurant">Time Out</a>に取り上げられていることが多いので、
これらのサイトから情報を探すと良いだろう。</p>

<p>フランス語が分かる方には<a href="http://www.alloresto.fr/">Alloresto</a>も良さそう。</p>

<h3><a name="vivino"></a>Vivino - ワインの記録のお供に</h3>

<ul>
<li>iOS: <a href="https://itunes.apple.com/jp/app/vivino-wine-scanner/id414461255">https://itunes.apple.com/jp/app/vivino-wine-scanner/id414461255</a></li>
<li>Android: <a href="https://play.google.com/store/apps/details?id=vivino.web.app">https://play.google.com/store/apps/details?id=vivino.web.app</a></li>
</ul>


<p>フランスで見つけた美味しいワインの記録にはこのアプリ。
ワインのラベルをこのアプリで撮ると自動で種類や年度を記録してくれて便利。</p>

<p>似たようなアプリだとVinica(<a href="https://itunes.apple.com/jp/app/vinica-vu-inika-wainwo-xie/id601305612">iOS</a> / <a href="https://play.google.com/store/apps/details?id=me.vinica.android">Android</a>)もある。</p>

<h3><a name="allocine"></a>AlloCiné - 映画を観たくなった時に</h3>

<ul>
<li>iOS: <a href="https://itunes.apple.com/jp/app/allocine/id351184863">https://itunes.apple.com/jp/app/allocine/id351184863</a></li>
<li>Android: <a href="https://play.google.com/store/apps/details?id=com.allocine.androidapp">https://play.google.com/store/apps/details?id=com.allocine.androidapp</a></li>
</ul>


<p>観たい映画を上映している映画館を調べたかったり、
近くの映画館で上映している映画を調べたいときに便利なアプリ。</p>

<p>アプリとは関係ないが、パリの映画館ではフランス語吹き替えのVFと、フランス語字幕のVOが上映されている。
VOは元の音声が英語とは限らない。ホビットの冒険を見たときは、音声はエルフ語で字幕はフランス語、という場面もあった。</p>

<h3><a name="priceminister"></a>PriceMinister - ネットでお買い物</h3>

<ul>
<li>iOS: <a href="https://itunes.apple.com/jp/app/priceminister-faites-vos-achats/id579373363">https://itunes.apple.com/jp/app/priceminister-faites-vos-achats/id579373363</a></li>
<li>Android: <a href="https://play.google.com/store/apps/details?id=com.priceminister.buyerapp">https://play.google.com/store/apps/details?id=com.priceminister.buyerapp</a></li>
</ul>


<p>ネットショッピングができるアプリ。
時々、30%ほどポイントでキャッシュバックしてくれるイベントをやっていたので、その際にキーボードやスマホの充電器を買った。</p>

<p>最近、流行っているらしいのがLeboncoin(<a href="https://itunes.apple.com/fr/app/leboncoin/id484115113">iOS</a> / <a href="https://play.google.com/store/apps/details?id=fr.leboncoin">Android</a>)。
決済システムがなく、売りたい人が電話番号等の情報を載せて、買いたい人が取りに行くというシンプルなサービスだが、
家具など梱包して送るのが難しいものを売るのによく利用されているようだ。売る際に手数料なども発生しないのも嬉しい。</p>

<h2>旅行に役立つアプリ</h2>

<h3><a name="capitaine-train"></a>Capitaine Train - 列車の予約</h3>

<ul>
<li>iOS: <a href="https://itunes.apple.com/fr/app/capitaine-train-train-tickets/id599502670">https://itunes.apple.com/fr/app/capitaine-train-train-tickets/id599502670</a></li>
<li>Android: <a href="https://play.google.com/store/apps/details?id=com.capitainetrain.android">https://play.google.com/store/apps/details?id=com.capitainetrain.android</a></li>
</ul>


<p>フランスの公共交通機関であるSNCFのオフィシャルアプリもあるが、</p>

<ul>
<li>Captaine Trainの方がSNCFより操作しやすい</li>
<li>Captain Trainでしか表示されないチケットや、Captain Trainの方が安いということがある</li>
</ul>


<p>という理由からオススメ。</p>

<p>出発地や目的地の駅名がわからなくても、
例えばパリからモンサンミッシェルに行きたい場合は&#8221;Paris -> Mont Saint Michel&#8221;という風に行きたい地名を入れれば目的の列車を見つけられる。</p>

<h3><a name="skyscanner"></a>Skyscanner - 飛行機の予約</h3>

<ul>
<li>iOS: <a href="https://itunes.apple.com/jp/app/sukaisukyanaha-ge-hang-kong/id415458524">https://itunes.apple.com/jp/app/sukaisukyanaha-ge-hang-kong/id415458524</a></li>
<li>Android: <a href="https://play.google.com/store/apps/details?id=net.skyscanner.android.main">https://play.google.com/store/apps/details?id=net.skyscanner.android.main</a></li>
</ul>


<p>少し遠出する際に安いフライトを見つけたいときに使えるアプリ。</p>

<p>各航空会社が提供している期間限定の値下げキャンペーン等と比較すると最安のチケットとはいかないかもしれないが、
比較的安いチケットを見つけることができる。</p>

<p>実際は<a href="http://www.skyscanner.com">Web版</a>を使うことが多いのだが、検索もしやすく重宝する。</p>

<h3><a name="booking-com"></a>Booking.com - 宿の予約</h3>

<p>iOS: <a href="https://itunes.apple.com/jp/app/hoteru-yu-yueno.1-bukkingudottokomu/id367003839">https://itunes.apple.com/jp/app/hoteru-yu-yueno.1-bukkingudottokomu/id367003839</a>
Android: <a href="https://play.google.com/store/apps/details?id=com.booking">https://play.google.com/store/apps/details?id=com.booking</a></p>

<p>宿泊する宿を探すのに便利なアプリ。</p>

<p>宿によっては当日のギリギリの時間までキャンセル料が不要であったり、
支払いは現地でカードで払えばよかったということで、前日・当日に宿を探すというような場面でお世話になった。</p>

<p>複数人で長く滞在する、まだ出発まで時間があるという場合は<a href="https://www.airbnb.com/">Airbnb</a>で部屋を借りるのも良い。
私がAirbnbを利用した時はホストの人が優しかったので、
近場のお店を教えてくれたり、一緒にビールを飲んだりした。
そういったコミュニケーションが生まれるのもAirbnbの良いところ。</p>

<h2>その他の気になったサービス達</h2>

<h3><a name="car-sharing"></a>車の貸し借り</h3>

<p><a href="http://www.blablacar.com/">BlaBlaCar</a></p>

<p>BlaBlaCarは誰かの車に相乗りさせてもらうサービス。
レンタルカーを使うよりも安く旅行ができるよ、ということでオススメされた。
他にも似たようなサービスで、相乗りではなく車自体を借りるサービスもある。</p>

<p><a href="http://www.travelercar.com/en/">TravelerCar</a></p>

<p>その一つがTravelerCar。これは、旅行する際に空港に車を駐車する代わりに自分の車を別の人に貸すというサービス。
空港の駐車代は高いので、貸す側は駐車代を浮かせることができ、借りる側は安く車が借りられるというwin-winを生むサービス。</p>

<h3><a name="study-japanese"></a>日本語の勉強</h3>

<p><a href="https://play.google.com/store/apps/details?id=com.Obenkyo">Obenkyo</a></p>

<p>日本語を勉強しているフランスの方々が使っていたアプリ。</p>

<hr />

<p>以上！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unityで3D野球盤を作った]]></title>
    <link href="http://matsue.github.io/blog/2015/02/04/unity-workshop/"/>
    <updated>2015-02-04T22:15:42+09:00</updated>
    <id>http://matsue.github.io/blog/2015/02/04/unity-workshop</id>
    <content type="html"><![CDATA[<p><img src="https://lh6.googleusercontent.com/-jREUCZKPIRA/VNIwE0Q0JBI/AAAAAAAAR_A/bkdtFf09lvE/w1056-h692-no/unity-baseball-game.png"></p>

<p><a href="http://8a1-apc.connpass.com/event/11282/">&ldquo;【ハンズオン】初めてのUnityで作る「3D野球盤」APC勉強会 #14&rdquo;</a>に参加してきた。</p>

<p>当日の資料はこちら: <a href="http://www.slideshare.net/apc_8a1/8a120150204-unity">http://www.slideshare.net/apc_8a1/8a120150204-unity</a></p>

<p>上記の資料に沿ってUnityで3D野球盤を作ってきた。
資料がスクリーンショットを交えながら丁寧に作られていたし、
事前にオブジェクトやスクリプトが用意されていたこともあって、ちゃんと動くところまでいけた。
細かい操作で詰まっても質問してすぐに解決しながら作成できたのも良かった。
今回使用させてもらったオブジェクトやスクリプトが含まれるパッケージは、パスワード付きのリンクだったのでここには貼ってない。</p>

<p>今回のハンズオンでスクリプトの定義方法、コンポーネントの追加の仕方、Assetsの登録方法など基本的な操作が理解できた。</p>

<p>今回は時間短縮のためにパッケージで済ませた、
オブジェクトやゲームスクリプトの作成でトライ&amp;エラーを繰り返していたら、
とても１時間程度では終わらなかったと思う。</p>

<p>ほとんど用意されていたものを使ったとはいえ、動くとやっぱり嬉しい。</p>

<p>Unityで作成したアプリなので、この野球盤アプリはAndroidでも動いた。
ただ、ラップトップではキー操作で動く部分が、Androidでは画面タップにする必要があるのでそこは修正しないといけない。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Paris Tech Talks 8th に参加した]]></title>
    <link href="http://matsue.github.io/blog/2014/09/23/paris-tech-talks-8th/"/>
    <updated>2014-09-23T06:36:15+09:00</updated>
    <id>http://matsue.github.io/blog/2014/09/23/paris-tech-talks-8th</id>
    <content type="html"><![CDATA[<p><a href="http://www.meetup.com/Paris-Tech-Talks/events/206595892/">Paris Tech Talks #8</a> に参加してきた。
Paris Tech Talksは新しい技術や事業の紹介をする場。
<a href="http://matsue.github.io/blog/2014/08/06/paris-dot-rb/">Paris.rb</a> に続きパリでは2回目の勉強会参加になる。
珍しく英語開催のイベントということもあって参加してみた。</p>

<p><img src="https://lh3.googleusercontent.com/-a9Jgv7TzM-A/VCCTzKMc0mI/AAAAAAAAFGk/wa4WihFt4fg/w924-h693-no/IMG_20140922_194645.jpg"></p>

<h2>セッション</h2>

<h3>Detctive.io</h3>

<p><a href="https://www.detective.io/tour/">Detctive.io</a>というデータジャーナリズムを扱うサービスの紹介。<br/>
サービスの裏側ではNeo4jとDjangoを使用していて、<a href="https://github.com/scholrly/neo4django">neo4django</a>を使っているらしい。
ただ、neo4djangoはまだ使える機能が限られており困っているとのこと。</p>

<h3>webプラットフォーム開発コミュニティ</h3>

<p>共通環境でのブラウザテストや標準化をするコミュニティの話。<br/>
十分なテストや、ライセンスにCCを用いたり、開発練習の場としてスナップショットを用意したり、トピックブランチを活用してもらうというような取り組みで人を増やそうとしているとのこと。</p>

<p>関連リンク:</p>

<ul>
<li><a href="http://extensiblewebmanifesto.org/">http://extensiblewebmanifesto.org/</a></li>
<li><a href="http://www.webplatform.com/">http://www.webplatform.com/</a></li>
</ul>


<h3>Platform.sh</h3>

<p>Ori pekelmanさんによる<a href="https://platform.sh/">Platform.sh</a>の紹介。<br/>
Gitにpushするだけでデプロイとかできる、という趣旨のサービス。
懇親会で話を聞く限り、発表者の方は開発ミートアップイベントの常連さんらしい。</p>

<h3>ドットカンファレンスの紹介</h3>

<p>パリで開催される<a href="http://www.dotgo.eu/">dotGO</a>、<a href="http://www.dotcss.eu/">dotCSS</a>、<a href="http://www.dotjs.eu/">dotJS</a>の紹介。<br/>
割引コード紹介や、<a href="http://www.dotjs.eu/prize">dotJS prize</a>の紹介があった。
dotJSプライズはOSSならノミネートできるとのこと。</p>

<p>その他にも以下のイベントが近くパリで開催される。</p>

<ul>
<li>Rails Girls</li>
<li><a href="http://scala.io/">Scala.io</a></li>
<li><a href="http://www.dotswift.io/">dotSwift</a></li>
</ul>


<h3>Pulsar</h3>

<p>Pulsarという開発中のビデオストリーミングソフトの紹介。<br/>
Kodi(XBMC)の上で動くtorrentの検索、ストリームエンジン。
Raspberry Piでも動くらしく、Chromecastのような機器も開発中とのこと。</p>

<p>関連リンク:</p>

<ul>
<li><a href="https://github.com/steeve/script.pulsar.dummy">https://github.com/steeve/script.pulsar.dummy</a></li>
<li><a href="http://forum.xbmc.org/showthread.php?tid=200957">http://forum.xbmc.org/showthread.php?tid=200957</a></li>
</ul>


<h2>イベント運営</h2>

<p>会場は<a href="http://www.deezer.com/">Deezer</a>のオフィスだった。
Deezerは音楽ストリーミングサイトで、日本とアメリカでは展開していない模様。</p>

<p><img src="https://lh3.googleusercontent.com/dngAX2MxhhqSbqgqTjp4lPiMJfdnRhn14T7Gi26M8Fc=s207-p-no">
<img src="https://lh3.googleusercontent.com/cJUh3ZZi_yP1Vw7GPR37k5FrXxsbifHl_0mDpZsCfTQ=s207-p-no">
<img src="https://lh6.googleusercontent.com/a3JdQ8u_kuXnhxQdcSU-DA_9loRsaNZIeTrfXZwOZ0A=s207-p-no"></p>

<p>会場にはキッチン、ソファ、テーブルサッカー等があり、カジュアルな雰囲気。
オフィスの雰囲気がなさすぎて何度か前を通り過ぎてしまった。</p>

<p>登録221名に対して、実際の参加者は100名程度だったように見えた。</p>

<p>ピザもビールも十分あったのでお腹いっぱいになった。
ピザとビールはスポンサーによって提供。ありがとうございます。<br/>
いろいろなビールが用意されており、私は<a href="http://ja.wikipedia.org/wiki/%E3%83%87%E3%83%AA%E3%83%AA%E3%82%A6%E3%83%A0%E3%83%BB%E3%83%88%E3%83%AC%E3%83%A1%E3%83%B3%E3%82%B9">Delirium Beer</a>というのをいただいた。ありがとうございます。</p>

<p><img src="https://lh6.googleusercontent.com/-rcr_ovLpHnQ/VCRsYtJDfmI/AAAAAAAAFPU/V0l_-qMjccc/w520-h693-no/IMG_20140922_222017.jpg"></p>

<p>スライドの位置は少し低めだったので、後ろの席の方々はときどき立ち上がって資料を確認していた。</p>

<p><img src="https://lh4.googleusercontent.com/-RYTu2eKjjlo/VCRsYmYDyDI/AAAAAAAAFPU/rzevcRScXfI/w924-h693-no/IMG_20140922_200426.jpg"></p>

<h2>懇親会</h2>

<p><img src="https://lh5.googleusercontent.com/-yRyxQymMeBw/VCRsYsowoAI/AAAAAAAAFPU/sfBL2mvHcwo/w924-h693-no/IMG_20140922_211742.jpg"></p>

<p>知ってる人がいないので、ピザをいただきつつ<a href="http://d.hatena.ne.jp/hyoshiok/20130602">よしおかさんメソッド</a>で何名かの方に話を聞いた。</p>

<p>話の中ではDevOpsという単語と共に、Puppet、Chef、Ansibleや<a href="https://github.com/saltstack/salt">Salt</a>の名前があがっていた。あとはDocker。</p>

<p>また<a href="https://www.mailjet.com/">Mailjet</a>というサービスで働いている方にどの言語でサービスを実装してるか聞いた所、<a href="http://blog.mailjet.com/post/93317385400/developer-evangelists-faq">Free Pascalという回答</a>がきて驚いた。
メールを処理する時にバッファオーバフローが起こらないから安全なので使っている、というようなお話だった。</p>

<p>ストレージに興味があるなら、<a href="http://www.meetup.com/Paris-Datageeks/">Paris DataGeeks</a>というミートアップがオススメとのこと。</p>

<hr />

<p>英語のミートアップではあったが、フランス語が喋れると活動の幅が広がるだろうなあ、改めて感じた。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tour De France 2014を見てきた]]></title>
    <link href="http://matsue.github.io/blog/2014/08/22/tour-de-france-2014/"/>
    <updated>2014-08-22T05:18:06+09:00</updated>
    <id>http://matsue.github.io/blog/2014/08/22/tour-de-france-2014</id>
    <content type="html"><![CDATA[<script type="text/javascript" src="https://apis.google.com/js/plusone.js"></script>


<p>ツール・ド・フランス2014を見てきた。参加してから時間が経ってしまったが、情報が少なくて困ったので次に行く時のためにも記録に残しておく。</p>

<p><img src="https://lh5.googleusercontent.com/-ZcLe3k1MgD0/U_ZgOG6vTxI/AAAAAAAADK4/5JIari_rhcM/w955-h716-no/IMG_20140727_133707.jpg"></p>

<!-- more -->


<h2>会場の様子</h2>

<p>2014年は女性のレースと男性のレースが同日に開催されていた。</p>

<p>男性レース開始時の動画はこちら。空にフランスの国旗色の雲が描かれたあとに選手達がシャンゼリゼ通りに入ってきた。</p>

<div class="g-post" data-href="https://plus.google.com/101994396638119080532/posts/X6N16KfgzJ4"></div>


<p>ウェアやお土産が売られている様子。</p>

<p><img src="https://lh4.googleusercontent.com/-WWgGwtJzrNE/U_Zpk6Pa67I/AAAAAAAADOU/6b9G59sh9so/w426-h320/IMG_20140727_131511.jpg"></p>

<p>NetAppがスポンサーになっているレーサーの置物も売っていた。</p>

<p><img src="https://lh4.googleusercontent.com/-gPrY3qx7EiY/U_ZpT8DyAnI/AAAAAAAADNw/D-UeaXveLIM/w426-h568/IMG_20140727_165752.jpg"></p>

<p>レース前は様々な装飾をした宣伝カーが凱旋門の周りを走る。</p>

<p><img src="https://lh5.googleusercontent.com/-iLmXUtb1OrA/U_ZpIIzyrLI/AAAAAAAADMo/m4-2lFuRFU0/w426-h568/IMG_20140727_161011.jpg"></p>

<p>凱旋門付近のスピーカーからは基本的には実況が流れているが、男子レース開始までの待ち時間には以下のような曲も流れていた。</p>

<ul>
<li>Paris - David Guetta</li>
<li>Roadgame - Kavinsky</li>
<li>Wake Me Up - Avicii</li>
<li>Baby I&rsquo;m Yours - Breakbot Feat. Irfane</li>
<li>Love Is Gone ［fred Rister &amp; Joachim Garraud Remix］ - David Guetta</li>
<li>Canned Heat - Jamiroquai</li>
</ul>


<h2>時間について</h2>

<p>16時頃から割と混んできていたので、場所取りをするなら早めに。</p>

<ul>
<li>女子レース開始: 12:40頃</li>
<li>女子レース終了: 15:00頃</li>
<li>男子レース開始: 18:00頃にシャンゼリゼに到着</li>
<li>男子レース終了: 19:15頃</li>
</ul>


<h2>シャンゼリゼ付近の地図情報</h2>

<p>レースは基本的にシャンゼリゼ通り付近がメインだが、スタート地点や駅の位置、封鎖されているエリアを載せたマップを作った。<br/>
今回はセーヌ川沿いを歩いて会場に向かったが、封鎖エリアがあったりするので、メトロを使ってFranklin D. RooseveltまたはGeorge Vから行くのが楽だったと思う。</p>

<iframe src="https://mapsengine.google.com/map/u/0/embed?mid=zP_xMsmJueyc.khXDW790OfM4" width="640" height="480"></iframe>


<h2>気をつけること</h2>

<h3>南北間の移動が難しい</h3>

<p>レース当日、シャンゼリゼ通り付近の道路は大量の警察官によって封鎖されている。
特にレースの中心となるシャンゼリゼ通りの南北間を移動出来る場所は限られていて、メトロの駅(Franklin D. RooseveltまたはGeorge V)を通過するか、凱旋門をぐるっと回るしかない。</p>

<p>人員を総動員していると思われるが、他の場所の治安は大丈夫なのだろうか。</p>

<p><img src="https://lh4.googleusercontent.com/-f1bWdTvHUWY/U_ZpNkFjEzI/AAAAAAAADNA/6j88f6w_eC0/w426-h320/IMG_20140727_153611.jpg"></p>

<h3>運行してないメトロの駅があるかも</h3>

<p>今年はChâteletの駅が工事中で電車が停止しなかった。
凱旋門付近は1番線が通っているのだが、Châteletの駅は1番線に他の4本の線から乗り換えできる大きい駅だ。
ここが使えなかったため、割と歩くことになってしまった。</p>

<p>駅の工事は夏のバカンスの時期に合わせてやることが多いと聞いたので、7月開催のツール・ド・フランスの場合、他の年度でも注意した方がいいかもしれない。</p>

<h3>トイレが混んでいる</h3>

<p>パリには所々に公衆トイレが設置されているが、イベント当日はかなり並んでいたので注意。
<img src="https://lh4.googleusercontent.com/-TwHRUVJjVJE/U_ZjpAbx1EI/AAAAAAAADLg/Q_LsyXYKXUc/w426-h320/IMG_20140727_171736.jpg"></p>

<h2>参考にした情報</h2>

<p>こちらのパリナビの2011年の記事が参考になった。
<a href="http://paris.navi.com/special/5036009">http://paris.navi.com/special/5036009</a></p>

<p>ネット上ではツール・ド・フランスとはなにか？という情報は見つかるが、時間や開催エリアの情報は日本語だとほとんど見つからなかった。
日本語でパリの情報を探すと、大抵パリナビの情報に辿り着く。お世話になってます。</p>

<hr />

<p>もし参加するときはピクニック気分で椅子やご飯を持って、ゆったりとした気持ちで気長に参加するのが良いと思う。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Paris.rbに参加した]]></title>
    <link href="http://matsue.github.io/blog/2014/08/06/paris-dot-rb/"/>
    <updated>2014-08-06T07:21:32+09:00</updated>
    <id>http://matsue.github.io/blog/2014/08/06/paris-dot-rb</id>
    <content type="html"><![CDATA[<p>7月より期間限定でパリにて勤務しており、せっかくの機会なのでParis.rbに参加してみた。
今回、Meetup経由で申し込みをして参加した。
<a href="http://www.meetup.com/parisrb/events/146763542/">http://www.meetup.com/parisrb/events/146763542/</a></p>

<p><img src="https://lh3.googleusercontent.com/-XVtwd3k_TpI/U-FKfo99LFI/AAAAAAAACK8/1mtcslNTBTU/w955-h716-no/IMG_20140805_211811.jpg"></p>

<!-- more -->


<p>19時半開始と書かれていたが最初の時間はピザ&amp;ビールの時間だった。話してくれる方を見つけてSwiftのOptional型の話などしているうちに21時からセッションタイムへ。<br/>
ちなみにパリは今22時頃まで外が明るい。</p>

<p><img src="https://lh5.googleusercontent.com/-q7MQs9RJEbs/U-FKVwF0SUI/AAAAAAAACKk/n69VDfjy_nI/w955-h716-no/IMG_20140805_202552.jpg"></p>

<p>セッションは23時ごろまで開催していたと思われる。発表としては</p>

<ul>
<li><a href="https://aircall.io/">AirCall</a>の話(採用？)</li>
<li>アジャイルの話</li>
<li>RioでのRubyの話</li>
</ul>


<p>などなどがあった。当然ながらほとんどがフランス語の資料であったり、字の少ない資料でのプレゼンだったので現状のフランス語力では理解が難しかった。残念。</p>

<p>かろうじて資料が英語だったRails Tipsの内容のメモは以下。</p>

<ul>
<li>skip_before_actionはなるべく避ける</li>
<li>Respondersを使う</li>
<li>less redirect_to more respond_with</li>
<li>less instance variables</li>
<li><a href="https://github.com/voxdolo/decent_exposure">decent_exposure</a> gem</li>
<li>before_actionはリダイレクトや認証処理だけに使うようにしている</li>
<li><a href="https://github.com/mattt/sinatra-param">sinatra-param</a> gemでvalidation</li>
<li>rails-param gemの紹介</li>
</ul>


<p>感想としては、どのセッションも詳細は分からなかったが、扱っているテーマと日本と大きく異なっていないような印象をうけた。<br/>
それと話が始まってからはラップトップや携帯を触る人は少なく、熱心に話を聞いている人が多いのが印象的だった。<br/>
あと、先に懇親会があって、セッションが21時スタートというのは日本ではあまりない気がする。</p>

<hr />

<h2>追記</h2>

<p>運営周りについて簡単に追記。</p>

<p>置かれていたピザとビールはスポンサーがついていたようで、参加者はお金を払っていない。ただ、開始から1時間たたないうちにほぼ無くなっていたので食べ損ねてしまった。</p>

<p>参加者は80名程度程で登録は120名ほどあったかと思う。思った以上に人が多かったため、はじめはキャンセル待ちだったが最終的には参加することができた。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Erlang User Conference 2014 に参加した]]></title>
    <link href="http://matsue.github.io/blog/2014/06/12/euc2014/"/>
    <updated>2014-06-12T14:09:40+09:00</updated>
    <id>http://matsue.github.io/blog/2014/06/12/euc2014</id>
    <content type="html"><![CDATA[<p>ストックホルムで開催された<a href="http://www.erlang-factory.com/euc2014">Erlang User Conference 2014</a>に参加した。</p>

<p><img src="http://matsue.github.io/images/2014-06-12-euc2014/euc2014_sponsors.jpg" title="euc2014_sponsors" alt="The flag of sponsors ato Erlang User Conference 2014"></p>

<p>大変有難いことに<a href="http://www.erlang-factory.com/euc2014/yosuke-hara">LeoFSのセッション</a>の一部で、7分ほど登壇させていただいた。</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/35673208" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px 1px 0; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe>


<p> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/rakutentech/scaling-and-high-performance-storage-system-leofs" title="Scaling and High Performance Storage System: LeoFS" target="_blank">Scaling and High Performance Storage System: LeoFS</a> </strong> from <strong><a href="http://www.slideshare.net/rakutentech" target="_blank">Rakuten, Inc</a></strong> </div></p>

<!-- more -->


<p>私が話したのは主にLeoFSのユースケースで、</p>

<ul>
<li>現時点で600TB程度のディスク総量でクラスタを組んでいる

<ul>
<li>データセンター間のレプリケーション機能を使っていきたい</li>
</ul>
</li>
<li>社内のファイル共有にownCloudをLeoFSと組み合わせて使っている

<ul>
<li>各国のグループ会社との動画の共有などに使われている</li>
</ul>
</li>
</ul>


<p>というようなことを紹介した。<br/>
私たちのセッションには30名ほどの方が聞きにきてくれていたかと思う。</p>

<h2>Day1</h2>

<p>初日は以下のセッションに参加した。</p>

<ol>
<li>Welcome to the Erlang User Conference!</li>
<li>Keynote: Composing a Functional Community (Katie Miller)</li>
<li>Scaling and High Performance Storage System: LeoFS (Yosuke Hara) => 発表</li>
<li>The Last REST Client You Will Ever Need (Loïc Hoguin)</li>
<li>Concuerror: Into Real Code (Stavros Aronis)</li>
<li>Building a Distributed Data Ingestion System with RabbitMQ (Alvaro Videla)</li>
<li>Building a Cloud with Erlang and SmartOS - How Hard Could it Possibly Be? (Heinz Gies)</li>
<li>Locks - Erlang-style Scalable Distributed Locking (Ulf Wiger)</li>
</ol>


<h3>Composing a Functional Community</h3>

<p>初日のキーノートは<a href="http://www.lambdaladies.com/">Lambda Ladies</a>という関数型言語の女性コミュニティから、Katieさんによる発表。</p>

<p>FP(Functional Programming)コミュニティの発展には以下が必要というお話でした。</p>

<ul>
<li>Education ビギナー向けの教育</li>
<li>Safe space ハラスメント対策とか</li>
<li>Mentoring 励ます メンティーはメンターになっていく</li>
</ul>


<p>今のテックスペースやコミュニティはデフォルトで男性向けである話や、実際に女性達が感じていることが紹介されていて、ほとんど男性で埋まっていた会場に対してパンチの効いた発表。<br/>
<a href="http://www.codemiller.com/blog/2013/07/06/functional-frock-a-dress-fit-for-a-lambda-lady/">Haskellによる6つのソートアルゴリズムがプリントされたギークドレス</a>も印象的でした。</p>

<ul>
<li>発表者プロフィール: <a href="http://www.erlang-factory.com/euc2014/katie-miller">http://www.erlang-factory.com/euc2014/katie-miller</a></li>
<li>スライド: <a href="http://community.codemiller.com/#/">http://community.codemiller.com/#/</a></li>
</ul>


<h3>The Last REST Client You Will Ever Need</h3>

<p>webサーバの<a href="https://github.com/extend/cowboy">cowboy</a>の開発者であるLoicさんによる発表。</p>

<p>REST APIに使うMedia TypeにJSON、Msgpack、HTML、XMLに代わってBEDというのを考えてるよ、という話。<br/>
Media Typeは独自の定義が使えるので、以下のようなタイプを提唱していた。</p>

<ul>
<li>application/x-bed</li>
<li>application/x-bed-stream</li>
</ul>


<p>バイト数は短く、圧縮もなしで、relationも定義できて・・というようなものを目指しているよう。<br/>
現時点では構想の段階でレポジトリはないが、プロジェクトは作成されている。
<a href="https://github.com/bed-project">https://github.com/bed-project</a></p>

<p>ヘルプ絶賛募集中とのことなので、BEDが気になった方はLoicさんにコンタクトをとるといいと思う。</p>

<ul>
<li>発表者プロフィール: <a href="http://www.erlang-factory.com/euc2014/loc-hoguin">http://www.erlang-factory.com/euc2014/loc-hoguin</a></li>
<li>スライド: <a href="http://ninenines.eu/talks/bed/bed.html">http://ninenines.eu/talks/bed/bed.html</a></li>
</ul>


<h3>Building a Distributed Data Ingestion System with RabbitMQ</h3>

<p>&ldquo;RabbitMQ in Action&#8221;の著者のAlvaroさんによるRabbitMQのデザインパターン紹介。</p>

<p>複数のDC間でのログ集めにRabbitMQを使ってるらしい。<br/>
スケールしていくには<a href="http://www.rabbitmq.com/federation.html">Federation Plugin</a>を使うといいよという内容。<br/>
性能が必要だが、メッセージのロスが許されるような場合はno-ackモードという選択肢もあるとのこと。</p>

<p>以下のデモページでメッセージが分配される様子を紹介しながらの発表だった。</p>

<ul>
<li>デモ実行ページ: <a href="http://tryrabbitmq.com/">http://tryrabbitmq.com/</a></li>
<li>デモのソース: <a href="https://github.com/RabbitMQSimulator/RabbitMQSimulator">https://github.com/RabbitMQSimulator/RabbitMQSimulator</a></li>
</ul>


<p>各workerにメッセージが分散される様子を見れるデモページは、ついついポチポチ押したくなってしまう。<br/>
正規表現を使ってのメッセージの内容に応じたルーティングもできる模様。</p>

<p>Fedarationを使った分散の例は以下のリンクでもJavaのコードを交えて紹介されているようだ。
<a href="http://jaxenter.com/distributed-log-aggregation-with-rabbitmq-federation-49154.html">http://jaxenter.com/distributed-log-aggregation-with-rabbitmq-federation-49154.html</a></p>

<ul>
<li>発表者プロフィール: <a href="http://www.erlang-factory.com/euc2014/alvaro-videla">http://www.erlang-factory.com/euc2014/alvaro-videla</a></li>
<li>スライド: <a href="http://www.erlang-factory.com/static/upload/media/1402395255933144rabbitmq_data_ingestion_euc.pdf">http://www.erlang-factory.com/static/upload/media/1402395255933144rabbitmq_data_ingestion_euc.pdf</a></li>
</ul>


<h2>Day2</h2>

<p>二日目に参加したセッションはこちら。</p>

<ol>
<li>Welcome to the 2nd Day of the EUC!</li>
<li>Keynote: Erlang, Open Networking, and the Future of Computing (Stuart Bailey)</li>
<li>Powering your Web and Mobile Applications (Jordan Wilberding)</li>
<li>Monitoring Erlang Systems with WombatOAM (Richard Jonas)</li>
<li>Scaling Erlang on 10K or More Cores: An Overview of the RELEASE Project (Simon Thompson)</li>
<li>Real-Time Performance at Massive Scale (Francois Orsini)</li>
<li>Where Shall I Parallelize? (Tamás Kozsik)</li>
<li>Elixir Tooling: Exploring Beyond the Language (Eric Meadows-Jönsson)</li>
<li>Latest News from the OTP Team - Kenneth Lundin</li>
<li>Announcement of the Erlang User of the Year &amp; the Most Influential Talk of 1999</li>
</ol>


<h3>Elixir Tooling: Exploring Beyond the Language</h3>

<p>ElixirコミッターのEricさんによる発表。</p>

<p>はじめにElixirの今年のニュースとして以下の３つを挙げていた。</p>

<ul>
<li>version1.0がリリース予定</li>
<li><a href="http://elixirconf.com/">ElixirConf</a>が開催予定</li>
<li>パッケージマネージャの<a href="https://hex.pm/">Hex</a>がリリースされた</li>
</ul>


<h4>Mix</h4>

<p>Mixというのはプロジェクト作成、コンパイル、テスト、などなどをサポートしてくれるツール。
ErlangのrebarやRubyでのrakeやbundleに似たことをしてくれる模様。</p>

<p>以下のツールを入れると、Mixのコマンドが拡張されるようだ。</p>

<ul>
<li>ecto <a href="https://github.com/elixir-lang/ecto">https://github.com/elixir-lang/ecto</a></li>
<li>exrm <a href="https://github.com/bitwalker/exrm">https://github.com/bitwalker/exrm</a></li>
</ul>


<p>ectoはDBのラッパーや管理を提供し、exrmはリリースをサポートしてくれる模様。</p>

<h4>Hex</h4>

<p>Elixirのパッケージマネージャで最近リリースされたばかりのようだ。<br/>
パッケージはS3でホスティングされてるとのこと。</p>

<h4>IEx</h4>

<p>Erlangでいうところのerl, Rubyでいうところのirbにあたる、Elixirの実行ターミナル。</p>

<p>IEx.pryを書いておくと実行中のコードの途中でiexに入ってデバッグできるらしい。pryにインスパイアされたものだそうだ。</p>

<p>iexシェルの中では<code>h Enum.map/2</code>とかするとヘルプも見えるとのこと。</p>

<h4>ExUnit</h4>

<p>tagsやfilter機能を使うと環境毎にテストを分けたり、特定ケースだけ実行することができるようだ。</p>

<p>またElixirではdoctestも提供されているとのこと。この形式で書かれたコメントは、後でドキュメントとして生成されるだけでなく、書かれているコードはテストとしての実行もしてくれる。</p>

<h4>Standard library</h4>

<ul>
<li><a href="http://elixir-lang.org/docs/stable/elixir/Stream.html">Stream</a>

<ul>
<li>再帰的にファイルの各行に処理するコードが、eachにブロック渡すだけのコードにできる。</li>
<li>遅延評価されるので必要になったときだけ実際にファイルをオープンしてる。</li>
</ul>
</li>
<li><a href="http://elixir-lang.org/docs/stable/elixir/Agent.html">Agent</a>

<ul>
<li>OTPを抽象化してくれるライブラリ</li>
</ul>
</li>
<li><p><a href="http://elixir-lang.org/docs/stable/elixir/Task.html">Task</a></p>

<ul>
<li>非同期に処理をするために使うライブラリ</li>
<li>Task.asyncでタスクを作って、Task.awaitで待つ、というような使い方。</li>
</ul>
</li>
<li><p>発表者プロフィール: <a href="http://www.erlang-factory.com/euc2014/eric-meadowsjnsson">http://www.erlang-factory.com/euc2014/eric-meadowsjnsson</a></p></li>
<li>スライド: <a href="http://www.erlang-factory.com/static/upload/media/1402598794815412elixirtooling.pdf">http://www.erlang-factory.com/static/upload/media/1402598794815412elixirtooling.pdf</a></li>
</ul>


<h3>Latest News from the OTP Team</h3>

<p>OTPチームからの17系以降の変更点の紹介。</p>

<ul>
<li>新しいデータ型のMaps</li>
<li>binary周りで発生していた、スレッドにおけるブロックが減る</li>
<li>ライセンスがEPL(Erlang Public License)からApache License Version 2.0に代わる</li>
</ul>


<p>ライセンスに関しては以前、Mozilla Public Licenseへの移行も検討されていたようだ。
ライセンス変更にあたり、コミッターの方々にはメールで同意を求めるので&#8221;Yes&#8221;という準備しておいてね！というようなことを言っていた。</p>

<h2>Day3</h2>

<p>最終日は以下のチュートリアルに参加した。</p>

<ol>
<li>Introduction to Load Testing with Tsung (Radosław Szymczyszyn)</li>
<li>Erlang in Production - Tricks and Tools for Running Erlang Production Systems (Jesper Louis Andersen)</li>
<li>Load Testing Made Easy (Diana Corbacho)</li>
<li>Deploying and Monitoring Erlang Nodes in the Cloud (Csaba Hoch)</li>
</ol>


<p><img src="http://matsue.github.io/images/2014-06-12-euc2014/euc2014_ericsson.jpg" title="euc2014_ericsson" alt="Ericsson Group headquarters"></p>

<p>WombatOAMやMegaloadといったErlang監視ツール、ロードテストサポートツールにも実際に触れることができたがこちらはOSSではないようだ。</p>

<h3>Introduction to Load Testing with Tsung</h3>

<p>ロードテストツールであるTsungの紹介。こちら、Erlang製のJMeterのようなもの。</p>

<p>チュートリアルは以下の資料に従い、Vagrantで構築された複数VMを使って行われた。Tsungの資料はあまりないと思われるので貴重だ。</p>

<ul>
<li><a href="https://github.com/lavrin/euc-2014">https://github.com/lavrin/euc-2014</a></li>
<li><a href="https://github.com/lavrin/tsung-scenarios">https://github.com/lavrin/tsung-scenarios</a></li>
</ul>


<p>Tsungに関するメモ。</p>

<ul>
<li>指定されたユーザ数でランダムなアクセスをシミュレーションできる

<ul>
<li>XMPP、TCP、HTTPなどのロードテストができる</li>
<li>ログインパスワード指定できる</li>
<li>ユーザによってはログインしかしないとかシミュレーションできる</li>
<li>パスにIDとかいれてリクエスト生成してくれる</li>
</ul>
</li>
<li>今回のサンプルでdurationが14400 minutesなのは十分に大きくするため</li>
<li>ディレクトリ構成やログインユーザ、elrangのcookieなど環境揃っている必要があるが、複数のノードからtsungの実行もできるらしい</li>
<li>テストの結果はtsplotとかでグラフにできるらしい</li>
<li>テスト時に、<code>ulimit -n</code>の上限に引っかかる可能性あるので注意しておく</li>
<li>クラスタでやるときはtsung-controllerというのもあるらしいが、使用には注意らしい(SPOF?)</li>
<li>dumptrafficというオプションをオンにすると、大量のログがでるので注意</li>
<li><p>JMeterと違ってErlangなので、テスト時にはerlangのメソッドを直接呼ぶようなテストもできるらしい</p></li>
<li><p>発表者プロフィール: <a href="http://www.erlang-factory.com/euc2014/radosaw-szymczyszyn">http://www.erlang-factory.com/euc2014/radosaw-szymczyszyn</a></p></li>
</ul>


<h3>Erlang in Production</h3>

<p>運用者が朝まで寝ていられるシステムをつくるにはどうすればいいかという話。</p>

<p>まず、システムはいつ壊れるのかという話を&#8221;How Complex Systems Fail&#8221;というRichard Cookさんの資料を引用しつつ紹介。
たぶん元の資料は<a href="http://www.ctlab.org/documents/How%20Complex%20Systems%20Fail.pdf">こちら</a>。</p>

<p>紹介されていたライブラリの一部。
- <a href="https://github.com/feuerlabs/exometer">https://github.com/feuerlabs/exometer</a><br/>
- <a href="https://github.com/klarna/circuit_breaker">https://github.com/klarna/circuit_breaker</a>
- <a href="https://github.com/basho/sidejob">https://github.com/basho/sidejob</a>
- <a href="https://github.com/uwiger/jobs">https://github.com/uwiger/jobs</a>
- <a href="https://github.com/massemanet/eper">https://github.com/massemanet/eper</a></p>

<p>上記のライブラリは、Erlangプロセスの情報を収集したり、ジョブスケジューリングをしてくれるもののようだ。</p>

<p>以降は、使ってるライブラリや設定の話。</p>

<h4>sys.configについて</h4>

<p><code>erl -man config</code>でも確認できるがconfigは、他のファイルも読めるので環境ごとのファイルを置いておくようにするといいらしい。</p>

<h4>Lager</h4>

<p><a href="https://github.com/basho/lager">https://github.com/basho/lager</a></p>

<p>logライブラリにはlagerを使って、どこかに集めている。
<a href="https://github.com/boundary/folsom">folsom</a>のデータ飛ばしてるらしい。</p>

<h4>alarm_handler</h4>

<p>SASLの一部。アラートは自分で定義できて、Nagiosサーバにもデータ飛ばすこともできる。
アラームがオフになる時(?)にlagerに流し込むとかもできる。</p>

<p>Nagiosと組み合わせる際は、ファイル書き出されたステータスをNagiosが定期的に確認するようにしていたらしい。</p>

<h4>os_mon</h4>

<p><a href="http://erlang.org/doc/man/os_mon_app.html">http://erlang.org/doc/man/os_mon_app.html</a></p>

<p>cpu usageみたりもできる。mem_supでメモリ使い過ぎ検知もできる。</p>

<h4>fuse</h4>

<p><a href="https://github.com/jlouis/fuse">https://github.com/jlouis/fuse</a></p>

<p>マウントに使うfuseとは別のErlangライブラリ。<br/>
たとえばmysql落ちた時にほかのノードの処理をキックするのに使う。</p>

<h4>Folsom</h4>

<p><a href="https://github.com/boundary/folsom">https://github.com/boundary/folsom</a></p>

<p>メトリクスのライブラリ。</p>

<p>データ転送にはUDP使ってる、リモートが落ちてたり遅いことに影響されないように。<br/>
counters, gauges, spirals, histogramsなどのグラフが用意されている。<br/>
グラフを見るに当たっての注意点としては、平均を見るのは危険。低い方と高い方に値が固まっているかもしれないので。なので、95th、99thパーセンタイルの情報をみるべき。</p>

<h4>なにを集計する？</h4>

<p>取れるものすべてを集計してる。</p>

<ul>
<li>query times</li>
<li>internal heavy weight processing</li>
<li>API endpoints</li>
<li>every cascading subsystem</li>
<li>cache hit/miss, あとDBたたいた時にどうだったのか</li>
</ul>


<h4>Tracing / Recon</h4>

<ul>
<li><a href="http://ferd.github.io/recon/">http://ferd.github.io/recon/</a></li>
<li><a href="https://github.com/ferd/recon">https://github.com/ferd/recon</a></li>
</ul>


<p>reconは各pidが何を実行しているかわかるようにしてくれるらしい。
recon_traceでオンラインtracingもできるらしい。</p>

<h2>会場の写真</h2>

<p>カンファレンス会場に使われた建物。
<img src="http://matsue.github.io/images/2014-06-12-euc2014/euc2014_venue.jpg" title="euc2014_venue" alt="The venue of EUC2014"></p>

<p>カンファレンス会場では何故かファミコンが置かれていて、グラディウスやボンバーマンをプレイされていた。コナミコマンドは使っていないようだ。
<img src="http://matsue.github.io/images/2014-06-12-euc2014/euc2014_game.jpg" title="euc2014_game" alt="Game space at EUC2014"></p>

<p>カンファレンス会場でのランチの様子。
<img src="http://matsue.github.io/images/2014-06-12-euc2014/euc2014_lunch.jpg" title="euc2014_lunch" alt="Lunch time at EUC2014"></p>

<p>チュートリアルで使われたEricssonの一室。
<img src="http://matsue.github.io/images/2014-06-12-euc2014/euc2014_tutorial_room.jpg" title="euc2014_tutorial_room" alt="Tutorial room at Ericsson"></p>

<p>Ericssonでのランチ。スウェーデンではサンドイッチの出る場面が多い。
<img src="http://matsue.github.io/images/2014-06-12-euc2014/euc2014_tutorial_lunch.jpg" title="euc2014_tutorial_lunch" alt="Lunch time at Ericsson"></p>

<h2>おわりに</h2>

<p>EUCに参加するのは二度目で、前回は<a href="http://www.erlang-factory.com/conference/ErlangUserConference2012">2012年のEUC</a>に参加していた。</p>

<p>以前は日に何度かあるコーヒブレイクの45分が非常に長く感じられたのだが、今回は会場で知り合った方と話せたこともあってか、あっという間に感じられた。<br/>
英語への敷居が前よりも下がったのかもしれない。<a href="http://d.hatena.ne.jp/hyoshiok/20130602">コーヒーを取るタイミング</a>で、目が合ったら&#8221;hi&#8221;と言ってみたりもした。<br/>
わずかだがJoe Armstrongさんとも話せて嬉しい限りだ。</p>

<p>また、あまり前回は意識していなかったが、発表者はみんな英語が母国語とは限らない。<br/>
よく聞いていると、言いたいことが出てこなかったり、発音を気にして言い直したりしている。<br/>
ヨーロッパの各地から来ている人がいるので、イントネーションも様々だった。<br/>
英語での発表には、多少の不自由を感じながらもみんなやっているのかもしれない。</p>

<p>最後に、今回の発表・参加にあたってレビューや調整をしてくれた皆様に感謝します。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第21回 AWS User Group - Japan 東京勉強会に参加しました]]></title>
    <link href="http://matsue.github.io/blog/2014/05/21/jaws-ug-tokyo-21th-20140521/"/>
    <updated>2014-05-21T00:12:13+09:00</updated>
    <id>http://matsue.github.io/blog/2014/05/21/jaws-ug-tokyo-21th-20140521</id>
    <content type="html"><![CDATA[<p>AWSのユーザイベントということで、naoyaさんの自動化の話から始まりました。このセッションが一番印象に残りました。<br/>
コード化された運用は形式知化である。そして手順であれコードであれ、「なんでそうしてるのか？」ということも共有されないといけない。なるほど、なるほど。<br/>
紹介されていたQiita teamは使ったことないけれど、Markdownで書けて、気軽に投稿して、検索可能な情報共有の場があると、たしかに良さそうです。</p>

<p>以下、イベント参加時のメモです。</p>

<!-- more -->


<hr />

<h2>イベント関連link</h2>

<ul>
<li>イベントページ: <a href="http://jawsug-tokyo.doorkeeper.jp/events/11269">http://jawsug-tokyo.doorkeeper.jp/events/11269</a></li>
<li>Twitter: <a href="https://twitter.com/search?q=%23jawsug">https://twitter.com/search?q=%23jawsug</a></li>
</ul>


<h2>伊藤 直也さん</h2>

<p>資料: <a href="https://speakerdeck.com/naoya/sukerusurukai-fa-zu-zhi-falsezuo-rifang-number-jawsug">https://speakerdeck.com/naoya/sukerusurukai-fa-zu-zhi-falsezuo-rifang-number-jawsug</a></p>

<h3>手作業はなぜダメなのか</h3>

<p>暗黙知になる = 言語化されてないノウハウ<br/>
ログ何処にあるか、サーバ止めていいかわからない</p>

<p>しっかり手順書？いいえ、infrastracture as a code<br/>
コードにするだけでいい？いいえ</p>

<p>コードにすると&hellip;</p>

<ul>
<li>オブジェクト指向になる。</li>
<li><p>アプリケーション開発の文脈で使える、業務フローが変わる<br/>
フローとはgithubでpull requestとか</p></li>
<li><p>べきとうである</p></li>
<li><p>変更が可視化される</p>

<ul>
<li>たとえばnginxの設定を変えたとか</li>
<li>pull requestないと普段だれも見てない</li>
</ul>
</li>
<li><p>2時間が10分はそれほど重要ではない</p></li>
<li>属人化して不明なことを減らす

<ul>
<li>わからないことには保守的になる。不透明な課金部分とか触れない。</li>
<li>組織のスケールアウトを阻害する</li>
</ul>
</li>
</ul>


<h3>スタートアップの機動力</h3>

<ul>
<li>暗黙知が少ないので自律的に動きやすい(全能感)

<ul>
<li>フィードバックも得やすく自信を得られる</li>
</ul>
</li>
<li>暗黙知の圧力で保守的になりスタートアップがスタートアップでなくなる</li>
</ul>


<p>ref: &ldquo;the tweleve factor app&rdquo;</p>

<p>フロー情報の共有による知識のチーム間の横展開、連鎖<br/>
Qiita teamとか</p>

<h3>まだできてないこと</h3>

<ul>
<li>メンタルモデルのコードへの反映

<ul>
<li>野生動物を見たら危険だと判断するといった判断</li>
</ul>
</li>
<li>「なぜ」が暗黙知化されがち

<ul>
<li>パーミッションかえる => なんで？とか</li>
<li>そこはドキュメント化するしかない。そこでフロー情報の共有。</li>
</ul>
</li>
</ul>


<h3>質問タイム</h3>

<h4>Q. フロー情報の共有にQiita team以外に試したツールは？</h4>

<p>上手く行かなかった物があるが名前は出せない。wikiのようなもの使っていた。<br/>
wikiだと更新しなかったことも、Qiita teamのようなものだと気軽に投稿できてよい。</p>

<hr />

<h2>Wantedly株式会社 川崎 禎紀さん</h2>

<p>サービス開始からの2年間Heroku</p>

<p>サーバの使い分け
- staging: 本番と同じデータ、デプロイ前のテスト<br/>
- QA: topicブランチのテスト、ユーザなどに見てもらう</p>

<p>travis, circleではなくwercker使ってる</p>

<p>新しい機能試すこと目的ではなく、ユーザに価値を届けるのが大事にするべし</p>

<hr />

<h2>Sansan株式会社 宍倉 功一さん</h2>

<p>Eightの話</p>

<h3>KPI</h3>

<p>PDCAの効果測定、検証での指標</p>

<p>評価、状態の共有方法
- メール
- Dashboard => ducsdataを40インチディスプレイに映してる
- その他 fluentd + slash7</p>

<hr />

<h2>株式会社スマートエデュケーション 谷川裕之さん</h2>

<p>世界への配信にS3 + CloudFront必須<br/>
MBaasSはParseを参考に自作してる</p>

<hr />

<h2>ChatWork株式会社 山本 正喜さん</h2>

<p>RDSにmroogaでラップして検索インデックスつくってる<br/>
mroogaからelasticsearchの導入を検討していたが、amazon cloudsearchを導入予定<br/>
コードはPHPからScalaへ乗り換え予定</p>

<hr />

<h2>株式会社nanapi 和田 修一さん</h2>

<p>logはfluentd<br/>
生でs3へ<br/>
あとはelasticsearch + kibanaで視覚化</p>

<hr />

<h2>ランサーズ株式会社 田邊 賢司さん</h2>

<ul>
<li>4000人が毎月収入</li>
<li>生活出来るひと: 200人</li>
</ul>


<hr />

<h2>株式会社アカツキ 田中 勇輔さん</h2>

<p>CloudFormationのテンプレート: yusuketのgist<br/>
asset_sync gem利用中<br/>
filepath + MD5をs3にで管理し、ファイル自体はダウンロードせずに存在確認してる<br/>
cloudwatchのアラートをhipchatに送ってる<br/>
github/blacklineのプラグイン使用中</p>

<hr />

<h2>Kaizen platform Inc. 石橋 利真さん</h2>

<p>調整さん、plat BCD(ABテストツール)<br/>
リモートワークしてる</p>

<h3>インフラ運用の見える化</h3>

<p>暗黙知era => 見える化era</p>

<p>事件</p>

<ul>
<li>ec2keypairなくなった。</li>
<li>RAILS_ENVはどこ。/etc/profile.d/rail.shで設定されてた。</li>
</ul>


<p>chef(knife-solo) + serverspec<br/>
ref: github時代のデプロイ戦略</p>

<hr />

<h2>株式会社ビズリーチ 竹内 真さん</h2>

<p>LUXAの話</p>

<p>メール1億通/月<br/>
外部サービス、SESは使ってない<br/>
送る時にSMTPサーバ数増やす<br/>
EC2の金額抑えるために稼働時間は30~45分でコントロールしてる</p>

<hr />

<h2>イベントレジスト株式会社 池田 大輔さん</h2>

<p>翻訳にはTransifex使ってる</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyWorld Conference 2013に参加しました]]></title>
    <link href="http://matsue.github.io/blog/2013/11/24/rubyworld-conference-2013/"/>
    <updated>2013-11-24T16:56:35+09:00</updated>
    <id>http://matsue.github.io/blog/2013/11/24/rubyworld-conference-2013</id>
    <content type="html"><![CDATA[<p>RubyWorld Conference 2013に参加しました</p>

<p>島根県松江市で開催された<a href="http://www.rubyworld-conf.org/ja/">RubyWorld Conference 2013</a>に参加してきたので、特に印象に残ったところをメモ(<a href="http://matsue.github.io/blog/2013/11/23/rubyworld-conference-2013-day1-memo/">day1</a>, <a href="http://matsue.github.io/blog/2013/11/23/rubyworld-conference-2013-day2-memo/">day2</a>)からピックアップ。
<img src="https://lh3.googleusercontent.com/-3JJ6G6q-fII/UpHwGGIrhhI/AAAAAAAAADs/lWJGFVGj18U/w955-h716-no/P1020968.JPG"></p>

<!-- more -->


<h2>Aiming the Moving Target</h2>

<p><img src="https://lh5.googleusercontent.com/-QoldzB7PULE/UpHwE29ap5I/AAAAAAAAADY/Bl6DMHQqD-M/w955-h716-no/P1020969.JPG"></p>

<p>まつもとさんによる初日の基調講演。個人的には特に不思議の国のアリスに登場する赤の女王の言葉を用いた例えと、&#8221;Nice try&#8221;という言葉が印象的でした。<br/>
スライドの写真がないので <a href="http://ja.wikipedia.org/wiki/%E8%B5%A4%E3%81%AE%E5%A5%B3%E7%8E%8B%E4%BB%AE%E8%AA%AC">Wikipedia</a>より赤の女王の言葉を引用すると</p>

<blockquote><p>「その場にとどまるためには、全力で走り続けなければならない（It takes all the running you can do, to keep in the same place.）」</p></blockquote>

<p>この言葉が示すように、ソフトウェアのように価値の変化するものを追うには、OSSのコミュニティ、そして会社も、変化し進み続けなければ死んでしまう。<br/>
そして&#8221;動くターゲット&#8221;である価値あるソフトウェアを提供するには、<strong>巨人の肩に乗り、なるべく速く、何度もためして、何度も撤退すべき</strong>。「失敗したらもう終わり」というプロジェクトの進め方をせず、「失敗してもいい」、そして失敗のことも&#8221;Nice try&#8221;と言い換えるところから始めてみませんか、というようなお話をされていました。</p>

<p>昨年の発表もそうでしたが、まつもとさんの「エンジニア主導の世界になっていくんだ」「世界を変えていこう」というメッセージにワクワクしながら聞いていました。&#8221;Nice try!&ldquo;、使っていきたいです。</p>

<p>非常にエンジニア心に響くセッションですので、気になった方は<a href="http://tech.rakuten.co.jp/">Rakuten Technology Conference 2013</a>のビデオをご覧下さい。こちらの動画は英語での発表ですし、言い回しや構成も異なる部分がありますが、同じタイトルで発表をされています。</p>

<div class="ratio-4-3 embed-video-container" onclick="var myAnchor = document.getElementById('obiljftVy0g');var tmpDiv = document.createElement('div');tmpDiv.innerHTML = '&lt;iframe style=&quot;vertical-align:top;width:100%;height:100%;position:absolute;&quot; src=&quot;http://www.youtube.com/embed/obiljftVy0g?autoplay=1&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;';myAnchor.parentNode.replaceChild(tmpDiv.firstChild, myAnchor);return false;" title="click here to play">
<a class="youtube-lazy-link" style="width:100%;height:100%;background:#000 url(http://i2.ytimg.com/vi/obiljftVy0g/0.jpg) center center no-repeat;background-size:contain;position:absolute" href="http://www.youtube.com/watch?v=obiljftVy0g" id="obiljftVy0g" onclick="return false;">
<div class="youtube-lazy-link-div"></div>
<div class="youtube-lazy-link-info">[RakutenTechConf2013] Aming the Moving Target (Yukihiro Matsumoto)</div>
</a>
<div class="video-info" >Rakuten Technology Conference 2013 (26, Oct 2013)
http://tech.rakuten.co.jp/timetable.html
(Schedule may be changed without notice.)

Twitter hashtag: #rakutentech
https://twitter.com/search?q=%23rakutentech</div>
</div>


<h2>クックパッドの継続的デリバリー</h2>

<p>こちらは高井さんによるクックパッドにおける開発手法の紹介。「いいなー！」「参考になる！」と思った所を並べると、</p>

<ul>
<li>毎日11以上の本番デプロイがされている</li>
<li>14,432のテストが10分で終わるよう分散実行している</li>
<li>ブランチ管理はGitHub Flowを採用</li>
<li>開発環境のDBは本番同様のDBサイズになるようレプリケーションしている</li>
<li>デザイナもpull requestを送っていて、月間で約800のリクエストがとびかっている</li>
<li>jenkinsとhipchatを連携させて、デプロイ結果を通知している</li>
<li>デプロイ結果は自動でwikiにも追記されており、速度低下などあるとインフラエンジニアがそのログを漁って原因究明をする</li>
</ul>


<p>ユーザの属性や時期(例えばハロウィンシーズン)のフラグが立ったらUIを自動で切り替えてるといったことは<a href="https://github.com/cookpad/chanko">chanko</a>を使うと簡単にできるとのこと。また、テストの並列実行をサポートするツールも抽象化してOSSとして公開したいとのことでした。素敵です。</p>

<p>余談ですが、クックパッドさんはDevOps Tokyoでの発表も非常に熱いものでした。そのとき特に印象的だった<a href="https://www.google.co.jp/search?q=%E8%BF%B7%E3%81%A3%E3%81%9F%E3%82%89%E5%81%A5%E5%85%A8%E3%81%AA%E6%96%B9">「迷ったら健全な方」</a>について高井さんに聞いたのですが、実はこれYahooさんの<a href="https://www.google.co.jp/search?q=%E8%BF%B7%E3%81%A3%E3%81%9F%E3%82%89%E3%83%AF%E3%82%A4%E3%83%AB%E3%83%89%E3%81%AA%E6%96%B9">「迷ったらワイルドな方」</a>にかけているのだとか。いやー、どちらも格好いいっす。</p>

<script async class="speakerdeck-embed" data-id="391a240035690131b25126ccc4851787" data-ratio="1.33333333333333" src="//speakerdeck.com/assets/embed.js"></script>


<h2>The Internet Axiom: Escaping the Tyranny of Time and Space</h2>

<p>GitHubのCEOであるTomさんが2日目の基調講演でした。</p>

<p>Tomさんによる自己紹介。新しいスライドの使い方です笑
<img src="https://lh6.googleusercontent.com/-PpxOz94e9Bc/UpHxP_FfArI/AAAAAAAAALU/VkyPZ7IPBQA/w955-h716-no/P1030025.JPG"></p>

<p>そして自己紹介の後、&#8221;In the Year 2525&#8221;という曲に合わせた動画が流れ始める。動画の一場面で「どうぞうどうぞ」と2色のピルを奨めるTomさん。
<img src="https://lh3.googleusercontent.com/-e5M1nbjPseE/UpIm4gB2EHI/AAAAAAAAAfw/RykwCcfgF7Y/w544-h318-no/tom_2525.png"></p>

<p>インターネットがもたらす3つの変化を軸にスタートアップを紹介していました。紹介していたサービスは以下。もちろん最後はGitHubです。</p>

<ul>
<li>WEIGHTLESS DATA

<ul>
<li><a href="https://lockitron.com/">Lockitron</a></li>
<li><a href="https://squareup.com/">Square</a></li>
<li>MasterCardの<a href="https://www.paypass.com/">PayPass</a></li>
<li><a href="http://bitcoin.org/">Bitcoin</a></li>
</ul>
</li>
<li>WEIGHTLESS DATA MOVES FAST

<ul>
<li><a href="https://www.drchrono.com/">drchrono</a></li>
<li><a href="http://www.snapchat.com/">Snapchat</a></li>
</ul>
</li>
<li>COMMUNIATION BECOMES EASY

<ul>
<li><a href="https://www.uber.com/">Uber</a></li>
<li><a href="https://www.spoonrocket.com/">SpooRocket</a></li>
<li><a href="https://github.com/">GitHub</a></li>
</ul>
</li>
</ul>


<p>「なんだかみんな笑ってるが完璧な日本語だろ？Google翻訳さ！」というようなやりとりのシーン。どうしてこうなった。。ラップにでもなりそうだ一興。
<img src="https://lh3.googleusercontent.com/-OpifbUXay8w/UpHy5a2a3AI/AAAAAAAAAZk/kne68mWa2qY/w955-h716-no/PB221058.JPG"></p>

<p>GitHub社員の位置情報。みんなバラバラの位置にいることが分かりますが、これで仕事ができているのは非同期(Ashynchronus)なやりとりで仕事が出来るからで、それをサポートするのがpull requestやissueという機能。こういった仕事のやり方についてTomさんは、Linusさんとも話しあったことがあるようです。
<img src="https://lh6.googleusercontent.com/-ne99KZ1aWHc/UpHxUP5qecI/AAAAAAAAAL4/ObRa5Ahu0ZM/w955-h716-no/P1030029.JPG"></p>

<p>ここ1ヶ月のGitHub内のプロジェクトのコミット数など。GitHubが今も活発に改善を重ねていることが分かります。</p>

<ul>
<li>931 active pull requests</li>
<li>815 merged</li>
<li>113 authors</li>
<li>5273 commits</li>
<li>443 active issues</li>
<li>248 closed issues</li>
<li>195 new issues</li>
</ul>


<p><img src="https://lh5.googleusercontent.com/-qCiyytvva98/UpHxVY7oISI/AAAAAAAAAL8/A01iDj80Wzk/w955-h716-no/P1030030.JPG"></p>

<p>GitHubでは Beer30という、社員みんなで集まって新しいプロジェクトや新しいビジョンの話をする場があるそう。サンフランシスコで実施するので、参加できなかったメンバのために動画を共有しているとのこと。
<img src="https://lh3.googleusercontent.com/-4yLMUCoXTbs/UpHxWanmqgI/AAAAAAAAAME/FZSuAR0ytQw/w955-h716-no/P1030031.JPG"></p>

<p>hipchatとhubotで運用状態を見ているところ。
<img src="https://lh6.googleusercontent.com/-7mOe_fkuW6A/UpHxYA7--qI/AAAAAAAAAMU/dXhPp-Ik4yo/w955-h716-no/P1030033.JPG"></p>

<p>Tomさんの話からは終始、「時代は変わるんだよ」というメッセージをビリビリと感じました。きっとVCの人たちに話す時も、様々な例を出して、イノベーションを感じさせる話をしているのだろうなーと思って聞いていました。</p>

<p><a href="https://github.com/mojombo/jekyll">jekyll</a>を作ったの、Tomさんだったんですね。最近はビジネスが忙しく、家族もいるので、奥さんと子供が出かけている間にコードは書いているとのこと。うーん、凄いです。</p>

<h2>その他の印象に残っているところ</h2>

<p>安川さん、八田さんによる&#8221;Social Translating&#8221;もとても興味をひかれました。<a href="http://railstutorial.jp/">Ruby on Rails チュートリアル</a>が日本語で読めるって凄いです。4.0対応は2人で約1ヶ月で対応されたとのこと。</p>

<p><img src="https://lh4.googleusercontent.com/-mvcjoOpiUlU/UpHwhsjCkuI/AAAAAAAAAGw/_61I-u9Ihng/w955-h716-no/P1020993.JPG"></p>

<p>相澤さんの『クラウド時代のRubyアプリケーション設計』で取り上げられた<a href="http://12factor.net/">The Twelve-Factor App</a>は必ず読んでおこう。嬉しいことにこちらも<a href="http://twelve-factor-ja.herokuapp.com/">翻訳されており</a>、日本語で読むことができます！</p>

<p>Herokuユーザが視覚化されている様子。ユーザ数、日本は4位らしいです。</p>

<ol>
<li>アメリカ</li>
<li>UK</li>
<li>カナダ</li>
<li>日本</li>
</ol>


<p><img src="https://lh5.googleusercontent.com/-Og9LoT8cu1k/UpHxn0QWNxI/AAAAAAAAAOE/trvu8_efFzQ/w955-h716-no/P1030047.JPG"></p>

<p>川端さんによる『Rubyistによるアジャイル開発事例紹介と進め方』では最後に引用されていたKent Beckさんの言葉が印象的でした。</p>

<p><img src="https://lh4.googleusercontent.com/-29p9-vARPWU/UpHx2MuQUUI/AAAAAAAAAPg/nXCr7OYm2S8/w955-h716-no/P1030058.JPG"></p>

<p>というメッセージに対する答えが以下。
<img src="https://lh3.googleusercontent.com/-57IBURBQo74/UpHx2wbkrSI/AAAAAAAAAPw/DHNxIEND3_I/w955-h716-no/P1030059.JPG"></p>

<blockquote><p>『自分が変えられるのは自分だけ』</p></blockquote>

<p>まずは自分を変える努力をしなければ。</p>

<p>Ruby Prize 2013は、近永さんが授賞されました。おめでとうございます！
<img src="https://lh4.googleusercontent.com/-ibbxGO3xQQw/UpHwrDzcO8I/AAAAAAAAAH0/72z2KkrkjBE/w955-h716-no/P1030002.JPG"></p>

<h2>最後に</h2>

<p>講演を聞いていて、ただ聞いているだけではなく早く自分のアクションに繋げていかないといけないなと強く感じさせられるカンファレンスでした。</p>

<p>また、ここでは取り上げませんでしたが、まつもとさんのオリンピックネタや突然のダジャレ賞授賞式、攻めの司会などなど賑やかな場面がたくさんあり、とても楽しいイベントでした。スタッフ、講演者の皆様ありがとうございました！</p>

<p><img src="https://lh6.googleusercontent.com/-2mqRdSUqikw/UpHzjMnesHI/AAAAAAAAAbs/PlX0O7BvdYY/w955-h716-no/PB221127.JPG"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyWorld Conference 2013 Day2 Memo]]></title>
    <link href="http://matsue.github.io/blog/2013/11/23/rubyworld-conference-2013-day2-memo/"/>
    <updated>2013-11-23T01:14:19+09:00</updated>
    <id>http://matsue.github.io/blog/2013/11/23/rubyworld-conference-2013-day2-memo</id>
    <content type="html"><![CDATA[<p>RubyWorld Conference 2013 2日目にとったメモです。<br/>
個人メモなので誤字などご容赦ください。</p>

<!-- more -->


<h2>全体関連リンク</h2>

<ul>
<li>公式サイト: <a href="http://www.rubyworld-conf.org/">http://www.rubyworld-conf.org/</a></li>
<li>公式UST: <a href="http://www.ustream.tv/channel/rubyw-conf-13">http://www.ustream.tv/channel/rubyw-conf-13</a></li>
<li>togetter day1: <a href="http://togetter.com/li/592855">http://togetter.com/li/592855</a></li>
<li>togetter day2: <a href="http://togetter.com/li/593359">http://togetter.com/li/593359</a></li>
<li>my memo day1: <a href="https://gist.github.com/Matsue/7585061">https://gist.github.com/Matsue/7585061</a></li>
<li>my memo day2: <a href="https://gist.github.com/Matsue/7600639">https://gist.github.com/Matsue/7600639</a></li>
<li>Social Translatingの資料: <a href="https://speakerdeck.com/yasulab/social-translating-the-way-of-translating-rails-tutorial-and-ruby-hacking-guide">https://speakerdeck.com/yasulab/social-translating-the-way-of-translating-rails-tutorial-and-ruby-hacking-guide</a></li>
</ul>


<h2>The Internet Axiom: Escaping the Tyranny of Time and Space』</h2>

<p>by Tom Preston-Werner (GitHub Inc. CEO)</p>

<h3>self introduction</h3>

<ul>
<li>ruby developer</li>
<li>php developer</li>
</ul>


<p>githubで変えたいことがあれば言ってくれ</p>

<p>(~ video上映 ~)</p>

<p>video作ったのは私が変わり者だからというのもあるが<br/>
この歌が未来をとらえているから</p>

<p>このインターネットを使える時代素晴しく思う<br/>
電気がうまれた時代に似てる</p>

<p>インターネットは多くの情報をはこべ、電力以上に素晴しい</p>

<p>これはキャンプしたときの写真<br/>
電気が近くにあったわけではない<br/>
あったのはケータイだけ<br/>
これがインターネットの力</p>

<p>あなたのお気に入りのレストランのページはどうなってる？<br/>
メニューとかのってるだろう<br/>
それだけでいいのでしょうか</p>

<p>政府も考えるべき<br/>
申請書をアップロードするだけでいいと思ってる人がいる</p>

<p>ほぼ全ての人がスマートフォン持っている<br/>
10年後はいつでもどこでも使えることになってるだろう</p>

<h3>&ldquo;WEIGHTLESS DATA&rdquo;</h3>

<p>これからデータの重さがなくなる</p>

<h4>例えば鍵</h4>

<p>みなさん持ってますね</p>

<p>数KBのデータがあれば鍵はデータで表せるだろう<br/>
なぜ金属で持ち歩いているのか？<br/>
何万もケータイで持てるのになぜ？<br/>
インターネットの力使えてないといえる</p>

<p>実際にLockitronというサービスがある</p>

<h4>お金</h4>

<p>お札を持ち運んでいるがこれも意味が無い</p>

<p>squareがあります<br/>
ただ、リーダーがあるとデバイスが増えてる<br/>
そこでsquare cachというものも出してる<br/>
しかしemailなど管理は必要</p>

<p>iphoneだけでできないだろうか？<br/>
master cardはそれを解決しようとしてる<br/>
pay passというサービス</p>

<p>なんでこんな大変なのか<br/>
不正起きないよう、さまざまな制約があるから</p>

<p>bitcoinがある<br/>
これは問題もあるかもしれないが完全にオンラインで成り立っている</p>

<h4>病院</h4>

<p>なんども同じ問診票に同じ情報を書き続けなければならない<br/>
そして医者はまたそれをコンピュータにいれてる</p>

<p>drchronoはこれに対応している</p>

<p>みなさん仕事している中でいらつきを感じる場面あると思う<br/>
それをメモしてください<br/>
インターネットアクションをとってないことを</p>

<h3>WEIGHTLESS DATA MOVES FAST</h3>

<p>サンフランシスコからサクラメントにいって事務所に出さないと資料があった<br/>
1.5時間かけていった<br/>
データでいうと400Byteくらいの内容を書いた<br/>
そしてまた取りに戻った</p>

<p>つまりトータルで8時間もかかった<br/>
なんと50Byte/h<br/>
急いでもこれ<br/>
なんでこんなかかるのか</p>

<p>これと真逆の状態とはどんな状態でしょう</p>

<h4>snapchat</h4>

<p>革新的なのは数十秒でデータが消える<br/>
たとえば人の顔に落書きしておくったり</p>

<p>これのなにが特別なのか？<br/>
私たちは手紙をemailで代替している<br/>
パラダイムにのって変わったもの<br/>
しかし十分に適応していない部分がある</p>

<p>snapchatを使うと、送った馬鹿げた写真が広まることを気にしなくて良いのです</p>

<h3>COMMUNIATION BECOMES EASY</h3>

<h4>UBER</h4>

<p>サンフランシスコのtaxi状況はひどい<br/>
UBERを使えばどこにいるか見えるし自分の場所に来てくれる<br/>
待つ必要もないし、お金もその場で払わなくて良い<br/>
インターネットの力が発揮されている</p>

<p>簡単だから毎日使っている</p>

<h4>SPOON ROCKET</h4>

<p>これの対象はタクシーではなくご飯<br/>
6$で連れて行ってくれるて食べられる<br/>
車の送迎サービスもある<br/>
そして温かいご飯食べられる<br/>
大学生の助けになる</p>

<h4>GitHub</h4>

<p>世界中で働いている</p>

<p>先月のmain GitHubのレポジトリを見ると<br/>
- 931 pull requests
- 815 merged
- 113 authors
- 5273 commits
- 443 issues
- 248 closed</p>

<p>pull requestすると見える化できるし、レビューできる<br/>
ディスカッションができる</p>

<p>なぜこのような活動ができるのか？</p>

<h4>ASYNCHRONUS</h4>

<p>それは非同期にできるから<br/>
実際、いま私は日本にいて時差あるわけだが<br/>
リアルタイムではないがメッセージを送りあうことができる</p>

<p>これにより分散して仕事できる</p>

<p>非同期をサポートするのが
- pull request
- issue</p>

<p>という機能</p>

<p>Linusとも話した<br/>
彼以外の人は多くの人が一緒に働くということについて考えていなかった<br/>
大企業だけがそのような仕事していた<br/>
linuxはまさにそういうパターンの仕事だった<br/>
githubは分散された仕事を便利にしたもの</p>

<h4>bear 13</h4>

<p>githubではbear13という取り組みをやっている<br/>
集まって、新しいプロジェクトや新しいビジョンの話をする</p>

<p>サンフランシスコでやるが遠隔地のひとはどうするか？<br/>
&lsquo;remote by the fault&#8217;という考えでやっている<br/>
videoを見えるようにしている</p>

<h4>URLS</h4>

<p>URLも大事にしている<br/>
githubのURLは見れば何を指しているか分かるようにしている</p>

<p>みなさんのサイトでも考えてほしい<br/>
URLどれだけ読みやすいか</p>

<h4>@mentions</h4>

<p>これはtwitterにもある機能<br/>
issueなどで使う<br/>
これがあることで「いいね」というようなメッセージを引き出せる</p>

<h4>CHAT</h4>

<p>(chatopsのことぽい)<br/>
同期でも非同期でもできる<br/>
cookpad Takaiさんの取り組みは似ている<br/>
うちは28回なのでgithubの勝ちですw</p>

<p>1secでデプロイできるので何度も本番にデプロイできる</p>

<p>graph meで見るとかなりのメッセージが飛んでること確認できる</p>

<p>pagerやpuppetもchatで操作できる</p>

<h3>QA</h3>

<h4>pull requestなどの機能はユーザにはどう使ってほしいと思っている?˙あとこれから予定してる機能ある？</h4>

<p>ソフトウェアエンジニアが使えやすい機能を考えている</p>

<h4>遠隔地でのコミュニケーションどうしてる</h4>

<p>基本的には非同期でコミュニケーションだが、<br/>
face to faceするのは戦略的な話をするようなとき<br/>
そういう時にはgoogle hangout使う</p>

<h4>翻訳に使った時gitを分からない人がいてpull request分からない人いた。なにか良い解決策ある？</h4>

<p>non engineerにgit教えるのは大変。<br/>
githubはweb上だけでファイル編集とpull requestできるのでそれが使えるのでは</p>

<h4>rubyやrailsに期待する機能ある？</h4>

<p>いまそんなコーディングに時間使ってない   rubyはプロトタイプにとても適していて好きだ</p>

<h4>問診票は手の震えや記憶も見ている。それをインターネットで解決できるアイデアある？</h4>

<p>オンラインでビデオ問診とかある</p>

<h4>さいきん開発してる？</h4>

<p>そんなしてない<br/>
奥さんと子供がいないときだけしてる</p>

<h4>CLIでpull requestみるオススメのツールある？</h4>

<p>hubとか<br/>
やっぱりwebが便利</p>

<hr />

<h2>行政業務システムのRuby化(開発事例紹介</h2>

<p>by 木島浩暁 (株式会社日立ソリューションズ)</p>

<h3>Ruby化の経緯</h3>

<p>システム改修の短期化したかったから<br/>
そこでruby+railsを提案</p>

<h3>スケジュール</h3>

<ul>
<li>ruby化</li>
<li>変更分の取り込み</li>
</ul>


<p>をウォーターフォールで計画</p>

<h3>構成</h3>

<ul>
<li>web: java</li>
<li>バッチ: C</li>
</ul>


<p>これがrubyとrailsになった</p>

<h3>課題</h3>

<h4>1.開発体制の構築</h4>

<p>多数のruby技術者が必要だった<br/>
=> 島根県企業と共同で行った</p>

<p>PROBIZMOと協力
VPNや会議システムを構築して対応した</p>

<h4>2.Rails規約に沿わない機能の実装</h4>

<ul>
<li>URLの難読化</li>
<li>外部ファイルの取り込み</li>
</ul>


<p>rails拡張コンポーネントを挟んで対応した</p>

<h5>2-1.URLの難読化</h5>

<p>URLを予測されて直接入力されるのを避けたかった<br/>
開発者は通常通り開発し、難読化はコンポーネントが対応</p>

<h5>2-2.外部ファイルの取り込み</h5>

<p>申請書をweb画面から入力するのは難しいので<br/>
外注パンチで作成したファイルを取り込み機能が必要だった<br/>
ファイル解析用のDSLを定義した</p>

<h4>3.バッチ処理の性能確保</h4>

<p>C言語で書かれていたバッチと同等の速度確保を目標としていた</p>

<p>47万社のデータをCだと1h22minで処理してた<br/>
そのままrubyにすると70hかかった・・</p>

<ul>
<li>Active RecordからSQL直接入力へ変更</li>
<li>GCタイミング修正</li>
<li>parralel gemでの並列実行</li>
</ul>


<p>このような取り組みで1h10minにできた</p>

<p>Railsプロセスの起動時間も問題になっていた<br/>
- プロセス常駐化し、<br/>
- そこにプロセス間通信でキック、<br/>
- 処理プロセスをforkする</p>

<p>という流れにすることで改善した</p>

<h4>4.品質の維持</h4>

<ul>
<li>rspec</li>
<li>C0は100%</li>
<li>テストコードが2.5倍以上を目標</li>
</ul>


<p>テストに9hourかかる<br/>
クックパッドのテスト並列実行のOSSに期待してます</p>

<h3>最後に</h3>

<p>rubyにしたことで次期以降での改修時間の短縮に期待している</p>

<h3>QA</h3>

<p>ruby関連の質問は開発担当のmakiさんが回答</p>

<h4>rails起動の時間かかるというのはバッチ処理用のgem使ったのか、作ったのか？</h4>

<p>delayed jobも検討していたが自作した<br/>
200行程度のもの<br/>
作ってからzeusでできるよとも言われた</p>

<h4>機関系でのruby使用は増えそう？</h4>

<p>全国のデータではなく行政単位の処理だったので並列処理できたが、<br/>
もしこれが並列実行できないようなものだったらと考えると検討が必要だろう</p>

<h4>処理が分割ができれば使えそうということ？</h4>

<p>その認識で間違っていないと思う</p>

<h4>RDMSがネックになるのでは</h4>

<p>それはある。<br/>
他のプロジェクトで限界を感じている</p>

<h4>Active Record使うのやめたときエスケープ処理などはどうしたのか</h4>

<p>ORマッパーだけ使わず、サニタイジング機能などはrailsのものを使った</p>

<hr />

<h2>『日本最大級のクラウドソーシング「クラウドワークス」の超速事業起ち上げにおいてRubyの果たした役割』</h2>

<p>by 野村真一 (株式会社クラウドワークス)</p>

<h3>自己紹介</h3>

<p>モバイルCP -> クーポンサイト -> クラウドソーシング<br/>
Ruby使い始めたのはクラウドワークスが初</p>

<h3>クラウドワークスとは</h3>

<p>依頼できる仕事はオンラインで完結するものなら何でも</p>

<ul>
<li>ウェブアプリとか</li>
<li>ランディングページとか</li>
<li>サーバ構築とか</li>
<li>デザインとか</li>
</ul>


<h3>ミッション</h3>

<p>「21世紀の新しいワークスタイルを提案する」</p>

<p>背景は</p>

<ul>
<li>正社員比率の減少</li>
<li>超高齢化社会</li>
<li>女性の終業ギャップ</li>
</ul>


<h3>大切にしていること</h3>

<p>ユーザエクスペリエンス</p>

<p>機能で語る時代ではなくなってきた<br/>
車のCMでも「モノより思い出」といっちゃうくらい</p>

<p>仕事の受発注において、<br/>
お金だけでなくやりがいなどを期待しているはず<br/>
そういった社会の満足度等を提供していきたい</p>

<h4>「働くを通して人々に笑顔を」</h4>

<p>クックパッドさん参考にしてる<br/>
仕事を通じた満足やつながりを生みたい</p>

<p>「ありがとう」ボタン<br/>
facebookのlikeのように感謝を可視化した<br/>
リリース後スゴい押されてる<br/>
採用しなかった受注者の方に押されること多い</p>

<h4>「1クリックで世界の仕事とスキルにアクセスを」</h4>

<p>これまでのクラウドソーシングサービスは<br/>
予算や仕様が明確でないといけなかったりして複雑だった<br/>
ちょっと電話かけて相談するくらいの感じを想定</p>

<p>「ショートメッセージ」機能もあり、気軽な相談できるようにしてる<br/>
「お仕事相談所」というところで依頼方法や相場も教えてくれる</p>

<h3>開発事例</h3>

<p>rails多い<br/>
ポケットコンシェルジュも発注してる<br/>
ポケットコンシェルジュは時給制を採用してる</p>

<h3>ロゴコンペ</h3>

<p>新しい事業のロゴを依頼してたくさんのデザインが応募してくれる<br/>
経産省Jump start Nipponでも使われた</p>

<h3>選択と集中</h3>

<p>受注と発注は鶏と卵<br/>
発注者にフォーカスしてる<br/>
目標設定も発注者の数<br/>
受注者はあとからついてくるとしてる</p>

<h3>スピード!スピード!スピード!</h3>

<p>楽天を参考にしてる<br/>
F1より自転車のほうがイメージあう<br/>
守るものなく、エンジンは自身なので、スタートアップぽい</p>

<h3>たちあげの話</h3>

<p>CTOと非常勤の2人でつくった<br/>
rais使ってる<br/>
サービス開発に集中できる</p>

<p>主に使ってるgem</p>

<ul>
<li><p>capistrano</p></li>
<li><p>em-websocket
railsモデルそのままチャット機能つくれるので選択</p></li>
<li><p>OAtuth-plugin</p></li>
</ul>


<p>メタプログラミングも活用</p>

<p>今は4名くらいで開発<br/>
PHPに飽きた方がjoinしてる<br/>
rubyスキルはrubyぽく、railsぽく書けてるかで判断できる</p>

<h3>審査</h3>

<p>ソースコード出してもらってやってもらっている</p>

<h3>スキルの登録具合</h3>

<p>受注者のスキル層的にはPHPが多い</p>

<h3>内部で使っている技術</h3>

<p>大半がRubyがらみ<br/>
rails, fluentd, etc</p>

<h3>QA</h3>

<h4>今後の機能等あれば</h4>

<p>3Dプリンタの仕事追加したら発注されてる<br/>
マッチングにふっていきたい<br/>
スケジュール管理、ファイル共有とかを使いたいという要望がきてる<br/>
現状だとdropboxつかってくださいと言ってるが強化したいところ</p>

<hr />

<h2>『クラウド時代のRubyアプリケーション設計』</h2>

<p>by 相澤歩 (株式会社セールスフォース･ドットコム)</p>

<h3>Links</h3>

<ul>
<li><a href="http://twelve-factor-ja.herokuapp.com/">http://twelve-factor-ja.herokuapp.com/</a></li>
</ul>


<h3>自己紹介</h3>

<p>rubyコミッタになったのが２年前のrwcだったので感慨深い</p>

<p>herokuは買収され２年ほど経ち、<br/>
herokuでありセールスフォース・ドットコムの社員</p>

<p>エバンジェリストとしてエンジニアむけのマーケティング活動してる<br/>
大規模なキャンペーンのさい等にテクニカルアカウントマネージャーとしてサポートもしてる</p>

<p>製品開発以外やってる</p>

<p>エンタープライズレベルの契約をすると日本語でサポート受けられる</p>

<h3>Heroku</h3>

<p>2007年に3人で創設<br/>
最初はrubyだけホスティングしていた</p>

<p>2011に買収されてからはjavaやpythonなどなどサポート開始</p>

<p>しかしユーザの使用言語、システムの言語はRubyが多い</p>

<h3>課金</h3>

<p>使った分だけ</p>

<h3>ユーザ分布</h3>

<p>ランキングは上から</p>

<ul>
<li>アメリカ</li>
<li>UK</li>
<li>カナダ</li>
<li>日本</li>
</ul>


<p>UKインスタンスできてからUKも増えた<br/>
カナダと日本は僅差</p>

<h3>&lsquo;the twelve-factor app&rsquo;</h3>

<p>heroku創業者が書いた論文のようなもの<br/>
アプリ構築に必要な12の要素にまとめたもの</p>

<ul>
<li>セットアップは宣言的に行う</li>
<li>依存を明確に定義する</li>
<li>クラウド環境を仕様</li>
<li>環境と本番の差異をなくす</li>
<li>アーキテクチャを変更せずに用意にスケールするように</li>
</ul>


<p>というようなこと書かれてる</p>

<p>12のプラクティスのタイトル紹介</p>

<p>今日は3つだけとりあげる</p>

<h3>1.Codebase</h3>

<ul>
<li>ひとつのアプリは１つのコードもつ</li>
<li>ひとつのアプリは複数の環境にデプロイされる</li>
<li>複数のコードベースは複数のアプリとして取り扱う</li>
</ul>


<p>環境ごとに持つべきではない</p>

<h4>gem化</h4>

<p>共通コンポーネントはgemにして複数アプリで使う<br/>
jeweler使うとgem化は楽</p>

<h4>rails_12_factor</h4>

<p>herokuではrails12_factorを入れるようにしてもらってる<br/>
aasetsなどのサポートがはいる</p>

<h4>gitのsubmodule</h4>

<p>これでgitレポジトリの入れ子できる</p>

<h3>2.Config</h3>

<p>これはデプロイに特化したものなのでコードベースと分離すべき<br/>
環境変数にわける</p>

<h3>3.Build, release, run</h3>

<p>依存解決、リリース(実行準備)、実行</p>

<h4>バージョン管理</h4>

<p>コードベースのバージョンとリリースのバージョンは違う<br/>
rollbackはリリースのバージョン単位で行う<br/>
heroku内ではbuildpackで依存解決し、最終的にDyno managerでリリースされる</p>

<h3>日本語訳</h3>

<p>ここ: <a href="http://twelve-factor-ja.herokuapp.com/">http://twelve-factor-ja.herokuapp.com/</a></p>

<h3>QA</h3>

<h3>アーロンさん「ダジャレ賞さしあげます」</h3>

<p>これはダジャレクラブというハッシュタグがあり、その中でいいだじゃれ(たくさん?)つぶやいたのでもらえた</p>

<h3>司会「最高のダジャレおねがいします」</h3>

<p>「イベントで良い弁当」</p>

<h3>なぜjewelerにした？</h3>

<p>bundlerと悩んだが初心者にはjewelerのが良いと思った</p>

<p>slug compilerの中ではbundlerしてる<br/>
rubyのバージョン管理もherokuではbundlerで管理してる</p>

<hr />

<h2>『Rubyからアジャイル開発･ビッグデータ対応のデータベース(4D DAM)を利用するためのAPIの研究開発』</h2>

<p>by 山本哲男 (株式会社八雲ソフトウェア)、高木丈智 (株式会社テクノプロジェクト)</p>

<h3>山本さんの舞台裏</h3>

<ul>
<li>5000人にrwc招待メールおくった</li>
<li>300人から返信</li>
<li>34名カンファレンス参加</li>
<li>20名ツアー参加</li>
</ul>


<h3>八雲ソフトウェアについて</h3>

<p>松江駅前にて開業</p>

<p>八雲は出雲のかかりことば<br/>
8は無限も意味している</p>

<p>Uターン人材を募集して、これまで4名採用した</p>

<h3>首都圏の状況</h3>

<ul>
<li>人材不足</li>
<li>オフショア開発のリスク

<ul>
<li>文化も違うし</li>
<li>賃金あがってきた</li>
</ul>
</li>
</ul>


<p>なので東京で営業、地方で開発がよいと考える<br/>
首都圏の技術者60%は仕事があれば地元に帰りたいと思ってるという背景もある</p>

<h3>4D DAM</h3>

<ul>
<li>アジャイル</li>
<li>ビッグデータ(高速処理)</li>
<li>シンプルなテーブル構造</li>
<li>メンテナンスが簡単

<ul>
<li>DB内でプログラム実行可能</li>
</ul>
</li>
</ul>


<p>データベースだが上記に対応</p>

<p>実際、東証ではSQLは1行しかかかれていない</p>

<h3>東証での実例</h3>

<p>2010年に東証に採用された<br/>
不正検知などに貢献</p>

<p>契機は富士通のアローヘッドを使い始めたこと<br/>
7ヶ月しかなかったがアジェイルで4ヶ月で仮稼働まで辿り着いた<br/>
他社は数年予定だった</p>

<p>オリンピック殿でも実績ある</p>

<h3>機能解説</h3>

<ul>
<li>ダイナミックアレイ構造</li>
<li>ディクショナリードリブン</li>
</ul>


<p>変更が用意であるため、アジャイルに適用できる</p>

<h3>テクノプロジェクト</h3>

<p>創立29年<br/>
2007年からrubyに取り組んでいる</p>

<h3>4D DAM APIの紹介</h3>

<p>4D DAM向けのAPIの提供の話<br/>
Ruby版ドライバを作成したのでこれからはRubyから使える<br/>
ドライバは年内完成予定<br/>
来年２月にAPIは提供予定</p>

<h3>4D DAMの応用の可能性について</h3>

<ul>
<li>ECサイト</li>
<li>医療情報DB</li>
<li>通信監視</li>
<li>部品管理</li>
<li>フィールドクラウド</li>
</ul>


<h3>フィールドクラウド</h3>

<p>クラウドと統合したフィールド監視</p>

<p>example: 笹子トンネルの崩落<br/>
情報は紙では管理はされていた</p>

<p>交通規制といった水害対策もセンサーと連動することでできるだろう</p>

<h3>QA</h3>

<h4>機関システムではRDBMSだが、4D DAMに移行したらACID性は担保される？されないなら対策は？</h4>

<p>joinが問題だと思うが常にjoinしたような状態で動くので問題が起きない</p>

<h4>API実装上、データの整合性に気をつけていると思うが、どのへん工夫している？</h4>

<p>4D DAMの開発者にCで記述してもらっている<br/>
主にrubyらしい命名の要望だけ開発者に伝えている</p>

<h4>使用する上での懸念点を本音で言ってほしい</h4>

<p>八雲ソフトウェアが大きい会社ではないので体力的に懸念はされることはあるだろう</p>

<hr />

<h2>『Rubyistによるアジャイル開発事例紹介と進め方』</h2>

<p>by 川端光義 (株式会社アジャイルウェア)</p>

<h3>アジャイルウェア</h3>

<p>Rails4のシルバー試験の問題を作成中、来年４月から受けれるようになる</p>

<p>総メンバ数: 15名</p>

<p>Rubyの受託で12件ほど</p>

<p>XPS &amp; XCSの実現を理念としている<br/>
=> 究極のプログラマー満足と顧客満足</p>

<h3>Redmineのプラグイン開発事例</h3>

<p>2ヶ月で12個のプラグインを作成した<br/>
4つはOSSとしてgithubに還元した<br/>
ちょうどredmineのissueに上がっておりパッチを送った</p>

<p>発注先として選ばれたのは短期間の12個開発にOKと言えたから</p>

<h3>次の開発フェーズ</h3>

<p>redmineのガントチャートが使いにくい<br/>
=> MS Projectのように使えるガントチャートを作成することに</p>

<p>そして Lychee Gantt Chart が生まれた<br/>
Web上でマウス操作で各種期間などを操作できる</p>

<h3>Orange project</h3>

<p>THIN REPORTSにお世話になってます</p>

<h3>開発効率</h3>

<p>社内ではPivotal Trackerでチケット管理しているが、<br/>
それを見ると日に(?)2,3時間だけ使われている状態で進んでいる</p>

<p>Ruby, Rubyistの生産性が高いと言える<br/>
映画でリラックスするように彼らはプログラミングでリラックスしている</p>

<h3>変わったこと</h3>

<p>要件定義 == プログラミング<br/>
要件も細かく伝えなくていい<br/>
テストはあるがユニットレベルで仕様が柔らかいまま進む<br/>
受け入れテストの前に顧客のacceptが出ながら進む<br/>
スケジュールが前倒しになって管理がいらなくなってくる</p>

<p>これはRubyistのおかげ<br/>
エンジニア合わせて組織も変えてきた</p>

<p>学歴ではなく、githubをみる<br/>
プログラミング以外の物を引き取る<br/>
マネジメントも厳しくしない</p>

<h3>最後に</h3>

<p>あるカンファレンスでのKent Beckのやりとり<br/>
質問者「周囲を変えないと、アジャイルやXPができない」<br/>
Kent Beck 「変えられるのは自分自身だけ、それにつられて周りは変わる」</p>

<h3>QA</h3>

<h4>テスト駆動開発できないというのは？</h4>

<p>受け入れのテストから始められないということ<br/>
ユニットテストは最初から書いてる<br/>
仕様が固まった後半からCIも自動化してる</p>

<h4>顧客との仕様固めは開発者が直接行ってる？</h4>

<p>間に担当が立つこともあります<br/>
状況によります</p>

<h4>なぜフルーツの中でもアケビをプロダクト名に選んだのか?ruby色関係ある？</h4>

<p>英語のpawpawが可愛いと思ったから<br/>
ruby色だからではない</p>

<hr />

<h2>クロージングセレモニー</h2>

<p>by 井上 浩 (Rubyアソシエーション　副理事長, しまねOSS協議会　会長)</p>

<h3>来場者数</h3>

<ul>
<li>day1: 491人</li>
<li>day2: 410人</li>
<li>合計: 901人</li>
</ul>


<h3>開催趣意書</h3>

<p>趣意書どおり未来イメージできたと思ってる</p>

<h3>開催テーマ</h3>

<p>様々なテーマ交換できましたね</p>

<h3>各種紹介</h3>

<ul>
<li>構成団体</li>
<li>実行委員会</li>
<li>事務局</li>
<li>ワーキンググループ</li>
<li>スポンサー</li>
</ul>


<h3>最大の危機</h3>

<p>直前でmatz尿管結石に。。</p>

<h3>各種おもてなしありましたね</h3>

<ul>
<li>聖地 やぁ</li>
<li>夜も更けたり</li>
<li>今年も鉄板の石原さん</li>
</ul>


<h3>発表者の紹介、振り返り</h3>

<p>keynoteでは</p>

<ul>
<li>あまりコーディングしない</li>
<li>ナイストライを重ねてchange the world</li>
</ul>


<p>が印象的でしたね</p>

<ul>
<li>三好さんからはなぜJavaを選ばなかったのかという話もありました</li>
<li>受賞者の書いた紙を温めていたのは舞姫隊のあやめ様でした</li>
<li>matzのTokyoはナイストライでした</li>
<li>笹田さんご結婚おめでとうございます</li>
<li>Tomからはインターネットとプロジェクタの新しい使い方を学びました</li>
<li>相澤さんダジャレ賞おめでとうございます</li>
<li>アジャイルウェアさんのウォータフォール万歳</li>
</ul>


<h3>アーロンさん壇上へ</h3>

<p>今日は素晴しい通訳(matz)がいますので英語で<br/>
いつもひとりで作業して疲れてる<br/>
アメリカにはおつかれさまという言葉ない<br/>
なので週末にハグをするというのを考えた<br/>
(ここでみんなでhappy friday)</p>

<h3>最後に</h3>

<p>尿管結石にはご注意を<br/>
石原さん「来年も待ってるんだからね！」</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RubyWorld Conference 2013 Day1 Memo]]></title>
    <link href="http://matsue.github.io/blog/2013/11/23/rubyworld-conference-2013-day1-memo/"/>
    <updated>2013-11-23T01:01:58+09:00</updated>
    <id>http://matsue.github.io/blog/2013/11/23/rubyworld-conference-2013-day1-memo</id>
    <content type="html"><![CDATA[<p>RubyWorld Conference 2013 1日目にとったメモです。<br/>
個人メモなので誤字などご容赦ください。</p>

<!-- more -->


<h2>全体関連リンク</h2>

<ul>
<li>公式サイト: <a href="http://www.rubyworld-conf.org/">http://www.rubyworld-conf.org/</a></li>
<li>公式UST: <a href="http://www.ustream.tv/channel/rubyw-conf-13">http://www.ustream.tv/channel/rubyw-conf-13</a></li>
<li>togetter day1: <a href="http://togetter.com/li/592855">http://togetter.com/li/592855</a></li>
<li>togetter day2: <a href="http://togetter.com/li/593359">http://togetter.com/li/593359</a></li>
<li>my memo day1: <a href="https://gist.github.com/Matsue/7585061">https://gist.github.com/Matsue/7585061</a></li>
<li>my memo day2: <a href="https://gist.github.com/Matsue/7600639">https://gist.github.com/Matsue/7600639</a></li>
<li>Social Translatingの資料: <a href="https://speakerdeck.com/yasulab/social-translating-the-way-of-translating-rails-tutorial-and-ruby-hacking-guide">https://speakerdeck.com/yasulab/social-translating-the-way-of-translating-rails-tutorial-and-ruby-hacking-guide</a></li>
</ul>


<h2>Aiming the Moving Target</h2>

<p>by matz</p>

<h3>links</h3>

<ul>
<li>english memo
<a href="https://www.evernote.com/shard/s54/sh/9cd05cf6-6119-4baa-a1ae-31bd2f23ae34/16638f82bd08ac21c5ad4206d81630de">https://www.evernote.com/shard/s54/sh/9cd05cf6-6119-4baa-a1ae-31bd2f23ae34/16638f82bd08ac21c5ad4206d81630de</a></li>
</ul>


<h3>1990</h3>

<p>1990年に社会人<br/>
その会社ではプロジェクトは3年単位で動いていた</p>

<ul>
<li>日本語で設計書書いて</li>
<li>それをそのまま実装</li>
<li>テスト</li>
<li>納品</li>
</ul>


<p>スゴく詳細なドキュメント<br/>
ドキュメントは厚さ(センチ)ではかってたくらい<br/>
ウォーターフォールだった</p>

<p>なにか違うと思ってたが説明できなかった<br/>
経験もなかった<br/>
20年経った今は説明できるようになった</p>

<h3>間違った前提</h3>

<h4>その１</h4>

<p>「なにを作っているか把握してる」<br/>
と、思ってること</p>

<p>softwareは物理法則に制限されない<br/>
最近は記憶容量大きくなりプログラムサイズは制限されない<br/>
いまや、もっとも複雑な被造物といえる</p>

<p>人間の能力を超え、ドキュメントでカバーできない<br/>
ソフトウェアは柔らかくない<br/>
ソフトウェアはハード(固く、難しい)</p>

<p>更新は大変</p>

<h4>その２</h4>

<p>「何を作りたいか把握してる」<br/>
なにをしたらビジネスが成功するかわかっている人は少ない</p>

<p>ソフトウェアを使った時の状態を想像するのは今も昔も難しい<br/>
納品すると大体、「私が思ったのと違う」</p>

<p>上司や顧客がバカ扱いになりがちだが<br/>
何を作ったらビジネス価値を最大化できるか分かる人は少ない<br/>
実際はみんなバカだった</p>

<h4>その3</h4>

<p>「状況は変化しない」という前提</p>

<h3>対策</h3>

<p>無知であることを認めるべきだった<br/>
我々ができることは少ない</p>

<h4>保守的戦略</h4>

<p>過去から学ぶ<br/>
状況が変化しないなら、良い戦略<br/>
ITでは変化が激しいので成立しない</p>

<p>アリスの赤の女王いわく、<br/>
留まるには速く動き、移動するにはもっと速く動かないといけない</p>

<h4>ダチョウアルゴリズム</h4>

<p>ダチョウは砂嵐きたら砂に頭を埋める<br/>
なにもかも投げ出して、ただ待つ<br/>
冬眠も似てる</p>

<p>状況が回復するなら良い戦略</p>

<h4>これまでの2つの戦略</h4>

<p>ここまでの２つは現実に反しており、おとぎの国に向かうような戦略<br/>
20年前は上記の戦略をとっちゃってた</p>

<p>コンピュータは高価で持っているだけで差別化できていた<br/>
ネットワークも高価<br/>
なので失敗しないことを最優先してた<br/>
たとえ満足度を犠牲にしても</p>

<p>それが唯一のソフトウェア開発の方法であると信じたかった</p>

<p>いまは持つだけでは差別化できない</p>

<p>いまもすごいソフトウェアの作り方は分からない<br/>
無知の知</p>

<p>コンピュータ、クラウド、ネットワーク安くなった<br/>
ソフト開発も安くなった<br/>
ツールとか言語とかのおかげ</p>

<p>以前は海外にメールすることもできない世界だった</p>

<p>rubyはたくさんの海外の方からサポート<br/>
母国語や住んでる場所、性別もしらないこともある</p>

<p>いまや、巨人の方に乗ることができる</p>

<h4>試行錯誤(try &amp; errors)</h4>

<p>何度でも挑戦できることが必要<br/>
コスト最小化が大事<br/>
そこをrubyはサポートしてきた<br/>
それができるようになって初めて動く標的を狙うことができる<br/>
Aiming the Moving Target</p>

<p>動くターゲットとは本当に価値のあるソフトウェア<br/>
価値は人間の欲求に基づく</p>

<p>リリースがいまや個人でできる<br/>
プリウスは一人でつくれないだろうが、<br/>
ソフトウェアでは一人でつくったもので世界を変えられる<br/>
当たらなかったらピボットできる</p>

<p>「安く速く何度も」が成功の秘訣</p>

<p>アジャイルもそれを反映している<br/>
変化に対応する</p>

<p>成功するかは分からないが成功確率は上がる</p>

<p>自戒を込めて、<br/>
熱心にコードを書かない</p>

<p>複雑になり失敗したときのダメージも大きい<br/>
コードを書かないために熱心に働く</p>

<p>最初のボールだけ転がして、みんなに頑張ってもらう<br/>
rubyもひとりで作っていない</p>

<p>ここも巨人の肩にのる</p>

<p>競争力維持に必要な物以外はOSSにしてしまうのが正しい戦略<br/>
コアパートも小さくとどめる</p>

<p>OSSの定義にはないがコミュニティというのは不可欠<br/>
OSSでなくてもコミュニティは有効だろう</p>

<p>プロジェクトを最小化し、プロジェクトの組織というものが解体されるだろう<br/>
技術ベースでプロジェクトをわたり歩くようになるだろう</p>

<p>OSSコミュニティはサメ<br/>
進み続けなければ、死ぬ<br/>
大部分は技術的に面白いことで参加してるので、止まると人が離れる<br/>
rubyもコミュニティ開いたり、新しい技術応援したり、カンファレンス開いたりしている<br/>
OSSでなくても進み続けることは必要だろう</p>

<p>アリスの世界と同様、なるべく速く、何度もためして、何度も撤退すべき<br/>
そして大局的構造を変えられるだろう</p>

<p>「失敗したら終わりだ」から「失敗してもいい」へ<br/>
まずは失敗をナイストライに言い換えるところから</p>

<p>コードかかず、<br/>
いいソフトウェアをつくり、<br/>
世界を変えよう</p>

<h3>QA</h3>

<h4>これからrubyで挑戦したいことある？</h4>

<p>webでは流行ってきてるがもっと広い世界で使えるようになるといいと思う<br/>
たとえば大学の科学技術計算など助成してる</p>

<p>あとはmrubyで組み込み目指してる</p>

<h4>公開するもの公開しないものの判断は？</h4>

<p>競争力に関わる物であるか<br/>
最小になるか</p>

<p>たとえばビジネスロジックだけ出さない</p>

<p>クックパッドをすべてOSSにしても問題ないと思ってる<br/>
レシピ・ユーザデータが大事</p>

<hr />

<h2>Speeding up Rails internals using unique Ruby techniques.</h2>

<p>by Aaron Patterson (AT &amp; T)</p>

<h3>Yak Shaving</h3>

<p>バグを見つけたらわかるまで調べてる<br/>
なのでYak Shavingになる<br/>
よくコンピュータ壊す</p>

<h3>とあるバグ報告の調査を開始</h3>

<p>シンボルはGCされない<br/>
Dos攻撃になるのが心配なので文字列にしたが遅くなったとの報告<br/>
rubyソースを追った</p>

<p>とあるソースでruby安全性と速度を担保するには？<br/>
=> 定数を使う</p>

<p>2.1のフローズン文字列を使うと、安全で速い</p>

<p>しかし、define_methodはmodue_evalより遅いとのコメントがつく<br/>
そこでベンチマークで確認した<br/>
たしかに遅かったが<br/>
しかしdefine_methodは異なるインタフェースも用意されており、そちらで呼んだら速度改善した</p>

<p>メモリ使用量についてもコメントあったのでベンチマークをして調査した<br/>
module_evalのほうが消費する</p>

<p>速くて、メモリ使用量も少ない方法はないか？<br/>
を考え改善に至る</p>

<p>数値列(?)からselectすると文字列で返るというバグから始まり、<br/>
rubyのVMを学び、<br/>
DoS攻撃の対策になり、<br/>
railsの高速化に寄与でき、<br/>
railsのメモリ効率がよくなった</p>

<p>ただしバグはまだ直ってないがw</p>

<p>大事なことは<br/>
「知りたがりましょう」</p>

<h3>QA</h3>

<h4>どれくらいそのバグ修正時間かかった？</h4>

<p>1monthくらい<br/>
まだ直ってないがw</p>

<h4>どれくらい日本語勉強してる？</h4>

<p>日本語は7年勉強してて<br/>
プレゼンは３週間くらい練習した</p>

<hr />

<h2>クックパッドの継続的デリバリー</h2>

<p>by 高井直人 (クックパッド株式会社)</p>

<p>20M UU/month<br/>
1.5Mrecipes</p>

<p>14432 testsが<br/>
10minutesで終わる</p>

<p>デプロイ頻度<br/>
11+ deploys/days</p>

<h2>継続的デリバリーの方法</h2>

<p>デプロイメントパイプラインで行う<br/>
今日はこれに追って解説</p>

<p>DBは本番のものをレプリケーションしてdevで使ってる<br/>
少ないデータでは遅い処理検知できない</p>

<p>github enterprise使ってる</p>

<p>テストは分散実行してるので10分で終わる</p>

<h2>ブランチ戦略</h2>

<p>GitHub Flow<br/>
feature toggle<br/>
ターゲットユーザに新しい機能出してる<br/>
それをするのがchanko</p>

<h3>ハロウィンデザイン</h3>

<p>chankoで時期になったらフラグたって表示される<br/>
デザイナがpull requestだしたり<br/>
それがレビューされてデプロイされる</p>

<p>月間 800 くらいのpull request</p>

<p>github enterpiseがEC2で動かないのでサーバわけてる</p>

<p>clone pusherをsinatraで作成<br/>
omkinsというjenkinsで管理してる<br/>
hipchat連携してる<br/>
プラグインは公開してる</p>

<p>CIサーバは8くらいいる<br/>
テスト増加にあわせて増えている<br/>
目標時間を10分にしてる<br/>
その時間もhipchatに出してる</p>

<p>テストは本番と同じ環境のSTGで実施</p>

<p>最新のCI通過分が<br/>
平日の9:30am - 5:00pmでデプロイされる<br/>
金曜は3:00pmまで</p>

<p>bundle exec cap production deployでデプロイ</p>

<p>デプロイ後はhipchat, wikiに自動で投稿される<br/>
infraµモニターおかしかったら、インフラ担当がログ見る<br/>
音も出せるが使われてない</p>

<p>デプロイしてほしくないときは<br/>
deploy:lockも用意してる<br/>
たとえばバグでロールバック中、サーバスケール中とか</p>

<h2>QA</h2>

<h3>DB migrationはどうやってる？</h3>

<p>devは変えたいタイミングでやってる<br/>
変更時にdumpしてgithubにpushしてる<br/>
本番はインフラと相談しながら</p>

<h3>CI のメンテナンスに割いてるコスト割合は？</h3>

<p>むらたさん、ふくもりさんの２名</p>

<h3>ソース全部公開する予定とかは？</h3>

<p>依存してない部分は抽象化して出してる
- chanko
- 分散テスト環境(予定)</p>

<hr />

<h2>JRubyを用いたRailsアプリ開発の実情</h2>

<p>by 三好秀徳 (株式会社日立ソリューションズ)</p>

<h3>自己紹介</h3>

<ul>
<li>OSSフォーラム推進</li>
<li>yokohama.rb</li>
<li>ruby world conf 2012のまとめしてる</li>
<li>るびま編集者になった</li>
</ul>


<h3>Jrubyの紹介</h3>

<ul>
<li>Java API使える</li>
<li>処理速度はCRubyと遜色無し
JVMの起動がボトルネックになることはある</li>
</ul>


<p>Jruby使う理由: Javaの資産を活用したい</p>

<h3>実例</h3>

<p>内製Accesssアプリケーションの移行の話
メンテナンス性と速度が低下していたので移行になった</p>

<h3>用件</h3>

<ul>
<li>パスワードzipファイル出力</li>
<li>excel出力</li>
<li>既存のJavaサーバで動かす</li>
</ul>


<p>=> rubygemsから使えそうな物をピックアップ
=> warblerでwarファイル化</p>

<h3>gemの選定</h3>

<p>xlsを使えるgem
- spreadsheet
- axlsx</p>

<p>それぞれバージョン対応しなかったり、開けないことがあった。。<br/>
のでApache POIで代替することになった。<br/>
それなら動作も問題なかった。</p>

<h3>動かないgem</h3>

<ul>
<li>pg</li>
<li>therubyraer</li>
<li>unicorn</li>
</ul>


<p>などなどあるが、<br/>
railsが自動で代替用意してくれる</p>

<p>jrubyのwikiにもまとまってる<br/>
ただし、全て網羅しているわけではない</p>

<ul>
<li>zipruby</li>
<li>SimpleCov</li>
</ul>


<p>が実際には動かなかった</p>

<ul>
<li>ziprubyはJavaのライブラリで代替</li>
<li>SimpleCovはgithubのissue確認してJRubyのバージョンアップで対応</li>
</ul>


<p>ここ、ソースだけでなく解決状況を見れるOSSのいいとこ</p>

<h3>rails/rake遅い問題</h3>

<p>JVMの起動が遅かった
- CRuby: 0.8sec
- JRuby: 8.5sec</p>

<p>高速化ライブラリもJRubyだと使えない
- Zeus
- Spring</p>

<h4>対策</h4>

<h5>Java VMのオプションを修正</h5>

<p>Client VMを利用
8.5 -> 3.62秒になった</p>

<h4>個々のPCで処理しないようにした</h4>

<ul>
<li>guard gem</li>
<li>sextant</li>
</ul>


<h3>JRubyは互換性あがってきてる</h3>

<ul>
<li>passenger</li>
<li>spork</li>
</ul>


<p>等は対応済み</p>

<p>新たな高速化gemも出てきた<br/>
=> commands gem</p>

<h3>まとめ</h3>

<p>gemの互換性注意<br/>
Java利用環境でJRubyは使いどころがある</p>

<h3>QA</h3>

<h4>文字コード対応できる？</h4>

<p>parameter-encodingで指定すれば対応できる</p>

<h4>JRubyを選定に加えた理由は?</h4>

<p>一部の要件がRubyではできないがJavaでできることはわかっていたから</p>

<h4>なぜJavaで開発しなかったのか？</h4>

<p>Ruby好きだから!</p>

<hr />

<h2>Ruby開発者を増やすための教育について－8年間のRuby教育で得た知見</h2>

<p>by 吉田裕美 (有限会社EY-Office)</p>

<h3>Ruby教育の現状</h3>

<p>一般データはもっていないのでEY-Officeの教育を紹介<br/>
2012年から研修申し込みが入るようになってきた</p>

<h3>教育業者を使うことのメリット</h3>

<ul>
<li>講義や教育のノウハウがある</li>
</ul>


<h3>社内で教えることのメリット</h3>

<ul>
<li>企業のノウハウを伝えられる</li>
<li>教える側もスキルが上がる</li>
</ul>


<h3>研修期間設定に関連するパラメータ</h3>

<ul>
<li>経験値</li>
<li>能力</li>
<li>etc</li>
</ul>


<h3>EY-Officeの教育コース</h3>

<ul>
<li>1日コース</li>
<li>3日コース - 5日コース</li>
</ul>


<p>3日が人気<br/>
1日で済む人は本でも済む<br/>
5日は期間として取りづらい</p>

<h3>コース内容</h3>

<ul>
<li><p>1日目</p>

<ul>
<li>Rubyの基本</li>
<li>ループとか正規表現</li>
</ul>
</li>
<li><p>2日目</p>

<ul>
<li>web application</li>
<li>scaffold使いつつrails</li>
</ul>
</li>
<li><p>3日目</p>

<ul>
<li>国際化対応</li>
<li>TDD体験</li>
<li>脆弱性対応など</li>
<li>ブログアプリ等のソースコードリーディング</li>
</ul>
</li>
</ul>


<h3>教育の場でやるべきこと</h3>

<h4>英語ドキュメントの読み方も教える</h4>

<p>exampleから見るとか</p>

<h4>デバッグ方法</h4>

<p>エラーメッセージはどう読むのか</p>

<h4>良いコードの書き方</h4>

<ul>
<li>なぜ必要か</li>
<li>名前重要</li>
</ul>


<h4>webアプリの基本</h4>

<p>html, cssとか</p>

<h4>webの脆弱性</h4>

<p>XSS, SQL injectionとか<br/>
実際のデモが良い</p>

<h3>ポイント</h3>

<h4>関係者の顔を見えるように</h4>

<p>開発者はmatzだよとか</p>

<h4>メタ教育</h4>

<p>&ndash;helpで大体ヘルプでるとか<br/>
manコマンドとか</p>

<h4>定着</h4>

<p>実際に作って、発表</p>

<h4>コミュニケーション</h4>

<p>確認しながら進める</p>

<h4>場数をふむ</h4>

<p>同僚に聞いてもらうとか<br/>
練習の場を作る</p>

<h3>環境</h3>

<p>windowsは入門程度なら問題ないが動かないgemなどある<br/>
多いのはwindows+VM+Linux<br/>
VMイメージ渡してる</p>

<p>印刷物はJekyllでつくってpdfにしてキンコーズで対応してる</p>

<h3>QA</h3>

<h4>その場でいれると環境ずれて困るのでは？</h4>

<p>bundle済みのrubyごと渡してる</p>

<h4>IDEは使わないの？</h4>

<p>隠蔽されてしまうので基本的には使ってない</p>

<hr />

<h2>Social Translating: Rails TutorialとRuby Hacking Guideの翻訳を支える仕組み</h2>

<p>by 安川要平 (YasuLab)、八田昌三 (ビヨンド・パースペクティブ・ソリューションズ株式会社)</p>

<h3>links</h3>

<ul>
<li><a href="http://railstutorial.jp/">http://railstutorial.jp/</a></li>
</ul>


<h3>(事例1) Rail Tutorialの事例</h3>

<p>約600page<br/>
Twitter-likeなページをサンプルで作るとかが書かれてる</p>

<p>7/1に日本語版も公開<br/>
約10人で1ヶ月で対応<br/>
4.0対応は2人で1ヶ月で対応</p>

<h3>(事例2) Rubyソースコード完全解説</h3>

<p>Ruby Hacking Guideの英語化</p>

<h3>どうやって対応したのか？</h3>

<p>githubを使って実施した<br/>
RHGはJekyllで実施</p>

<p>7.5 yearsかかった<br/>
GitHub移行後は1.3年<br/>
これを踏まえてRails Tutorialは工夫した</p>

<h3>改善点</h3>

<h4>みんなgitに慣れてる訳ではない</h4>

<p>word使いたい人とか<br/>
プロの翻訳者に相談して仕組みを変えた<br/>
social coding のような social translating<br/>
なるべくみんなが使いやすいwebツールで対処</p>

<h4>ツール1: facebook group</h4>

<p>pin機能を使ってREADMEのような投稿を常に表示
- 概要
- 役割分担
- 参加方法</p>

<h4>ツール2: google translator toolkit</h4>

<ul>
<li>翻訳サポートツール</li>
<li>URL指定で翻訳できる</li>
<li>翻訳メモリ、用語集を使える</li>
</ul>


<h4>翻訳メモリとは</h4>

<p>原文と訳文のペアが蓄積したもの<br/>
次の翻訳開始時にメモリから一気に翻訳できる<br/>
原文の更新の追尾が楽になる</p>

<p>メモリの記述形式はテキストやXML<br/>
翻訳のボリュームが大きい時は非常に効果的<br/>
web記事などは効果薄い</p>

<p>続きはtechrachoの技術ブログにhachi8833で掲載予定</p>

<h3>deploy部分の工夫</h3>

<p>エンジニアが自動化<br/>
toolkit上のタグ単位でzipダウンロードしてheroku push</p>

<h3>問題点</h3>

<ul>
<li>pull requestが使えない</li>
<li>diffがとりづらい</li>
</ul>


<h3>HTMLからepub化した!!</h3>

<p>達人出版ででてる<br/>
Creative Commonsなので配布などOK!<br/>
学生さん、割り勘購入とかもできるよ</p>

<h3>QA</h3>

<h4>複数人で翻訳すると言い回しの監修はどうしてる？</h4>

<p>例も示してスタイルガイドを定義していた<br/>
適宜きづいた点も指摘していた</p>

<h4>翻訳メモリ、順番変わって言い回し変わったらどうなる？</h4>

<p>updateとか名詞なのか動詞なのかとか変わる<br/>
明確な対処方法はない<br/>
表が特に危ないので気をつけるべき</p>

<h4>もしstackover flowなどを追従翻訳しようとすると大変、なにかアイデアある？</h4>

<p>READMEを翻訳メモリのようにしてGitHub上でtoolkitにすることを考えたことはある<br/>
toolkitにpull requestを追加することも考えたことがある</p>

<hr />

<h2>ひろがるRubyの学びの場</h2>

<p>by 五十嵐邦明 (株式会社spice life・一橋大学)</p>

<h3>Links</h3>

<ul>
<li><a href="https://github.com/igaiga/hitotsubashi-ruby-2013">https://github.com/igaiga/hitotsubashi-ruby-2013</a></li>
<li><a href="http://c4sa.nifty.com/">http://c4sa.nifty.com/</a></li>
<li><a href="https://github.com/ruby-no-kai/official/wiki">https://github.com/ruby-no-kai/official/wiki</a></li>
</ul>


<h3>一橋でのRuby講義</h3>

<ul>
<li>ニフティの寄附講義</li>
<li>島根Ruby合宿でも単位がもらえる</li>
</ul>


<h3>講義資料</h3>

<ul>
<li><a href="https://github.com/igaiga/hitotsubashi-ruby-2013">https://github.com/igaiga/hitotsubashi-ruby-2013</a></li>
<li>たのしいRuby</li>
</ul>


<p>などなど</p>

<h3>講義内容</h3>

<ul>
<li>ruby, shellの基本的な解説</li>
<li>wikipediaのアクセス数解析</li>
<li>twitterの解析</li>
<li>ニフティのC4SAでデプロイしたり

<ul>
<li>ブラウザ上で編集もできるクラウド</li>
<li><a href="http://c4sa.nifty.com/">http://c4sa.nifty.com/</a></li>
</ul>
</li>
</ul>


<h3>やってみて気づいたところ</h3>

<ul>
<li>そもそもshellとirbの違いとか分からないもの</li>
<li>文法よりもアルゴリズムが難しい

<ul>
<li>eachで中間データを持たしておくとか</li>
</ul>
</li>
<li>hash理解されづらい</li>
<li>プログラマー向け入門書はあるが、初心者向け無い</li>
<li>エンジニアが教えることでで最新rubyなどに追従できる</li>
</ul>


<h3>rails girls</h3>

<p>参加者の動機
- 同僚のやっている内容知りたい
- 旦那さんの仕事知りたい
などなど</p>

<p>万葉では卒業生むけの勉強会も開催中</p>

<h3>rails 寺子屋</h3>

<p>学生向けrailsワークショップ<br/>
いまは高専卒業生多い</p>

<ul>
<li>講義</li>
<li>pull request道場</li>
<li>コード大喜利</li>
</ul>


<h4>pull request道場</h4>

<p>開発の流れに慣れるためのpull request練習<br/>
ミサワ画像でコミュニケーションw</p>

<h4>コード大喜利</h4>

<p>課題を解く形式<br/>
うまく動けば○でる仕組みになってる<br/>
動いてても師範が脆弱性ついたりする</p>

<h3>環境</h3>

<p>VMはあまり使ってもらえなかったのでネイティブで</p>

<h3>ゴール</h3>

<p>社会人も含めた未来に設定することが大事<br/>
なので、たのしい雰囲気や仲間作りを大切にしてる</p>

<h3>場所があるということは重要</h3>

<p>興味があっても始めるきっかけがなかったり方法がわからないことがある<br/>
何が出来るのか、どうやってトラブル解決方法、勉強方法まなべる</p>

<h3>五十嵐さんのrubyはじめたきっかけ</h3>

<p>先輩がtdiary使ってた<br/>
そこから学ぶことが楽しかった</p>

<h3>QA</h3>

<h4>VMなぜ使ってもらえなかった？</h4>

<ul>
<li>linuxに慣れてない方が多い</li>
<li>ネイティブでないのでもっさりしてる</li>
</ul>


<p>ので敬遠されている模様</p>

<h4>初めての言語がRubyであることのメリット・デメリットは？</h4>

<ul>
<li>ライブラリが豊富であること</li>
<li>webですぐ動かせること</li>
</ul>


<p>が条件だと考えていてそれをruby満たしてる</p>

<p>あとはくせがなく読みやすいという声も生徒からあった</p>

<h4>参加者の学習状況に差が出た場合の対処は？</h4>

<p>基本的に多数の方にあわせる<br/>
演習の時間多いので、その時にサポートする<br/>
初めてだと翌週でも忘れるし、新規の方もいるので、聞かれたらもう一度説明をするようにしている</p>
]]></content>
  </entry>
  
</feed>
