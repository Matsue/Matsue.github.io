[{"content":"『10万人に愛されるブランドを作る！』を読んだ。\nライフネット生命のマーケティングについて書かれた本だけれども、スターバックスのマーケティングについても書かれている。\n 「どこかに喫茶店、コーヒー屋さんはないだろうか？」\nと店を探すことはしないでしょう。まず、\n「最寄りのスターバックスコーヒーはどこだろうか？」\nと探してくれるのです。\n たしかに「スタバ」という単語をGoogle Mapに入れたことが何度か思い当たる。\n スターバックスはコーヒー・ビジネスに非ず\n え、そうなの？\n 実はスターバックスは、自らのビジネスを「コーヒー・ビジネス」とは一度も称していません。開業当初も今も、自らのビジネス「ピープル・ビジネス」と称しています。\n そうだったのか！\n 「スターバックスでは「いらっしゃいませ」は、まず使われることはありません。なぜならその掛け声が、スターバックスの理念と合致しないからです。」\n\u0026hellip;\nスターバックスには「『いらっしゃいませ』と言ってはいけない」というマニュアルはない\n なんだってー！\n 「使いにくい人材こそ、採用したい人材だ」\n\u0026hellip;\n来たれ、使いにくい人材。\n 尊敬するすごい人達と一緒に働きたいなあと思ったとき、思い浮かんだ人達は組織でおとなしく仕事するタイプではない。\n「使いにくい人材」という言い方はすごくしっくりくる。\nスターバックスとライフネット生命のマーケティング理念や実際に行われていることが書かれていて、読みながらアイデアも浮かんでくる、とても参考になる本だった。\n","permalink":"https://256days.com/post/lifenet-marketing/","summary":"\u003cp\u003e『10万人に愛されるブランドを作る！』を読んだ。\u003cbr\u003e\nライフネット生命のマーケティングについて書かれた本だけれども、スターバックスのマーケティングについても書かれている。\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e「どこかに喫茶店、コーヒー屋さんはないだろうか？」\u003cbr\u003e\nと店を探すことはしないでしょう。まず、\u003cbr\u003e\n「最寄りのスターバックスコーヒーはどこだろうか？」\u003cbr\u003e\nと探してくれるのです。\u003c/p\u003e\n\u003c/blockquote\u003e","title":"使いにくい人材と理念が『10万人に愛されるブランドを作る！』"},{"content":" 一身を投げ出すとは、行動に移すということだ。いろいろ不安があっても、それを受け止めつつ、なお前進すべきなのだ。\n  自分にはできる、あるいはできるようになりたいと思ったら、ともかくはじめること。大胆さが才能を生み、力を生み、魔法を生む。\u0026mdash;ゲーテ\n  やろう思えば、できないことはない、やろうと思えば夢はかなうのだということを、人々に気づいて欲しい。\u0026mdash;テリー・フォックス(一九八〇年)\n 『ザ・ビジョン 進むべき道は見えているか』は、エリーとジムが対話する物語を通して、「ビジョン」に必要な要素や考え方が述べられている本。\n訳者の方のあとがきが端的にわかりやすく本の内容について書いてくれている。\n すぐれたビジョンには「有意義な目的」「明確な価値観」「未来のイメージ」の三つが要求される\n  自分の葬儀でどんな追悼文を読んでほしいか\n ノーベルは生存中に死亡記事を誤って書かれ、その記事にダイナマイトによる「破壊」のことばかりが書かれていたことにがっかりする。\nそこからノーベルは「平和」によって人々の記憶に残るよう舵を切る。\nスティーブ・ジョブズのスピーチにも最後の日を意識した一文がある。\n If today were the last day of my life, would I want to do what I am about to do today?\n 追悼文や最後の日を意識することはビジョンの1つの表現方法であり、「目的」を持つことで全速前進(Full Steam Ahead)することができる。\n","permalink":"https://256days.com/post/full-steam-ahead/","summary":"\u003cblockquote\u003e\n\u003cp\u003e一身を投げ出すとは、行動に移すということだ。いろいろ不安があっても、それを受け止めつつ、なお前進すべきなのだ。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cblockquote\u003e\n\u003cp\u003e自分にはできる、あるいはできるようになりたいと思ったら、ともかくはじめること。大胆さが才能を生み、力を生み、魔法を生む。\u0026mdash;ゲーテ\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003c!-- raw HTML omitted --\u003e\n\u003cblockquote\u003e\n\u003cp\u003eやろう思えば、できないことはない、やろうと思えば夢はかなうのだということを、人々に気づいて欲しい。\u0026mdash;テリー・フォックス(一九八〇年)\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e『ザ・ビジョン 進むべき道は見えているか』は、エリーとジムが対話する物語を通して、「ビジョン」に必要な要素や考え方が述べられている本。\u003c/p\u003e","title":"全速前進で進むために必要なもの『ザ・ビジョン 進むべき道は見えているか』"},{"content":"Alamofire will add square brackets for the key of array values. This article will show you how to remove those brackets.\nBy default, array values will be encoded to parameters like this.\nfoo[]=bar1\u0026amp;foo[]=bar2\nThis time we will make no square brackets parameters with ParameterEncoding.\nfoo=bar1\u0026amp;foo=bar2\nEDIT: We can use URLEncoding(arrayEncoding: .noBrackets) from Alamofire 4.7.0.\nThanks Von! http://disq.us/p/1vkqkqx\nExamples with ParameterEncoding Alamofire allow to change encoding formats with ParameterEncoding.\nSwift3 // Remove square brackets for GET request struct CustomGetEncoding: ParameterEncoding { func encode(_ urlRequest: URLRequestConvertible, with parameters: Parameters?) throws -\u0026gt; URLRequest { var request = try URLEncoding().encode(urlRequest, with: parameters) request.url = URL(string: request.url!.absoluteString.replacingOccurrences(of: \u0026#34;%5B%5D=\u0026#34;, with: \u0026#34;=\u0026#34;)) return request } } ... Alamofire.request(\u0026#34;http://example.com\u0026#34;, method: .get, parameters: [\u0026#34;foo\u0026#34;: [\u0026#34;bar1\u0026#34;, \u0026#34;bar2\u0026#34;]], encoding: CustomGetEncoding()) // Remove square brackets for POST request struct CustomPostEncoding: ParameterEncoding { func encode(_ urlRequest: URLRequestConvertible, with parameters: Parameters?) throws -\u0026gt; URLRequest { var request = try URLEncoding().encode(urlRequest, with: parameters) let httpBody = NSString(data: request.httpBody!, encoding: String.Encoding.utf8.rawValue)! request.httpBody = httpBody.replacingOccurrences(of: \u0026#34;%5B%5D=\u0026#34;, with: \u0026#34;=\u0026#34;).data(using: .utf8) return request } } ... Alamofire.request(\u0026#34;http://example.com\u0026#34;, method: .post, parameters: [\u0026#34;foo\u0026#34;: [\u0026#34;bar1\u0026#34;, \u0026#34;bar2\u0026#34;]], encoding: CustomPostEncoding()) Swift2 // Remove square brackets for GET request let parameterEncoding = ParameterEncoding.Custom { requestConvertible, parameters in let (mutableRequest, error) = ParameterEncoding.URL.encode(requestConvertible, parameters: parameters) mutableRequest.URL = NSURL(string: mutableRequest.URLString.stringByReplacingOccurrencesOfString(\u0026#34;%5B%5D=\u0026#34;, withString: \u0026#34;=\u0026#34;)) return (mutableRequest, error) } Alamofire.request(.GET, \u0026#34;http://example.com\u0026#34;, parameters: [\u0026#34;foo\u0026#34;: [\u0026#34;bar1\u0026#34;, \u0026#34;bar2\u0026#34;]], encoding: parameterEncoding) // Remove square brackets for POST request let parameterEncoding = ParameterEncoding.Custom { requestConvertible, parameters in let (mutableRequest, error) = ParameterEncoding.URL.encode(requestConvertible, parameters: parameters) let httpBody = NSString(data: mutableRequest.HTTPBody!, encoding: NSUTF8StringEncoding)! mutableRequest.HTTPBody = httpBody.stringByReplacingOccurrencesOfString(\u0026#34;%5B%5D=\u0026#34;, withString: \u0026#34;=\u0026#34;).dataUsingEncoding(NSUTF8StringEncoding) return (mutableRequest, error) } Alamofire.request(.POST, \u0026#34;http://example.com\u0026#34;, parameters: [\u0026#34;foo\u0026#34;: [\u0026#34;bar1\u0026#34;, \u0026#34;bar2\u0026#34;]], encoding: parameterEncoding) Why collection types have multiple implementation ways Current RFC does not define clear ways for how to encode collection types. Alamofire\u0026rsquo;s README mentioned it.\n Since there is no published specification for how to encode collection types, Alamofire follows the convention of appending [] to the key for array values (foo[]=1\u0026amp;foo[]=2), and appending the key surrounded by square brackets for nested dictionary values (foo[bar]=baz).\n References https://github.com/Alamofire/Alamofire/issues/965\n","permalink":"https://256days.com/post/how-to-remove-square-brackets-with-alamofire/","summary":"\u003cp\u003e\u003ca href=\"https://github.com/Alamofire/Alamofire\"\u003eAlamofire\u003c/a\u003e will add square brackets for the key of array values. This article will show you how to remove those brackets.\u003c/p\u003e","title":"How to remove square brackets from Alamofire array values"},{"content":"アツい！\n紹介されている時間術自体はシンプルだが、6章のメッセージが胸に刺さる。 Windows95の開発やビル・ゲイツの話と共に書かれているので、エンジニアリングに関わる人は読むと特に共感が得られるはず。\n どうすれば集中できるのか どうすれば残業も辛くないのか どうすればやりたいことを実現できるのか   自分が幸せになれる行動をしないと、人は幸せにはなれない。\n 時間術だけじゃない、そんなことに答えている本。\n 一度しかない人生、思いっきり楽しもうぜ。\nやりたくもないことに延々時間をとられてるなんて、もったいないぜ。\n ","permalink":"https://256days.com/post/rocket-start-working-style/","summary":"\u003cp\u003eアツい！\u003c/p\u003e\n\u003cp\u003e紹介されている時間術自体はシンプルだが、6章のメッセージが胸に刺さる。\nWindows95の開発やビル・ゲイツの話と共に書かれているので、エンジニアリングに関わる人は読むと特に共感が得られるはず。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eどうすれば集中できるのか\u003c/li\u003e\n\u003cli\u003eどうすれば残業も辛くないのか\u003c/li\u003e\n\u003cli\u003eどうすればやりたいことを実現できるのか\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e自分が幸せになれる行動をしないと、人は幸せにはなれない。\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e時間術だけじゃない、そんなことに答えている本。\u003c/p\u003e","title":"どうすれば人生は美しいといえるのか 『なぜ、あなたの仕事は終わらないのか スピードは最強の武器である』"},{"content":"Rakuten Technology Conference 2015に参加しました。二子玉川にある楽天の新社屋Crimson Houseでの開催でした。\n並行して複数のセッションが行われていたので見逃したセッションも多いですが、以下のタイムテーブルの各セッション詳細にYoutubeへのリンクがあるので安心です。 http://rakutentechnologyconference2015.sched.org/grid/\n全てのセッションが英語ですので、その点でも動画で再確認できるのは素敵です。\n以下は参加したセッションについてのまとめです。\n##　Will AI surpass human intelligence? \u0026ndash; Beyond Deep Learning (Yutaka Matsuo)\n  http://rakutentechnologyconference2015.sched.org/event/4B4g/will-ai-surpass-human-intelligence-beyond-deep-hellip\n松尾先生による、これまでのAIの歴史とディープラーニングを用いた研究成果、そして今後の展望についてのお話。\n上記動画の28分あたりから紹介されている、ディープラーニングに関連する映像が衝撃的です。 画像解析とゲームスコアによる評価付けで、ブロック崩しやレースゲームをAIが効率良く解いている様子が紹介されています。 どの動画でも前半はやみくもにゲームをプレイしているAIも学習が進むと、ブロック崩しで端に穴をあけてまとめてブロックを崩したり、レースゲームで最適なコース取りをしていて、その急成長ぶりは気味の悪さも感じさせます。\n近年の画像解析のアルゴリズムコンペでも、同一人物の顔を見つける処理をした場合の誤認識率は5%を下回り、同一人物・別人物と誤認識していた画像は人間が見ても判別が難しいそうです。\nまた近年の学習をしていくAIのことを**\u0026ldquo;Child AI\u0026rdquo;**、過去のAIにあったような人間が直接に解法や知識を与えておくアプローチでつくるAIを**\u0026ldquo;Adult AI\u0026rdquo;**と呼び分けていました。\nProgrammable IoT Platform “SORACOM\u0026quot; (Ken Tamagawa)   http://rakutentechnologyconference2015.sched.org/event/4N57/programmable-iot-platform-soracom\n玉川さんによるSORACOMのお話。\nキャリアが提供するパケット通信、帯域制限といった機能を賄うデータセンターのサーバーは、すべて用意しようとすると700億円近くもするらしいです。。\nそこでMVNO。SORACOMはIoT向けのMVNOでAWSのようなWebコンソールから管理下のSIMの帯域制限などができます。\n使っている例として大手企業や、以下の様なデバイスが紹介されていました。\n Akerun LiveConnect  SORACOM Beam SIMカードから送られたパケットをキャリアネットワークから先で自動で暗号化してくれるサービス。例えばHTTP通信はHTTPS通信にしてくれます。デバイス側ではSSL通信の処理をしなくてよいので、バッテリーの使用量削減も期待できます。 WHILLでも使われてるらしいです。\n今後の展開 最近ではカスタムDNS等の機能をリリースしており、今後も既存のプラットフォームをAWS上で各国にリリースすることでグローバルに展開していくとのことです。\nQ\u0026amp;A  物理サーバは使ってないのか？それはボトルネックにならないのか？  ドコモのデータセンターにあるが、拡張可能なためボトルネックにはならない。   なぜSORACOMをやろうと決心したのか？  AWSにいたころ、時差ボケで眠れない夜にSORACOMのプレスリリースを書いて、翌日の朝にそのプレスリリースを読んでこれはいけると思ったのがきっかけ   SORACOM Beamはどのくらい電力使用量を減らすのか？  具体的なデータは持ってないが、HTTPSの処理は多大なリソースを使っていた部分をHTTPで処理できる分、削減できると考える。   Software SIMについてどう考えるか？  いまのSORACOMはSIMカードが必要。リモートでプロファイルが書き換えられるSoftware SIMはSORACOMとも相性が良いので、調査中。実際にEU諸国での例もあるので展開が楽しみ。    Rakuten and Microsoft talk DevOps in Real world (Kotaro Ogino / Drew Robbins / Tsuyoshi Ushio)   http://rakutentechnologyconference2015.sched.org/event/3iON/rakuten-and-microsoft-talk-devops-in-real-world\n動画冒頭の\u0026quot;DevOps!!!\u0026ldquo;コールは音量に注意してください笑\nThe Phoenix ProjectがアメリカではDevOpsのバイブル本とのことです。\nDevOps Journey (Micorsoft) Visual Studioは1997年にリリースされ、当時は2、3年おきにリリースするというサイクルでした。 そして最初のリリース後はバグ修正だけに終始してユーザのフィードバックに応えることはありませんでした。\n2008年移行にその体制は変わって、2013年にはVisual Studio Onlineという形でリリースがされました。\nDevとOpsとPMに分かれていたチームは\n Dev \u0026amp; OpsでDevelopment Teamになり、 Dev \u0026amp; Ops \u0026amp; PMでFeature Teamになり、  顧客とコラボレーションして動くようになりました。 その結果、いまでは1週間で80デプロイを行い、それでもインシデント数は1ヶ月で10個だけになったそうです。\nさらに凄いのは、この変化は会社のサポートが最初からあって起きたわけではなく、以下のフェーズを経て少数の熱意から変化したそうです。\n Change agent(s) : DevOpsを始める少数の人、ユニコーンによるDevOps開始 Grassroots : 著名人などを招いた会社内でのイベントの実施 Tops down Scale : Dojoシステム  今ではDojoシステムというものがあり、週一程度で定期開催される会でCI等についていつでも学ぶことができます。 それでもまだDevOps Journeyの途上だということです。\n他社のDevOps Journeyとしては以下のストーリーが紹介されました。\n Rakuten: Microservicesにより、大きな企業の中であっても、各チームはスタートアップのように振る舞う Yahoo! Japan: DevとOpsの壁をなくすために、Devチームのユニコーン(リーダー格)の人をOpsに入れることで、Opsに自動化の文化を生み出す  Test Automation for DevOps (Rakuten) 発表者の荻野さんは楽天のIDやポイント、決済を管理するGroup Core Serviceという部署で働いていており、多くのビジネス要求がある中でどのようにDevOpsを回しているかの紹介がありました。\nスケール可能なパフォーマンステストを行うため、楽天内のOpenStack環境を使い、数クリックでGatlingによるテストを実行できるとのことです。そして全てのCI結果はKibanaにより集計されていました。かっこいい。\nCI Strategies (Microsoft) Microsoftでは以下のような戦略・手法をとっています。\n クラウドとオンプレミスのコードベースを共有する いつでもデプロイ可能にする Canary testing (カナリアテスト) : 一部のサーバクラスタにだけ新機能をリリースし、問題がなければ他のクラスタにもスケールしていく Feature flags : ランタイムで機能のON/OFF  Continuous Delivery Strategy Map 牛尾さんがDevOpsインタビューをする中で気づいた戦略マップにはSpeed、Qualityの2つの軸があります。\nCookpadが行っているような、いつでもロールバックできるようにする戦略はSpeed重視、荻野さんの例やカナリアテストを使う戦略はQuality重視になります。\nBuilding Smart Applications with an Algorithm Marketplace : Diego Oppenheimer, Algorithmia \u0026amp; DEX \u0026amp; DEX(TRA) : Dextra (Daryl Arnold / Diego Oppenheimer)   http://rakutentechnologyconference2015.sched.org/event/4B5P/building-smart-applications-with-an-algorithm-markehellip\nAlgorithmia Algorithmiaは人々がアルゴリズムを発見・利用できる状態にすることを目的とする会社で、様々なアルゴリズムをサイト上で試用・購入することができます。\nアルゴリズムエコノミーが必要な背景としては以下の事例を挙げていました。\n 2009年には8ゼタバイト(テラ-\u0026gt;ペタ-\u0026gt;エクサ-\u0026gt;ゼタ)のデータが生み出され、2020年には35ゼタバイトに上る 1時間あたり、100万台の新しいデバイスがオンラインになっている 1分あたり、20時間分の動画がアップロードされている  実際のアルゴリズムの例は、以下が挙げられていました。\n Nudity detection: isitnude / ブログ Face recognition: Name That Actor / ブログ Web page recommender: https://algorithmia.com/recommends keyword tags for a URL: https://algorithmia.com/algorithms/tags/AutoTagURL  他の事例については以下のリンク先を見て、いくつか試してみるとわかりやすいです。\nhttps://algorithmia.com/use-cases\nDevOps with Lego and Chocolate simulation game (Dana Pylayeva)   http://rakutentechnologyconference2015.sched.org/event/4B4r/devops-with-lego-and-chocolate-simulation-game\nDevOpsについて、ワークショップ形式で実際に他の方々とゲームで学べるセッションです。 文章では伝わりづらいかと思いますが、概ね以下のようなルールのゲームが行われました。\n ビジネス、Dev、Opsを持つ3つのチームにわかれ、さらにチーム内でそれぞれに、アドミンやテスターといった役割が割り振られる ビジネスの要求を基に、レゴで組み立てられたプロダクトを各チームはたくさん生産することを目的に取り組む 生産する時間な数スプリント用意されていて、各スプリント間には振り返りの時間と、ルール変更がある  上記のルール変更が大きなポイントで、例えばゲーム開始当初は\n Devのみがレゴを組み立てて良い Opsだけが使用できるレゴの種類を知っていて納品できる  という風に完全に役割が分かれています。\nスプリントが進むとルールが変化し、\n Devも使用できるレゴを知って良いし、納品しても良い Opsもレゴを組み立てて良い  となります。\nそうするとDevもOpsも待っているだけの時間がなくなり、スプリントを進めるごとに納品できるプロダクトが増えていきます。\n このワークショップでは、以下の様な実際の現場にありそうなイベント・体験が用意されていたのが印象的でした。\n Devが作ったものが完成してから、Opsの段階でセキュリティの要件でプロダクトが差し戻されるイベントがある セキュリティ要件を修正したあと、ビジネス判断で完成品のデプロイが延期になるイベントがある スプリントが進んでDevがOpsを兼ねるようになると、Ops陣もDevに入らないとやることがなくなる(逆も然り)  また、突然その場であった人たちとお互いの会社も国籍も分からないまま、ルールも手探りで、英語と日本語であれこれ言いながらやれた体験が特に面白く感じました。\nRegional Scrum Gathering Tokyo 2015でもそうでしたが、こういったワークショップは気づきが多く、個人的には満足感が高いです。\n 以上です。さいごに、講演者・スタッフの皆様、素敵なカンファレンスをありがとうございました！\n","permalink":"https://256days.com/post/2015-11-24-rakuten-technology-conference-2015/","summary":"\u003cp\u003e\u003ca href=\"http://rakutentechnologyconference2015.sched.org/\"\u003eRakuten Technology Conference 2015\u003c/a\u003eに参加しました。二子玉川にある楽天の新社屋Crimson Houseでの開催でした。\u003c/p\u003e\n\u003cp\u003e並行して複数のセッションが行われていたので見逃したセッションも多いですが、以下のタイムテーブルの各セッション詳細にYoutubeへのリンクがあるので安心です。\n\u003ca href=\"http://rakutentechnologyconference2015.sched.org/grid/\"\u003ehttp://rakutentechnologyconference2015.sched.org/grid/\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e全てのセッションが英語ですので、その点でも動画で再確認できるのは素敵です。\u003c/p\u003e\n\u003cp\u003e以下は参加したセッションについてのまとめです。\u003c/p\u003e","title":"Rakuten Technology Conference 2015に参加しました"},{"content":"Regional Scrum Gathering Tokyo 2015に参加した。\n3日分の発表内容メモと感想のまとめ。長い。\n3日間のイベントで、初日は主にスクラム実践者の方々のセッション、2日目はオープンスペーステクノロジーというディスカッション形式、 3日目はコーチや本の執筆をされている方々からのキーノートという構成。3日目のみ有料だった。\n https://www.facebook.com/ScrumGatheringTokyo https://twitter.com/search?q=%23rsgt2015  Day1 初日は以下の4つのセッションに参加した。\n James O. CoplienさんのScrum Patterns: The New Defacto Scrum Standard 藤村 新さんの開発モデルの作り方 ～守破離の破！～ Mitsuyuki　Shiibaさんのスクラムマスターは要らない 林 栄一さんとMasanari Motohasiさんのアジャイルコミュニケーションプラログラム ~チームワークに関する心理学的アプローチ~  Scrum Patterns: The New Defacto Scrum Standard Copeさんによるスクラムとは何かを再確認するような発表。 英語だったので意味を取り違えてる部分もあると思うが、以下のようなことを言っていた。\n  スクラムはただのルールブック。 チェスプレーヤーに例えれば、ルールを知っているだけでは良いプレーヤーとは言えない。 スクラムにおいてマネージャーという存在はいらない。無駄。スクラムでは自己管理する。タスクマネージャーというのもいらない。 Kanbanを使ってるチームは病気。 チームのゴールは価値を創ること。スクラムやルール自体はゴールじゃない。 スクラムによって、どのようにして学ぶかを学ぶ。 毎朝のスタンドアップミーティングは何のためにあるのか？SBIを管理するショートプランニングミーティングみたいなもの。 もしもスプリントが終わった時にベロシティの見積もり通りになる確率が50%以上なら誰かが嘘をついてる。 息子は14歳でCSMになれたんだから皆も出来る。 ベロシティは6ヶ月で倍になる。なってないなら、あなたは理解してない。 信頼が大事。マネージャーやテスターを信頼してますか？ アジャイルマニフェストにあるように顧客との協調が必要。   なぜKanbanを使うのは良くないのか聞いたところ、 例えば1つの製品をデリバリーするために、\n パーツAをつくるチーム: 生産性98 パーツBをつくるチーム: 生産性96 テストするチーム: 生産性100  がいたとすると工程2のところで在庫が出る、という説明だった。 なのでHenrik Knibergさんの本に出てくるステータスが細かく管理され、WIPが制限されているようなカンバンを指しているわけではない。 役割が分断されているようなチームは無駄がでて良くないよね、という意見だと解釈した。\nまた、見積もったタスクが全てDONEできる確率は体感として50%以下な感じがするんだけど、と言ってみたところ、\n スプリントへの割り込みタスクを止める人がいない 違うチームへの依頼で待ち時間がある  といったことが原因でしょという話になった。 これは確かにそうなんだけれども、他のチームと働くことが多いというチームの性質や、 会社の枠組みでロールの分断された組織があるという状況もあるのでなかなか難しい印象。 ただ、これらについては他の方とも話しているうちに試してみたいアイデアを得た。\nCopeさん節はいつも通りかなりの破壊力があったし、理想の組織での話のように感じる部分はあるが、原点となるマインドと強いパッションには共感を覚える。 スクラムというと色んな要素はあるものの、価値を生み出すのがゴール。\n開発モデルの作り方 ～守破離の破！～   とりあえずやってみることでプラクティス厨じゃだめだと気付いた。 ざっくり開発者が言ってきた日数に係数かけて見積もる。エンジニア「２日です」オーナー「わかりました(４日か)」。 自己流から破はできない。型があるから型やぶり、型がない人が型を破ったら形無し。   リーン開発の現場を参考にされていることも、その他の部分でもすごく共感できることの多かったセッション。\n現状、良かれと思って基本や事例から変化させて取り込んでる手法についてはプラクティス厨になっている気もする。 色んな方々の知識によってスクラムの基本形ができていて、それから学べる要素も多いと思うので基本形をもう一度見直したくなった。\nスクラムマスターは要らない   全員POであってほしい。 以前は計画もスピードも重視で根性で乗り切ってた。 \u0008- 今は大阪の組織は全てスクラム。 当時、ベンチャーからの成長で組織はカオスだった。 「エンジニアとして働きたいチーム」をつくろうとした。 摩擦とヒエラルキーに悩んだ。 摩擦を生む境目が何か考えた。それは責任範囲だと考えた。「ここからはあなたの仕事、責任」 もう一つはエンジニアに期待してない。スキル低いエンジニアでも回せるようにしよう。 なんでこういう組織になったか考えた。失敗を乗り越えるためだと考えた。失敗しないように。「この範囲なら失敗しないよね」 子供に転んでほしくないと考えた。そのためには転ばせる必要がある。 エンジニアへの期待値をあげて、責任範囲を細かくしない。 タイムボックス、スコープ、レトロスペクティブで失敗を小さく、失敗できるように。 スキル高い人だけがチーム入ってほしいのではなく、成長できるようにしたかった。 いますぐ終わらせる、できるひとにとりあえずやってもらうではなく、コスト払っても３ヶ月後に早く開発できるようにしたかった。 立ち上げメンバーのようにユーザにとってうれしいことを考え、プロダクトオーナーシップを持ってほしい。 そもそもみんな持ってるはず。 「ここまででいいよ」と壁つくってた。 「あなたが一番いいと思うものつくって」というようにした、始めはおそるおそるだったが、徐々にみんな言える環境になった。 次はみんなが働きたいと思う組織を目指した。 チームを超える横串の場をつくった。 マネージャとかもフラット、ただのロールという認識を広めた。。 組織５０人でもやもやしてることを出した、レトロスペクティブ。  ex.全チームにホワイトボード、プロジェクタ導入、カフェテリアの匂いをなくす   希望者全員CSMの研修にいってもらった。 いけない人向けには大阪に人を呼んだりした。 とりのぞける障害はとった、だから「みんなで大阪の開発部を良くしていこう」 組織というプロダクトを変えた。 ただやる人はいらない。プロダクトオーナーシップをもったスクラムマスター、エンジニアになってほしい。   本編以外のQAへの回答からの抜粋は以下。\n 方向性の違いは否定するのではなく、話し合ってもともとの原因を探る。 取り組みの結果、もともとPO、SM、PMとか全部やってたのをメンバー任せられた。 消極的な人にも参加をよびかける。ほっておかない。定期的な面談とかやるんじゃなく、気付いたらすぐ伝える。  うーん、羨ましい。 質問への回答にも少しあるが、コミュニケーション的な部分でぶつかった壁や解決したことが多々あったんじゃないかと思う。 今の状況ではKPTやるとどんなものが上がっているのか気になる。\nアジャイルコミュニケーションプラログラム ~チームワークに関する心理学的アプローチ~ 「言っても仕方ない」「どうせダメだ」みたいな心境になった人、させる人について対応や原因を考えるセッション。\n例えば、「報告しろ」+「自分で考えろ」という矛盾した指示(ダブルバインド)を出されたりすると、そのような心境をつくる一因になると考えられる。 ペアや4人組でのワークでは、身の回りで起きているコミュニケーション不全の状況を考え、励ましの言葉を考え、それを人から言われてみる、というようなことをした。\nこういうセッションはむずむずするが、ワークと割り切って普段やらないことを試したり、意識できてないようなところを確認できるので面白い。 あーあるある、という状況に名前をつけて認識できるようにする感じ。関連する本を1冊読んでみたくなった。\nクロージング 初日のクロージングは参加者全員で来年度のRSGTのポスター・テーマを考えた。 それぞれ10人程度の9チームに分かれ、意見をまとめ、発表した。\n限られた時間内に焦りながら成果を出そうとする感覚は、マシュマロゲームみたいな印象。 すみません、プロトタイプとか全然つくりませんでした。アイデア考えて、締め切り直前に最終版を書き始めました。\nみなさんどうやって取り組んだろうか？ 振り返りしたチームもあるようだし、自分がいたチームは「だれが」「なにを」期待するイベントにしたいかのアイデアを考えて投票、 それに合うフレーズのアイデアを出し合うようなフローで参加した。\n意外に感じたのは、チーム内で我先にとファシリテーター役出るかと思ったらそうでもなかった。お見合い。 そんな雰囲気の中でも活発に意見を出して、雰囲気をつくっていた女性の方々すごいと思いました。\nDay2 Open Space Technology 2日目は全てOpen Space Technologyの時間。 午前はアイデア募集をして、似たものはまとめて、午後に向けて時間と場所の割り振りをした。\n私は\u0026quot;スクラムで取ると嬉しいメトリクス・数字\u0026quot;というテーマで時間をとらせてもらい、以下のようなアイデアがでた。\n   測定手法・項目 効果     ベロシティ 見積もり精度向上   各タスクが何日で完了したか 見積もり精度向上   \u0008◯◯さんが実施したレビュー回数 特定の人への依存の視覚化   テストカバレッジ 品質   テストの書き出し、実装にかかった時間 工数視覚化?   割り込みタスクの数・かかった時間 見積もり精度向上   バグの数 見積もり精度向上   デモミーティング参加者のフィードバック数 期待値や成果の指標   目標達成できると思う率 心境・潜在タスクの視覚化   TODO・FIXMEコメント、つみのこしタスクの量 潜在タスクの視覚化、理解度の視覚化   コードの静的チェック 技術的負債の視覚化   トラックナンバー 特定の人への依存の視覚化   タスクや開発プロセスが停滞してたとこ共有 特定の人への依存の低減、プロセス上のボトルネックの発見   UATの実行時間 性能保証、変化に気づける   スプリントへの満足度 開発プロセス上の問題発見   問い合わせに返答してる率 対応もれ防止   最終ソースコミット時刻 働く環境の状況が見える   同じ種類のバグを出してないか コード改善    もっとはやくデリバリーしたいと思っても、どこが原因になってるか見えてないことは多いので、 上がったような項目からアイデアを得て改善できると嬉しい。\nLean Coffee ランチの時間にはLean Coffeeを行った。Coffeeは飲んでないけど。 テーマを出し合って、投票して人気だったのテーマから順にディスカッションをする。 7分ごとに議論を継続するか、次の話題に移っていくかの確認がある。\n適度に時間が区切られており、人数も少人数だったのでわりと集中して参加できた印象。\n議論ででたアイデアの中で、\u0026ldquo;メンバーそれぞれがスプリントの名前を出し合う\u0026quot;というのが個人的に面白いと思った。 ビジョンが共有されてなければ、全く違うものが出てそれに気づくだろうし、 見返した時に何をしてきたのか、何が不足しているのかの考えるヒントになる。\nDay3 3日目は以下の4つのセッションがあった。\n Kazumasa EbataさんのPromotion of Growth Led by Scrum. ~ Road to Agile/KAIZEN. Improve THE Experience for Challenger ~ 森崎 修司さんのレビューの課題と対策、モダンコードレビューの動向 Kiro HARADAさん、Lê Trọng Hiệpさん、Phạm Anh ĐớiさんのState of Agile / Software Dev in Vietnam and relationship between Japan and Vietnam Mary Gormanさんのアジャイルな発見プラクティスを革新し、活性化させましょう Innovate and Invigorate Your Agile Discovery Practices  Promotion of Growth Led by Scrum. ~ Road to Agile/KAIZEN. Improve THE Experience for Challenger ~   日本の状況は誤った情報が多い印象。 自分の本もスクラムに色付けしたもの。 今から学ぼうとするとミスリーディングが多い。正しい情報が多い状況をつくっていきたい。 スクラムを選択肢にいれてほしい。   ◯◯ブートキャンプとか◯◯サムライも誰かが経験したもの。 第一ソースに会う機会を増やしていったほうがいいと感じる。   奴隷になってる。会社やスクラムの。 スクラムだからではなく、スクラムの目指してるものを考えれてるのか。   Ken Schwaberのgoogleでの動画から分かるように、透明感、３ヶ月後とかの状況を知る、把握するためのツール ビジネスを成功させるものではない できない人がやって数ヶ月後ほとんど何も完成してないだろう、それがわかる   改善したい人のペルソナを考える 飢餓感タイプか(圧倒的当事者意識くん) 危機感タイプか(やればできるこ) 飢餓感タイプは与えることに抵抗ない 危機感タイプはいただければやります、ひどいともうほっといてください   飢餓：「忙しいからほっておいてくれ！」 危機：「トラブルさえなければいい」 どちらもなにも求めてない。どちらもスクラムほしがってない。   飢餓：あなたの望みの助けになるよ、と伝える。 危機：なんで重要なのかというイメージもってもらう。イメージさえできればできる。 アプローチは対象によって違う   えばたさんは危機感タイプ。だから本場に行くことで危機感を覚えるように動く フィードバックは\u0026quot;言う\u0026quot;ことだけではない。なんでも言ってたら、それはただの独り言 適切に行動を変える刺激を与えたり、与えなかったりすること 挑戦する場がなければ人は動かない   スクラムにはフィードバックが組み込まれてる ルール通りにやることで、８割方のフィードバック得られるはず   スクラムスレーブ(奴隷)になる。どうやって未来をつくっていくのかを考えないと。 ブラックボックスな状態でスクラムやります、は仲間をつくらない。   スクラムでプロダクトよくなるは嘘。または、あくまでも特定の状況での事例にすぎない。 機会を多くして、プロダクトよくする機会がふえるだけ。   チームもいきなり成長することはない。 スクラムは現状をつきつけて残酷。ベロシティとか。   「組織が違うんです。頭でっかちいるんです。」 じゃあ働きかけていきましょう。キーパーソンに。スクラムにはそういうことを考えるきっかけがあるだけ。   勇気をもって未来をつくってほしい。未来はリスクある。そこにいる人が勇気を持たなければならない。 スクラムやったからよくなるとは限らない。   公演中に紹介されていたKen Schwaberさんの動画は多分これ。\n  また、メモ上では大分省略しているが、 2タイプのペルソナに対して継続・ゴール設定といった状況に合わせた具体的なメッセージの紹介があった。\n周りの方々を見ていてもそうだが、1次ソースに触れるというのは大事なんだろうなあと感じた。 また、2タイプにわけて考えるという切り口は面白い。 相手の求めるフィードバックに役立つのはもちろん、自分がどっちかを意識しておくことで、人との違いに変にイライラせずに済みそう。\nレビューの課題と対策、モダンコードレビューの動向  モダン: どの時点でのモダンかわからない。 例えば\u0026quot;新\u0026quot;喜劇。\nエンピリカルソフトウェア、フィードバックを基にした研究。\nソフトウェアレビューの目的：\n 不具合の修正コストの低減 保守性向上 状況把握と承認  レビューは指摘ポイントの自由度高く、本質的な欠陥の指摘が少ない。\nアンチパターンの例:\n コードの前半ばかり見てる 作り直してやろうかと考える 時間があるだけやり続ける 人間関係の持ち込み 見栄の張り合い、「なにか言わないと」 人格攻撃、「センスないね」  ある研究の結果:\n 機能的な問題(21.4%) 保守上の問題(71.1%)  教科書的な対応としては、レビューする前に目的を定義する。\n 命名規則 ユーザビリティ 性能問題  そのための方法:\n コードレビュー 手動テスト テストコード、テスト自動化   見つけると効果ある(定数を右に書くかどうかは効果低そう) コスト減らす(特殊な状況だけ起きるものとかカバー) あとあと拡張しやすくする（プラグインにするとか）  リーディングテクニック:\n シナリオを用意して個々に割り当てる 先にシナリオはチームで合意しておく  ex.メモリリークないか(確保と解放の数あってるか)、無停止でデプロイできるか    シナリオのメリット:\n 限界を知って割りきれる。「初めてやるし仕方ない」 問題の指摘するふりした攻撃とかを減らせる。    唯一の正解があるわけではない\n  身の丈にあったシナリオ設定する\n ex.鉄道のシステムとかつくるのと違って、絶対に落ちないアプリそれほど求められてない    タブとかスペースの数は息の長くないモジュールにやっても仕方ない\n  が、OSSだとちょっと違う\n  メンテナがいないと滅びるのでevolvabilityが重視される\n   アジャイルでなくても信頼、助け合いは必要 言葉の端々への配慮必要 態度を変えさせるための指摘してはだめ  新人向けの注意:\n 問題指摘されても自分の批判と考えないように 「知ってました」「そうでしたっけ」と照れ隠ししない 厳しい批判に「自分でやってください」と逆上しない 「本質的でない」と逆批判しない  モダンコードレビューは:\n パスアラウンドに似てる、メールでなげて回覧板みたいにするやつ OSSのコードレビューに似てる  欠陥検出以外に・・\n 情報共有 透明性向上 代替実装方法の検討 良い点、続けてもらいたいことも積極的に伝える  グーグルでのコードレビュー:\n 目的は協調であり、欠陥検出ではない コーディングプロセスの一部として統合されてる  メリット\n 修正時間を短くする 新人の教育 信頼感の醸成  グーグルのツール:\n mondrianというツールで管理 OSSクローンのrietveldがある  シスコでのコードレビュー:\nシスコでのコードレビューも小さくたくさんやってる感じ\nMicrosoftはcodeflowというツール。mondrianやgerritと似てる。\nコードレビューに期待することアンケートでは\n 保守性 情報共有 やってること見える化  あたり上位にきてた。バグ見つけるだけじゃない。\nモダンコードレビューでの注意点\n 断片でみるので全体での一貫性や整合性が見落としがち 些細な指摘ならないシナリオ設定 誰かがみるだろうと放置 特定の人に集中する   Githubなどで利用されているプルリクエストがちょうどモダンコードレビューに当たるとのこと。\nなんでプルリクという形に落ち着いてるのか考えるきっかけになる。 また、どうしてOSSでは保守性が重視されるのか、という切り口は面白いと思った。\nそして紹介されていたアンチパターンは、耳の痛いものばかり。。\nState of Agile / Software Dev in Vietnam and relationship between Japan and Vietnam   ベトナムの現状、手法やhowが多い value driven development これからwhyに変わっていくだろう  問題:\n まずは信頼が大事。コードの品質よりも大事だとおもう。  日本はレポート多い。下手すると毎時間。   言葉の壁。定義されてない期待。  ex.５分早くミーティングにいくべき。とか やりたいこと(日本語)-\u0026gt;仕様書(日本語)-\u0026gt;ベトナム語と、たくさんの変換    POをオフショア先に置くのが一つの解決策では。 プロキシPOではなく。スクラムチームまるごとをオフショア先におく。\n プロキシする人が多いとややこしいというのは共感。 依頼側も依頼される側も「信頼関係を築きたい」と考えている状況ならもっとシンプルになりそう。\n今回の発表者のお二人もそうだし、紹介されていたベトナムでのイベントはとても盛り上がっている印象を受けた。 ベトナムでは多くの講演が英語らしい。 ベトナム行きたい。\nInnovate and Invigorate Your Agile Discovery Practices   多くのチームは一度ディスカバーに時間を費やした後、多くの時間をデリバリーに費やしている ディスカバーとデリバリーのフローは断絶されてるべきではない。 そしてジャストオンタイムであるべき。   inovate(革新) + invigorate(活性化)   一般的なストーリーはユーザーとアクションから構成される   要件は機能要件と非機能要件に分けられる それらの要件をさらに7つに分解したのが\u0026quot;7 product demensions\u0026rdquo;(プロダクトの7側面)   チームはinterdependent(互いに依存している状態)がよい 独立状態でもなく 依存でもなく(一方的な)   イメージを共有するために、より視覚的に考えるべき 実際に7側面を考える場を設けるとそれはエネルギッシュで騒がしい場になる \u0008- ディスカバーすることでモチベーションも高まる   今回紹介されたDtoD本は日本語に翻訳されている。紹介動画もある。\n  イメージ的にはスコープや要件に新たな切り口を定義する感じだろうか。\n 発表者の方々はHowではなくWhyを語る人が多い印象を受けた。 ただ、Howを実践することでWhyを発見することはあるはず。 一方で、もっと人やプロダクトの価値にもっとフォーカスすべきだなあと感じた。\nベトナムの方々は強いインパクトがあった。 彼らはスクラムの未来を考えよう、とビジョンやマインドを語っていたし、若かった。ベトナムのIT業界の平均年齢は27歳らしい。\n今回のイベントに参加して、本家アジャイルカンファレンスにも行きたくなった。\n最後に、実行委員の皆様ありがとうございました。\n","permalink":"https://256days.com/post/2015-03-01-scrumgatheringtokyo-2015/","summary":"\u003cp\u003e\u003ca href=\"http://2015.scrumgatheringtokyo.org/\"\u003eRegional Scrum Gathering Tokyo 2015\u003c/a\u003eに参加した。\u003cbr\u003e\n3日分の発表内容メモと感想のまとめ。長い。\u003c/p\u003e\n\u003cp\u003e3日間のイベントで、初日は主にスクラム実践者の方々のセッション、2日目はオープンスペーステクノロジーというディスカッション形式、\n3日目はコーチや本の執筆をされている方々からのキーノートという構成。3日目のみ有料だった。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.facebook.com/ScrumGatheringTokyo\"\u003ehttps://www.facebook.com/ScrumGatheringTokyo\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://twitter.com/search?q=%23rsgt2015\"\u003ehttps://twitter.com/search?q=%23rsgt2015\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","title":"Regional Scrum Gathering Tokyo 2015に参加した"},{"content":"パリに滞在していた際に、便利だったり面白いと感じたアプリやサービスの紹介。\n パリ生活に役立つアプリ  Citymapper - 街中の移動に役立つアプリ FlashInvaders - 街を歩くのが楽しくなるアプリ Le Fooding - パリのレストラン探し Vivino - ワインの記録のお供に AlloCiné - 映画を観たくなった時に PriceMinister - ネットでお買い物   旅行に役立つアプリ  Capitaine Train - 列車の予約 Skyscanner - 飛行機の予約 Booking.com - 宿の予約   その他の気になったサービス達  車の貸し借り 日本語の勉強    パリ生活に役立つアプリ Citymapper - 街中の移動に役立つアプリ   iOS: https://itunes.apple.com/app/id469463298 Android: https://play.google.com/store/apps/details?id=com.citymapper.app.release  これはパリで最も重宝したアプリ！ Google Mapsも十分便利だけれど、Citymapperは自転車やバスも含めて検索してくれるところが良い。\nパリではレンタル自転車のVelibが随所に設置されていて簡単に利用できることともあり、 自転車も含めてルート検索したくなるのだけれど、このアプリなら簡単に検索して比較できる。\nまたVelib乗り場で使用可能な自転車の数や、駐車先の場所や空き状況も表示してくれるのも嬉しい。\nVelibのオフィシャルアプリ(iOS / Android)もあるけれど、結局Citymapperがあればほとんど使う機会は無かった。\n車でお出かけの際はWaze(iOS / Android)をナビに使ってる人も多い。\nFlashInvaders - 街を歩くのが楽しくなるアプリ   iOS: https://itunes.apple.com/jp/app/flashinvaders/id895180919 Android: https://play.google.com/store/apps/details?id=com.ltu.flashInvader  Citymapperに次いで使用率の高かったアプリ。\nインベーダー氏が街中に設置したインベーダーを模したストリートアートを写真に収めると、 ポイントが貰えるというアプリ。\n見つけると嬉しいので、やり始めるとついつい街を歩きながらも外壁を見ながら歩いてしまう。 インベーダーは、ビルの最上階や水路の壁など、「どうやって置いたの？」と思われる場所に潜伏していたりする。\n特にポイント集めたら何か貰えるわけでもないのだが楽しい。 そして、1人でやるよりも誰かと見つけたインベーダー情報を交換しながらやる方が楽しい。 ときどき、写真を撮っていると他のインベーダー収集家と、「あっちの壁にもいたよ」といったコミュニケーションも生まれたりする。 個人的にはアプリのドット感も好き。\nインベーダー氏は世界中で3069匹、計62都市でインベーダーを設置したらしく、 パリには1135匹ものインベーダーがおり、完全に本拠地。 東京にも138匹いるらしい。\nInstagramやYoutubeでは、潜伏しているインベーダーの写真・映像が見れる。 「え、そこにいたの！」と普段通っている道でも新たな発見があるかもしれない。\nちなみにパリではインベーダー以外にもたくさんのストリートアートを見かけ、 パリの人々にはラクガキというよりはちゃんとアートとして受け入れられているように感じた。\nLe Fooding - パリのレストラン探し  旅行先で人気のスポットを探す際はTripAdvisorが便利だけれど、 パリのレストランで検索するとあまりにも候補が多すぎて使いづらい。\n美味しいレストランを見ていると、Le FoodingやTime Outに取り上げられていることが多いので、 これらのサイトから情報を探すと良いだろう。\nフランス語が分かる方にはAllorestoも良さそう。\nVivino - ワインの記録のお供に  iOS: https://itunes.apple.com/jp/app/vivino-wine-scanner/id414461255 Android: https://play.google.com/store/apps/details?id=vivino.web.app  フランスで見つけた美味しいワインの記録にはこのアプリ。 ワインのラベルをこのアプリで撮ると自動で種類や年度を記録してくれて便利。\n似たようなアプリだとVinica(iOS / Android)もある。\nAlloCiné - 映画を観たくなった時に  iOS: https://itunes.apple.com/jp/app/allocine/id351184863 Android: https://play.google.com/store/apps/details?id=com.allocine.androidapp  観たい映画を上映している映画館を調べたかったり、 近くの映画館で上映している映画を調べたいときに便利なアプリ。\nアプリとは関係ないが、パリの映画館ではフランス語吹き替えのVFと、フランス語字幕のVOが上映されている。 VOは元の音声が英語とは限らない。ホビットの冒険を見たときは、音声はエルフ語で字幕はフランス語、という場面もあった。\nPriceMinister - ネットでお買い物  iOS: https://itunes.apple.com/jp/app/priceminister-faites-vos-achats/id579373363 Android: https://play.google.com/store/apps/details?id=com.priceminister.buyerapp  ネットショッピングができるアプリ。 時々、30%ほどポイントでキャッシュバックしてくれるイベントをやっていたので、その際にキーボードやスマホの充電器を買った。\n最近、流行っているらしいのがLeboncoin(iOS / Android)。 決済システムがなく、売りたい人が電話番号等の情報を載せて、買いたい人が取りに行くというシンプルなサービスだが、 家具など梱包して送るのが難しいものを売るのによく利用されているようだ。売る際に手数料なども発生しないのも嬉しい。\n旅行に役立つアプリ Capitaine Train - 列車の予約  iOS: https://itunes.apple.com/fr/app/capitaine-train-train-tickets/id599502670 Android: https://play.google.com/store/apps/details?id=com.capitainetrain.android  フランスの公共交通機関であるSNCFのオフィシャルアプリもあるが、\n Captaine Trainの方がSNCFより操作しやすい Captain Trainでしか表示されないチケットや、Captain Trainの方が安いということがある  という理由からオススメ。\n出発地や目的地の駅名がわからなくても、 例えばパリからモンサンミッシェルに行きたい場合は\u0026quot;Paris -\u0026gt; Mont Saint Michel\u0026quot;という風に行きたい地名を入れれば目的の列車を見つけられる。\nSkyscanner - 飛行機の予約  iOS: https://itunes.apple.com/jp/app/sukaisukyanaha-ge-hang-kong/id415458524 Android: https://play.google.com/store/apps/details?id=net.skyscanner.android.main  少し遠出する際に安いフライトを見つけたいときに使えるアプリ。\n各航空会社が提供している期間限定の値下げキャンペーン等と比較すると最安のチケットとはいかないかもしれないが、 比較的安いチケットを見つけることができる。\n実際はWeb版を使うことが多いのだが、検索もしやすく重宝する。\nBooking.com - 宿の予約 iOS: https://itunes.apple.com/jp/app/hoteru-yu-yueno.1-bukkingudottokomu/id367003839 Android: https://play.google.com/store/apps/details?id=com.booking\n宿泊する宿を探すのに便利なアプリ。\n宿によっては当日のギリギリの時間までキャンセル料が不要であったり、 支払いは現地でカードで払えばよかったということで、前日・当日に宿を探すというような場面でお世話になった。\n複数人で長く滞在する、まだ出発まで時間があるという場合はAirbnbで部屋を借りるのも良い。 私がAirbnbを利用した時はホストの人が優しかったので、 近場のお店を教えてくれたり、一緒にビールを飲んだりした。 そういったコミュニケーションが生まれるのもAirbnbの良いところ。\nその他の気になったサービス達 車の貸し借り BlaBlaCar\nBlaBlaCarは誰かの車に相乗りさせてもらうサービス。 レンタルカーを使うよりも安く旅行ができるよ、ということでオススメされた。 他にも似たようなサービスで、相乗りではなく車自体を借りるサービスもある。\nTravelerCar\nその一つがTravelerCar。これは、旅行する際に空港に車を駐車する代わりに自分の車を別の人に貸すというサービス。 空港の駐車代は高いので、貸す側は駐車代を浮かせることができ、借りる側は安く車が借りられるというwin-winを生むサービス。\n日本語の勉強 Obenkyo\n日本語を勉強しているフランスの方々が使っていたアプリ。\n 以上！\n","permalink":"https://256days.com/post/2015-02-06-useful-apps-in-paris/","summary":"\u003cp\u003eパリに滞在していた際に、便利だったり面白いと感じたアプリやサービスの紹介。\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eパリ生活に役立つアプリ\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#citymapper\"\u003eCitymapper - 街中の移動に役立つアプリ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#flashInvaders\"\u003eFlashInvaders - 街を歩くのが楽しくなるアプリ\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#le-fooding\"\u003eLe Fooding - パリのレストラン探し\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#vivino\"\u003eVivino - ワインの記録のお供に\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#allocine\"\u003eAlloCiné - 映画を観たくなった時に\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#priceminister\"\u003ePriceMinister - ネットでお買い物\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e旅行に役立つアプリ\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#capitaine-train\"\u003eCapitaine Train - 列車の予約\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#skyscanner\"\u003eSkyscanner - 飛行機の予約\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#booking-com\"\u003eBooking.com - 宿の予約\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eその他の気になったサービス達\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#car-sharing\"\u003e車の貸し借り\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#study-japanese\"\u003e日本語の勉強\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e","title":"パリ生活を楽しく便利にするアプリ９選"},{"content":" \u0008\u0026quot;【ハンズオン】初めてのUnityで作る「3D野球盤」APC勉強会 #14\u0026quot;に参加してきた。\n当日の資料はこちら: http://www.slideshare.net/apc_8a1/8a120150204-unity\n上記の資料に沿ってUnityで3D野球盤を作ってきた。 資料がスクリーンショットを交えながら丁寧に作られていたし、 事前にオブジェクトやスクリプトが用意されていたこともあって、ちゃんと動くところまでいけた。 細かい操作で詰まっても質問してすぐに解決しながら作成できたのも良かった。 今回使用させてもらったオブジェクトやスクリプトが含まれるパッケージは、パスワード付きのリンクだったのでここには貼ってない。\n今回のハンズオンでスクリプトの定義方法、コンポーネントの追加の仕方、Assetsの登録方法など基本的な操作が理解できた。\n今回は時間短縮のためにパッケージで済ませた、 オブジェクトやゲームスクリプトの作成でトライ\u0026amp;エラーを繰り返していたら、 とても１時間程度では終わらなかったと思う。\nほとんど用意されていたものを使ったとはいえ、動くとやっぱり嬉しい。\nUnityで作成したアプリなので、この野球盤アプリはAndroidでも動いた。 ただ、ラップトップではキー操作で動く部分が、Androidでは画面タップにする必要があるのでそこは修正しないといけない。\n","permalink":"https://256days.com/post/2015-02-04-unity-workshop/","summary":"\u003cfigure \u003e\n    \n        \u003cimg src=\"https://lh6.googleusercontent.com/-jREUCZKPIRA/VNIwE0Q0JBI/AAAAAAAAR_A/bkdtFf09lvE/w1056-h692-no/unity-baseball-game.png\"  /\u003e\n    \n    \n\u003c/figure\u003e\n\n\n\u003cp\u003e\u003ca href=\"http://8a1-apc.connpass.com/event/11282/\"\u003e\u0008\u0026quot;【ハンズオン】初めてのUnityで作る「3D野球盤」APC勉強会 #14\u0026quot;\u003c/a\u003eに参加してきた。\u003c/p\u003e","title":"Unityで3D野球盤を作った"},{"content":"Paris Tech Talks #8 に参加してきた。 Paris Tech Talksは新しい技術や事業の紹介をする場。 Paris.rb に続きパリでは2回目の勉強会参加になる。 珍しく英語開催のイベントということもあって参加してみた。\n セッション Detctive.io Detctive.ioというデータジャーナリズムを扱うサービスの紹介。\nサービスの裏側ではNeo4jとDjangoを使用していて、neo4djangoを使っているらしい。 ただ、neo4djangoはまだ使える機能が限られており困っているとのこと。\nwebプラットフォーム開発コミュニティ 共通環境でのブラウザテストや標準化をするコミュニティの話。\n十分なテストや、ライセンスにCCを用いたり、開発練習の場としてスナップショットを用意したり、トピックブランチを活用してもらうというような取り組みで人を増やそうとしているとのこと。\n関連リンク:\n http://extensiblewebmanifesto.org/ http://www.webplatform.com/  Platform.sh Ori pekelmanさんによるPlatform.shの紹介。\nGitにpushするだけでデプロイとかできる、という趣旨のサービス。 懇親会で話を聞く限り、発表者の方は開発ミートアップイベントの常連さんらしい。\nドットカンファレンスの紹介 パリで開催されるdotGO、dotCSS、dotJSの紹介。\n割引コード紹介や、dotJS prizeの紹介があった。 dotJSプライズはOSSならノミネートできるとのこと。\nその他にも以下のイベントが近くパリで開催される。\n Rails Girls Scala.io dotSwift  Pulsar Pulsarという開発中のビデオストリーミングソフトの紹介。\nKodi(XBMC)の上で動くtorrentの検索、ストリームエンジン。 Raspberry Piでも動くらしく、Chromecastのような機器も開発中とのこと。\n関連リンク:\n https://github.com/steeve/script.pulsar.dummy http://forum.xbmc.org/showthread.php?tid=200957  イベント運営 会場はDeezerのオフィスだった。 Deezerは音楽ストリーミングサイトで、日本とアメリカでは展開していない模様。\n    会場にはキッチン、ソファ、テーブルサッカー等があり、カジュアルな雰囲気。 オフィスの雰囲気がなさすぎて何度か前を通り過ぎてしまった。\n登録221名に対して、実際の参加者は100名程度だったように見えた。\nピザもビールも十分あったのでお腹いっぱいになった。 ピザとビールはスポンサーによって提供。ありがとうございます。\nいろいろなビールが用意されており、私はDelirium Beerというのをいただいた。ありがとうございます。\n スライドの位置は少し低めだったので、後ろの席の方々はときどき立ち上がって資料を確認していた。\n 懇親会  知ってる人がいないので、ピザをいただきつつよしおかさんメソッドで何名かの方に話を聞いた。\n話の中ではDevOpsという単語と共に、Puppet、Chef、AnsibleやSaltの名前があがっていた。あとはDocker。\nまたMailjetというサービスで働いている方にどの言語でサービスを実装してるか聞いた所、Free Pascalという回答がきて驚いた。 メールを処理する時にバッファオーバフローが起こらないから安全なので使っている、というようなお話だった。\nストレージに興味があるなら、Paris DataGeeksというミートアップがオススメとのこと。\n 英語のミートアップではあったが、フランス語が喋れると活動の幅が広がるだろうなあ、改めて感じた。\n","permalink":"https://256days.com/post/2014-09-22-paris-tech-talks-8th/","summary":"\u003cp\u003e\u003ca href=\"http://www.meetup.com/Paris-Tech-Talks/events/206595892/\"\u003eParis Tech Talks #8\u003c/a\u003e に参加してきた。\nParis Tech Talksは新しい技術や事業の紹介をする場。\n\u003ca href=\"http://matsue.github.io/blog/2014/08/06/paris-dot-rb/\"\u003eParis.rb\u003c/a\u003e に続きパリでは2回目の勉強会参加になる。\n珍しく英語開催のイベントということもあって参加してみた。\u003c/p\u003e\n\n\u003cfigure \u003e\n    \n        \u003cimg src=\"https://lh3.googleusercontent.com/-a9Jgv7TzM-A/VCCTzKMc0mI/AAAAAAAAFGk/wa4WihFt4fg/w924-h693-no/_20140922_194645.jpg\"  /\u003e\n    \n    \n\u003c/figure\u003e","title":"Paris Tech Talks 8th に参加した"},{"content":"ツール・ド・フランス2014を見てきた。参加してから時間が経ってしまったが、情報が少なくて困ったので次に行く時のためにも記録に残しておく。\n 会場の様子 2014年は女性のレースと男性のレースが同日に開催されていた。\n男性レース開始時の動画はこちら。空にフランスの国旗色の雲が描かれたあとに選手達がシャンゼリゼ通りに入ってきた。\nウェアやお土産が売られている様子。\n NetAppがスポンサーになっているレーサーの置物も売っていた。\n レース前は様々な装飾をした宣伝カーが凱旋門の周りを走る。\n 凱旋門付近のスピーカーからは基本的には実況が流れているが、男子レース開始までの待ち時間には以下のような曲も流れていた。\n Paris - David Guetta Roadgame - Kavinsky Wake Me Up - Avicii Baby I\u0026rsquo;m Yours - Breakbot Feat. Irfane Love Is Gone ［fred Rister \u0026amp; Joachim Garraud Remix］ - David Guetta Canned Heat - Jamiroquai  時間について 16時頃から割と混んできていたので、場所取りをするなら早めに。\n 女子レース開始: 12:40頃 女子レース終了: 15:00頃 男子レース開始: 18:00頃にシャンゼリゼに到着 男子レース終了: 19:15頃  シャンゼリゼ付近の地図情報 レースは基本的にシャンゼリゼ通り付近がメインだが、スタート地点や駅の位置、封鎖されているエリアを載せたマップを作った。\n今回はセーヌ川沿いを歩いて会場に向かったが、封鎖エリアがあったりするので、メトロを使ってFranklin D. RooseveltまたはGeorge Vから行くのが楽だったと思う。\n気をつけること 南北間の移動が難しい レース当日、シャンゼリゼ通り付近の道路は大量の警察官によって封鎖されている。 特にレースの中心となるシャンゼリゼ通りの南北間を移動出来る場所は限られていて、メトロの駅(Franklin D. RooseveltまたはGeorge V)を通過するか、凱旋門をぐるっと回るしかない。\n人員を総動員していると思われるが、他の場所の治安は大丈夫なのだろうか。\n 運行してないメトロの駅があるかも 今年はChâteletの駅が工事中で電車が停止しなかった。 凱旋門付近は1番線が通っているのだが、Châteletの駅は1番線に他の4本の線から乗り換えできる大きい駅だ。 ここが使えなかったため、割と歩くことになってしまった。\n駅の工事は夏のバカンスの時期に合わせてやることが多いと聞いたので、7月開催のツール・ド・フランスの場合、他の年度でも注意した方がいいかもしれない。\nトイレが混んでいる パリには所々に公衆トイレが設置されているが、イベント当日はかなり並んでいたので注意。  参考にした情報 こちらのパリナビの2011年の記事が参考になった。 http://paris.navi.com/special/5036009\nネット上ではツール・ド・フランスとはなにか？という情報は見つかるが、時間や開催エリアの情報は日本語だとほとんど見つからなかった。 日本語でパリの情報を探すと、大抵パリナビの情報に辿り着く。お世話になってます。\n もし参加するときはピクニック気分で椅子やご飯を持って、ゆったりとした気持ちで気長に参加するのが良いと思う。\n","permalink":"https://256days.com/post/2014-08-21-tour-de-france-2014/","summary":"\u003c!-- raw HTML omitted --\u003e\n\u003cp\u003eツール・ド・フランス2014を見てきた。参加してから時間が経ってしまったが、情報が少なくて困ったので次に行く時のためにも記録に残しておく。\u003c/p\u003e\n\n\u003cfigure \u003e\n    \n        \u003cimg src=\"https://lh5.googleusercontent.com/-ZcLe3k1MgD0/U_ZgOG6vTxI/AAAAAAAADK4/5JIari_rhcM/w955-h716-no/_20140727_133707.jpg\"  /\u003e\n    \n    \n\u003c/figure\u003e","title":"Tour de France 2014を見てきた"},{"content":"7月より期間限定でパリにて勤務しており、せっかくの機会なのでParis.rbに参加してみた。 今回、Meetup経由で申し込みをして参加した。 http://www.meetup.com/parisrb/events/146763542/\n 19時半開始と書かれていたが最初の時間はピザ\u0026amp;ビールの時間だった。話してくれる方を見つけてSwiftのOptional型の話などしているうちに21時からセッションタイムへ。\nちなみにパリは今22時頃まで外が明るい。\n セッションは23時ごろまで開催していたと思われる。発表としては\n AirCallの話(採用？) アジャイルの話 RioでのRubyの話  などなどがあった。当然ながらほとんどがフランス語の資料であったり、字の少ない資料でのプレゼンだったので現状のフランス語力では理解が難しかった。残念。\nかろうじて資料が英語だったRails Tipsの内容のメモは以下。\n skip_before_actionはなるべく避ける Respondersを使う less redirect_to more respond_with less instance variables decent_exposure gem before_actionはリダイレクトや認証処理だけに使うようにしている sinatra-param gemでvalidation rails-param gemの紹介  感想としては、どのセッションも詳細は分からなかったが、扱っているテーマと日本と大きく異なっていないような印象をうけた。\nそれと話が始まってからはラップトップや携帯を触る人は少なく、熱心に話を聞いている人が多いのが印象的だった。\nあと、先に懇親会があって、セッションが21時スタートというのは日本ではあまりない気がする。\n 追記 運営周りについて簡単に追記。\n置かれていたピザとビールはスポンサーがついていたようで、参加者はお金を払っていない。ただ、開始から1時間たたないうちにほぼ無くなっていたので食べ損ねてしまった。\n参加者は80名程度程で登録は120名ほどあったかと思う。思った以上に人が多かったため、はじめはキャンセル待ちだったが最終的には参加することができた。\n","permalink":"https://256days.com/post/2014-08-06-paris-dot-rb/","summary":"\u003cp\u003e7月より期間限定でパリにて勤務しており、せっかくの機会なのでParis.rbに参加してみた。\n今回、Meetup経由で申し込みをして参加した。\n\u003ca href=\"http://www.meetup.com/parisrb/events/146763542/\"\u003ehttp://www.meetup.com/parisrb/events/146763542/\u003c/a\u003e\u003c/p\u003e\n\n\u003cfigure \u003e\n    \n        \u003cimg src=\"https://lh3.googleusercontent.com/-XVtwd3k_TpI/U-FKfo99LFI/AAAAAAAACK8/1mtcslNTBTU/w955-h716-no/_20140805_211811.jpg\"  /\u003e\n    \n    \n\u003c/figure\u003e","title":"Paris.rbに参加した"},{"content":"ストックホルムで開催されたErlang User Conference 2014に参加した。\n  The flag of sponsors ato Erlang User Conference 2014   大変有難いことにLeoFSのセッションの一部で、7分ほど登壇させていただいた。\n私が話したのは主にLeoFSのユースケースで、\n 現時点で600TB程度のディスク総量でクラスタを組んでいる  データセンター間のレプリケーション機能を使っていきたい   社内のファイル共有にownCloudをLeoFSと組み合わせて使っている  各国のグループ会社との動画の共有などに使われている    というようなことを紹介した。\n私たちのセッションには30名ほどの方が聞きにきてくれていたかと思う。\nDay1 初日は以下のセッションに参加した。\n Welcome to the Erlang User Conference! Keynote: Composing a Functional Community (Katie Miller) Scaling and High Performance Storage System: LeoFS (Yosuke Hara) =\u0026gt; 発表 The Last REST Client You Will Ever Need (Loïc Hoguin) Concuerror: Into Real Code (Stavros Aronis) Building a Distributed Data Ingestion System with RabbitMQ (Alvaro Videla) Building a Cloud with Erlang and SmartOS - How Hard Could it Possibly Be? (Heinz Gies) Locks - Erlang-style Scalable Distributed Locking (Ulf Wiger)  Composing a Functional Community 初日のキーノートはLambda Ladiesという関数型言語の女性コミュニティから、Katieさんによる発表。\nFP(Functional Programming)コミュニティの発展には以下が必要というお話でした。\n Education ビギナー向けの教育 Safe space ハラスメント対策とか Mentoring 励ます メンティーはメンターになっていく  今のテックスペースやコミュニティはデフォルトで男性向けである話や、実際に女性達が感じていることが紹介されていて、ほとんど男性で埋まっていた会場に対してパンチの効いた発表。\nHaskellによる6つのソートアルゴリズムがプリントされたギークドレスも印象的でした。\n 発表者プロフィール: http://www.erlang-factory.com/euc2014/katie-miller スライド: http://community.codemiller.com/#/  The Last REST Client You Will Ever Need webサーバのcowboyの開発者であるLoicさんによる発表。\nREST APIに使うMedia TypeにJSON、Msgpack、HTML、XMLに代わってBEDというのを考えてるよ、という話。\nMedia Typeは独自の定義が使えるので、以下のようなタイプを提唱していた。\n application/x-bed application/x-bed-stream  バイト数は短く、圧縮もなしで、relationも定義できて・・というようなものを目指しているよう。\n現時点では構想の段階でレポジトリはないが、プロジェクトは作成されている。 https://github.com/bed-project\nヘルプ絶賛募集中とのことなので、BEDが気になった方はLoicさんにコンタクトをとるといいと思う。\n 発表者プロフィール: http://www.erlang-factory.com/euc2014/loc-hoguin スライド: http://ninenines.eu/talks/bed/bed.html  Building a Distributed Data Ingestion System with RabbitMQ \u0026ldquo;RabbitMQ in Action\u0026quot;の著者のAlvaroさんによるRabbitMQのデザインパターン紹介。\n複数のDC間でのログ集めにRabbitMQを使ってるらしい。\nスケールしていくにはFederation Pluginを使うといいよという内容。\n性能が必要だが、メッセージのロスが許されるような場合はno-ackモードという選択肢もあるとのこと。\n以下のデモページでメッセージが分配される様子を紹介しながらの発表だった。\n デモ実行ページ: http://tryrabbitmq.com/ デモのソース: https://github.com/RabbitMQSimulator/RabbitMQSimulator  各workerにメッセージが分散される様子を見れるデモページは、ついついポチポチ押したくなってしまう。\n正規表現を使ってのメッセージの内容に応じたルーティングもできる模様。\nFedarationを使った分散の例は以下のリンクでもJavaのコードを交えて紹介されているようだ。 http://jaxenter.com/distributed-log-aggregation-with-rabbitmq-federation-49154.html\n 発表者プロフィール: http://www.erlang-factory.com/euc2014/alvaro-videla スライド: http://www.erlang-factory.com/static/upload/media/1402395255933144rabbitmq_data_ingestion_euc.pdf  Day2 二日目に参加したセッションはこちら。\n Welcome to the 2nd Day of the EUC! Keynote: Erlang, Open Networking, and the Future of Computing (Stuart Bailey) Powering your Web and Mobile Applications (Jordan Wilberding) Monitoring Erlang Systems with WombatOAM (Richard Jonas) Scaling Erlang on 10K or More Cores: An Overview of the RELEASE Project (Simon Thompson) Real-Time Performance at Massive Scale (Francois Orsini) Where Shall I Parallelize? (Tamás Kozsik) Elixir Tooling: Exploring Beyond the Language (Eric Meadows-Jönsson) Latest News from the OTP Team - Kenneth Lundin Announcement of the Erlang User of the Year \u0026amp; the Most Influential Talk of 1999  Elixir Tooling: Exploring Beyond the Language ElixirコミッターのEricさんによる発表。\nはじめにElixirの今年のニュースとして以下の３つを挙げていた。\n version1.0がリリース予定 ElixirConfが開催予定 パッケージマネージャのHexがリリースされた  Mix Mixというのはプロジェクト作成、コンパイル、テスト、などなどをサポートしてくれるツール。 ErlangのrebarやRubyでのrakeやbundleに似たことをしてくれる模様。\n以下のツールを入れると、Mixのコマンドが拡張されるようだ。\n ecto https://github.com/elixir-lang/ecto exrm https://github.com/bitwalker/exrm  ectoはDBのラッパーや管理を提供し、exrmはリリースをサポートしてくれる模様。\nHex Elixirのパッケージマネージャで最近リリースされたばかりのようだ。\nパッケージはS3でホスティングされてるとのこと。\nIEx Erlangでいうところのerl, Rubyでいうところのirbにあたる、Elixirの実行ターミナル。\nIEx.pryを書いておくと実行中のコードの途中でiexに入ってデバッグできるらしい。pryにインスパイアされたものだそうだ。\niexシェルの中ではh Enum.map/2とかするとヘルプも見えるとのこと。\nExUnit tagsやfilter機能を使うと環境毎にテストを分けたり、特定ケースだけ実行することができるようだ。\nまたElixirではdoctestも提供されているとのこと。この形式で書かれたコメントは、後でドキュメントとして生成されるだけでなく、書かれているコードはテストとしての実行もしてくれる。\nStandard library   Stream\n 再帰的にファイルの各行に処理するコードが、eachにブロック渡すだけのコードにできる。 遅延評価されるので必要になったときだけ実際にファイルをオープンしてる。    Agent\n OTPを抽象化してくれるライブラリ    Task\n 非同期に処理をするために使うライブラリ Task.asyncでタスクを作って、Task.awaitで待つ、というような使い方。    発表者プロフィール: http://www.erlang-factory.com/euc2014/eric-meadowsjnsson\n  スライド: http://www.erlang-factory.com/static/upload/media/1402598794815412elixirtooling.pdf\n  Latest News from the OTP Team OTPチームからの17系以降の変更点の紹介。\n 新しいデータ型のMaps binary周りで発生していた、スレッドにおけるブロックが減る ライセンスがEPL(Erlang Public License)からApache License Version 2.0に代わる  ライセンスに関しては以前、Mozilla Public Licenseへの移行も検討されていたようだ。 ライセンス変更にあたり、コミッターの方々にはメールで同意を求めるので\u0026quot;Yes\u0026quot;という準備しておいてね！というようなことを言っていた。\nDay3 最終日は以下のチュートリアルに参加した。\n Introduction to Load Testing with Tsung (Radosław Szymczyszyn) Erlang in Production - Tricks and Tools for Running Erlang Production Systems (Jesper Louis Andersen) Load Testing Made Easy (Diana Corbacho) Deploying and Monitoring Erlang Nodes in the Cloud (Csaba Hoch)    Ericsson Group headquarters   WombatOAMやMegaloadといったErlang監視ツール、ロードテストサポートツールにも実際に触れることができたがこちらはOSSではないようだ。\nIntroduction to Load Testing with Tsung ロードテストツールであるTsungの紹介。こちら、Erlang製のJMeterのようなもの。\nチュートリアルは以下の資料に従い、Vagrantで構築された複数VMを使って行われた。Tsungの資料はあまりないと思われるので貴重だ。\n https://github.com/lavrin/euc-2014 https://github.com/lavrin/tsung-scenarios  Tsungに関するメモ。\n  指定されたユーザ数でランダムなアクセスをシミュレーションできる\n XMPP、TCP、HTTPなどのロードテストができる ログインパスワード指定できる ユーザによってはログインしかしないとかシミュレーションできる パスにIDとかいれてリクエスト生成してくれる    今回のサンプルでdurationが14400 minutesなのは十分に大きくするため\n  ディレクトリ構成やログインユーザ、elrangのcookieなど環境揃っている必要があるが、複数のノードからtsungの実行もできるらしい\n  テストの結果はtsplotとかでグラフにできるらしい\n  テスト時に、ulimit -nの上限に引っかかる可能性あるので注意しておく\n  クラスタでやるときはtsung-controllerというのもあるらしいが、使用には注意らしい(SPOF?)\n  dumptrafficというオプションをオンにすると、大量のログがでるので注意\n  JMeterと違ってErlangなので、テスト時にはerlangのメソッドを直接呼ぶようなテストもできるらしい\n  発表者プロフィール: http://www.erlang-factory.com/euc2014/radosaw-szymczyszyn\n  Erlang in Production 運用者が朝まで寝ていられるシステムをつくるにはどうすればいいかという話。\nまず、システムはいつ壊れるのかという話を\u0026quot;How Complex Systems Fail\u0026quot;というRichard Cookさんの資料を引用しつつ紹介。 たぶん元の資料はこちら。\n紹介されていたライブラリの一部。\n https://github.com/feuerlabs/exometer https://github.com/klarna/circuit_breaker https://github.com/basho/sidejob https://github.com/uwiger/jobs https://github.com/massemanet/eper  上記のライブラリは、Erlangプロセスの情報を収集したり、ジョブスケジューリングをしてくれるもののようだ。\n以降は、使ってるライブラリや設定の話。\nsys.configについて erl -man configでも確認できるがconfigは、他のファイルも読めるので環境ごとのファイルを置いておくようにするといいらしい。\nLager https://github.com/basho/lager\nlogライブラリにはlagerを使って、どこかに集めている。 folsomのデータ飛ばしてるらしい。\nalarm_handler SASLの一部。アラートは自分で定義できて、Nagiosサーバにもデータ飛ばすこともできる。 アラームがオフになる時(?)にlagerに流し込むとかもできる。\nNagiosと組み合わせる際は、ファイル書き出されたステータスをNagiosが定期的に確認するようにしていたらしい。\nos_mon http://erlang.org/doc/man/os_mon_app.html\ncpu usageみたりもできる。mem_supでメモリ使い過ぎ検知もできる。\nfuse https://github.com/jlouis/fuse\nマウントに使うfuseとは別のErlangライブラリ。\nたとえばmysql落ちた時にほかのノードの処理をキックするのに使う。\nFolsom https://github.com/boundary/folsom\nメトリクスのライブラリ。\nデータ転送にはUDP使ってる、リモートが落ちてたり遅いことに影響されないように。\ncounters, gauges, spirals, histogramsなどのグラフが用意されている。\nグラフを見るに当たっての注意点としては、平均を見るのは危険。低い方と高い方に値が固まっているかもしれないので。なので、95th、99thパーセンタイルの情報をみるべき。\nなにを集計する？ 取れるものすべてを集計してる。\n query times internal heavy weight processing API endpoints every cascading subsystem cache hit/miss, あとDBたたいた時にどうだったのか  Tracing / Recon  http://ferd.github.io/recon/ https://github.com/ferd/recon  reconは各pidが何を実行しているかわかるようにしてくれるらしい。 recon_traceでオンラインtracingもできるらしい。\n会場の写真 カンファレンス会場に使われた建物。   The venue of EUC2014   カンファレンス会場では何故かファミコンが置かれていて、グラディウスやボンバーマンをプレイされていた。コナミコマンドは使っていないようだ。   Game space at EUC2014   カンファレンス会場でのランチの様子。   Lunch time at EUC2014   チュートリアルで使われたEricssonの一室。   Tutorial room at Ericsson   Ericssonでのランチ。スウェーデンではサンドイッチの出る場面が多い。   Lunch time at Ericsson   おわりに EUCに参加するのは二度目で、前回は2012年のEUCに参加していた。\n以前は日に何度かあるコーヒブレイクの45分が非常に長く感じられたのだが、今回は会場で知り合った方と話せたこともあってか、あっという間に感じられた。\n英語への敷居が前よりも下がったのかもしれない。コーヒーを取るタイミングで、目が合ったら\u0026quot;hi\u0026quot;と言ってみたりもした。\nわずかだがJoe Armstrongさんとも話せて嬉しい限りだ。\nまた、あまり前回は意識していなかったが、発表者はみんな英語が母国語とは限らない。\nよく聞いていると、言いたいことが出てこなかったり、発音を気にして言い直したりしている。\nヨーロッパの各地から来ている人がいるので、イントネーションも様々だった。\n英語での発表には、多少の不自由を感じながらもみんなやっているのかもしれない。\n最後に、今回の発表・参加にあたってレビューや調整をしてくれた皆様に感謝します。\n","permalink":"https://256days.com/post/2014-06-12-euc2014/","summary":"\u003cp\u003eストックホルムで開催された\u003ca href=\"http://www.erlang-factory.com/euc2014\"\u003eErlang User Conference 2014\u003c/a\u003eに参加した。\u003c/p\u003e\n\n\u003cfigure \u003e\n    \n        \u003cimg src=\"/images/2014-06-12-euc2014/euc2014_sponsors.jpg\" alt=\"euc2014_sponsors\" /\u003e\n    \n    \n    \u003cfigcaption\u003e\n        \u003cp\u003e\n        The flag of sponsors ato Erlang User Conference 2014\n        \n            \n        \n        \u003c/p\u003e \n    \u003c/figcaption\u003e\n    \n\u003c/figure\u003e\n\n\n\u003cp\u003e大変有難いことに\u003ca href=\"http://www.erlang-factory.com/euc2014/yosuke-hara\"\u003eLeoFSのセッション\u003c/a\u003eの一部で、7分ほど登壇させていただいた。\u003c/p\u003e\n\u003c!-- raw HTML omitted --\u003e","title":"Erlang User Conference 2014 に登壇しました"},{"content":"AWSのユーザイベントということで、naoyaさんの自動化の話から始まりました。このセッションが一番印象に残りました。\nコード化された運用は形式知化である。そして手順であれコードであれ、「なんでそうしてるのか？」ということも共有されないといけない。なるほど、なるほど。\n紹介されていたQiita teamは使ったことないけれど、Markdownで書けて、気軽に投稿して、検索可能な情報共有の場があると、たしかに良さそうです。\n以下、イベント参加時のメモです。\n イベント関連link  イベントページ: http://jawsug-tokyo.doorkeeper.jp/events/11269 Twitter: https://twitter.com/search?q=%23jawsug  伊藤 直也さん 資料: https://speakerdeck.com/naoya/sukerusurukai-fa-zu-zhi-falsezuo-rifang-number-jawsug\n手作業はなぜダメなのか 暗黙知になる = 言語化されてないノウハウ\nログ何処にあるか、サーバ止めていいかわからない\nしっかり手順書？いいえ、infrastracture as a code\nコードにするだけでいい？いいえ\nコードにすると\u0026hellip;\n  オブジェクト指向になる。\n  アプリケーション開発の文脈で使える、業務フローが変わる\nフローとはgithubでpull requestとか\n  べきとうである\n  変更が可視化される\n たとえばnginxの設定を変えたとか pull requestないと普段だれも見てない    2時間が10分はそれほど重要ではない\n  属人化して不明なことを減らす\n わからないことには保守的になる。不透明な課金部分とか触れない。 組織のスケールアウトを阻害する    スタートアップの機動力  暗黙知が少ないので自律的に動きやすい(全能感)  フィードバックも得やすく自信を得られる   暗黙知の圧力で保守的になりスタートアップがスタートアップでなくなる  ref: \u0026ldquo;the tweleve factor app\u0026rdquo;\nフロー情報の共有による知識のチーム間の横展開、連鎖\nQiita teamとか\nまだできてないこと  メンタルモデルのコードへの反映  野生動物を見たら危険だと判断するといった判断   「なぜ」が暗黙知化されがち  パーミッションかえる =\u0026gt; なんで？とか そこはドキュメント化するしかない。そこでフロー情報の共有。    質問タイム Q. フロー情報の共有にQiita team以外に試したツールは？ 上手く行かなかった物があるが名前は出せない。wikiのようなもの使っていた。\nwikiだと更新しなかったことも、Qiita teamのようなものだと気軽に投稿できてよい。\n Wantedly株式会社 川崎 禎紀さん サービス開始からの2年間Heroku\nサーバの使い分け\n staging: 本番と同じデータ、デプロイ前のテスト QA: topicブランチのテスト、ユーザなどに見てもらう  travis, circleではなくwercker使ってる\n新しい機能試すこと目的ではなく、ユーザに価値を届けるのが大事にするべし\n Sansan株式会社 宍倉 功一さん Eightの話\nKPI PDCAの効果測定、検証での指標\n評価、状態の共有方法\n メール Dashboard =\u0026gt; ducsdataを40インチディスプレイに映してる その他 fluentd + slash7   株式会社スマートエデュケーション 谷川裕之さん 世界への配信にS3 + CloudFront必須\nMBaasSはParseを参考に自作してる\n ChatWork株式会社 山本 正喜さん RDSにmroogaでラップして検索インデックスつくってる\nmroogaからelasticsearchの導入を検討していたが、amazon cloudsearchを導入予定\nコードはPHPからScalaへ乗り換え予定\n 株式会社nanapi 和田 修一さん logはfluentd\n生でs3へ\nあとはelasticsearch + kibanaで視覚化\n ランサーズ株式会社 田邊 賢司さん  4000人が毎月収入 生活出来るひと: 200人   株式会社アカツキ 田中 勇輔さん CloudFormationのテンプレート: yusuketのgist\nasset_sync gem利用中\nfilepath + MD5をs3にで管理し、ファイル自体はダウンロードせずに存在確認してる\ncloudwatchのアラートをhipchatに送ってる\ngithub/blacklineのプラグイン使用中\n Kaizen platform Inc. 石橋 利真さん 調整さん、plat BCD(ABテストツール)\nリモートワークしてる\nインフラ運用の見える化 暗黙知era =\u0026gt; 見える化era\n事件\n ec2keypairなくなった。 RAILS_ENVはどこ。/etc/profile.d/rail.shで設定されてた。  chef(knife-solo) + serverspec\nref: github時代のデプロイ戦略\n 株式会社ビズリーチ 竹内 真さん LUXAの話\nメール1億通/月\n外部サービス、SESは使ってない\n送る時にSMTPサーバ数増やす\nEC2の金額抑えるために稼働時間は30~45分でコントロールしてる\n イベントレジスト株式会社 池田 大輔さん 翻訳にはTransifex使ってる\n","permalink":"https://256days.com/post/2014-05-21-jaws-ug-tokyo-21th-20140521/","summary":"\u003cp\u003eAWSのユーザイベントということで、naoyaさんの自動化の話から始まりました。このセッションが一番印象に残りました。\u003cbr\u003e\nコード化された運用は形式知化である。そして手順であれコードであれ、「なんでそうしてるのか？」ということも共有されないといけない。なるほど、なるほど。\u003cbr\u003e\n紹介されていたQiita teamは使ったことないけれど、Markdownで書けて、気軽に投稿して、検索可能な情報共有の場があると、たしかに良さそうです。\u003c/p\u003e\n\u003cp\u003e以下、イベント参加時のメモです。\u003c/p\u003e","title":"第21回 AWS User Group - Japan 東京勉強会に参加しました"},{"content":"RubyWorld Conference 2013に参加しました\n島根県松江市で開催されたRubyWorld Conference 2013に参加してきたので、特に印象に残ったところをメモ(day1, day2)からピックアップ。  Aiming the Moving Target  まつもとさんによる初日の基調講演。個人的には特に不思議の国のアリスに登場する赤の女王の言葉を用いた例えと、\u0026ldquo;Nice try\u0026quot;という言葉が印象的でした。\nスライドの写真がないので Wikipediaより赤の女王の言葉を引用すると\n 「その場にとどまるためには、全力で走り続けなければならない（It takes all the running you can do, to keep in the same place.）」\n この言葉が示すように、ソフトウェアのように価値の変化するものを追うには、OSSのコミュニティ、そして会社も、変化し進み続けなければ死んでしまう。\nそして\u0026quot;動くターゲット\u0026quot;である価値あるソフトウェアを提供するには、巨人の肩に乗り、なるべく速く、何度もためして、何度も撤退すべき。「失敗したらもう終わり」というプロジェクトの進め方をせず、「失敗してもいい」、そして失敗のことも\u0026quot;Nice try\u0026quot;と言い換えるところから始めてみませんか、というようなお話をされていました。\n昨年の発表もそうでしたが、まつもとさんの「エンジニア主導の世界になっていくんだ」「世界を変えていこう」というメッセージにワクワクしながら聞いていました。\u0026ldquo;Nice try!\u0026quot;、使っていきたいです。\n非常にエンジニア心に響くセッションですので、気になった方はRakuten Technology Conference 2013のビデオをご覧下さい。こちらの動画は英語での発表ですし、言い回しや構成も異なる部分がありますが、同じタイトルで発表をされています。\n  クックパッドの継続的デリバリー こちらは高井さんによるクックパッドにおける開発手法の紹介。「いいなー！」「参考になる！」と思った所を並べると、\n 毎日11以上の本番デプロイがされている 14,432のテストが10分で終わるよう分散実行している ブランチ管理はGitHub Flowを採用 開発環境のDBは本番同様のDBサイズになるようレプリケーションしている デザイナもpull requestを送っていて、月間で約800のリクエストがとびかっている jenkinsとhipchatを連携させて、デプロイ結果を通知している デプロイ結果は自動でwikiにも追記されており、速度低下などあるとインフラエンジニアがそのログを漁って原因究明をする  ユーザの属性や時期(例えばハロウィンシーズン)のフラグが立ったらUIを自動で切り替えてるといったことはchankoを使うと簡単にできるとのこと。また、テストの並列実行をサポートするツールも抽象化してOSSとして公開したいとのことでした。素敵です。\n余談ですが、クックパッドさんはDevOps Tokyoでの発表も非常に熱いものでした。そのとき特に印象的だった「迷ったら健全な方」について高井さんに聞いたのですが、実はこれYahooさんの「迷ったらワイルドな方」にかけているのだとか。いやー、どちらも格好いいっす。\nThe Internet Axiom: Escaping the Tyranny of Time and Space GitHubのCEOであるTomさんが2日目の基調講演でした。\nTomさんによる自己紹介。新しいスライドの使い方です笑  そして自己紹介の後、\u0026ldquo;In the Year 2525\u0026quot;という曲に合わせた動画が流れ始める。動画の一場面で「どうぞうどうぞ」と2色のピルを奨めるTomさん。  インターネットがもたらす3つの変化を軸にスタートアップを紹介していました。紹介していたサービスは以下。もちろん最後はGitHubです。\n WEIGHTLESS DATA  Lockitron Square MasterCardのPayPass Bitcoin   WEIGHTLESS DATA MOVES FAST  drchrono Snapchat   COMMUNIATION BECOMES EASY  Uber SpooRocket GitHub    「なんだかみんな笑ってるが完璧な日本語だろ？Google翻訳さ！」というようなやりとりのシーン。どうしてこうなった。。ラップにでもなりそうだ一興。  GitHub社員の位置情報。みんなバラバラの位置にいることが分かりますが、これで仕事ができているのは非同期(Ashynchronus)なやりとりで仕事が出来るからで、それをサポートするのがpull requestやissueという機能。こういった仕事のやり方についてTomさんは、Linusさんとも話しあったことがあるようです。  ここ1ヶ月のGitHub内のプロジェクトのコミット数など。GitHubが今も活発に改善を重ねていることが分かります。\n 931 active pull requests 815 merged 113 authors 5273 commits 443 active issues 248 closed issues 195 new issues   GitHubでは Beer30という、社員みんなで集まって新しいプロジェクトや新しいビジョンの話をする場があるそう。サンフランシスコで実施するので、参加できなかったメンバのために動画を共有しているとのこと。  hipchatとhubotで運用状態を見ているところ。  Tomさんの話からは終始、「時代は変わるんだよ」というメッセージをビリビリと感じました。きっとVCの人たちに話す時も、様々な例を出して、イノベーションを感じさせる話をしているのだろうなーと思って聞いていました。\njekyllを作ったの、Tomさんだったんですね。最近はビジネスが忙しく、家族もいるので、奥さんと子供が出かけている間にコードは書いているとのこと。うーん、凄いです。\nその他の印象に残っているところ 安川さん、八田さんによる\u0026quot;Social Translating\u0026quot;もとても興味をひかれました。Ruby on Rails チュートリアルが日本語で読めるって凄いです。4.0対応は2人で約1ヶ月で対応されたとのこと。\n 相澤さんの『クラウド時代のRubyアプリケーション設計』で取り上げられたThe Twelve-Factor Appは必ず読んでおこう。嬉しいことにこちらも翻訳されており、日本語で読むことができます！\nHerokuユーザが視覚化されている様子。ユーザ数、日本は4位らしいです。\n アメリカ UK カナダ 日本   川端さんによる『Rubyistによるアジャイル開発事例紹介と進め方』では最後に引用されていたKent Beckさんの言葉が印象的でした。\n というメッセージに対する答えが以下。   『自分が変えられるのは自分だけ』\n まずは自分を変える努力をしなければ。\nRuby Prize 2013は、近永さんが授賞されました。おめでとうございます！  最後に 講演を聞いていて、ただ聞いているだけではなく早く自分のアクションに繋げていかないといけないなと強く感じさせられるカンファレンスでした。\nまた、ここでは取り上げませんでしたが、まつもとさんのオリンピックネタや突然のダジャレ賞授賞式、攻めの司会などなど賑やかな場面がたくさんあり、とても楽しいイベントでした。スタッフ、講演者の皆様ありがとうございました！\n","permalink":"https://256days.com/post/2013-11-24-rubyworld-conference-2013/","summary":"\u003cp\u003eRubyWorld Conference 2013に参加しました\u003c/p\u003e\n\u003cp\u003e島根県松江市で開催された\u003ca href=\"http://www.rubyworld-conf.org/ja/\"\u003eRubyWorld Conference 2013\u003c/a\u003eに参加してきたので、特に印象に残ったところをメモ(\u003ca href=\"http://matsue.github.io/blog/2013/11/23/rubyworld-conference-2013-day1-memo/\"\u003eday1\u003c/a\u003e, \u003ca href=\"http://matsue.github.io/blog/2013/11/23/rubyworld-conference-2013-day2-memo/\"\u003eday2\u003c/a\u003e)からピックアップ。\n\n\u003cfigure \u003e\n    \n        \u003cimg src=\"https://lh3.googleusercontent.com/-3JJ6G6q-fII/UpHwGGIrhhI/AAAAAAAAADs/lWJGFVGj18U/w955-h716-no/P1020968.JPG\"  /\u003e\n    \n    \n\u003c/figure\u003e\n\n\u003c/p\u003e","title":"RubyWorld Conference 2013に参加しました"},{"content":"RubyWorld Conference 2013 2日目にとったメモです。\n個人メモなので誤字などご容赦ください。\n全体関連リンク  公式サイト: http://www.rubyworld-conf.org/ 公式UST: http://www.ustream.tv/channel/rubyw-conf-13 togetter day1: http://togetter.com/li/592855 togetter day2: http://togetter.com/li/593359 my memo day1: https://gist.github.com/Matsue/7585061 my memo day2: https://gist.github.com/Matsue/7600639 Social Translatingの資料: https://speakerdeck.com/yasulab/social-translating-the-way-of-translating-rails-tutorial-and-ruby-hacking-guide  The Internet Axiom: Escaping the Tyranny of Time and Space』 by Tom Preston-Werner (GitHub Inc. CEO)\nself introduction  ruby developer php developer  githubで変えたいことがあれば言ってくれ\n(~ video上映 ~)\nvideo作ったのは私が変わり者だからというのもあるが\nこの歌が未来をとらえているから\nこのインターネットを使える時代素晴しく思う\n電気がうまれた時代に似てる\nインターネットは多くの情報をはこべ、電力以上に素晴しい\nこれはキャンプしたときの写真\n電気が近くにあったわけではない\nあったのはケータイだけ\nこれがインターネットの力\nあなたのお気に入りのレストランのページはどうなってる？\nメニューとかのってるだろう\nそれだけでいいのでしょうか\n政府も考えるべき\n申請書をアップロードするだけでいいと思ってる人がいる\nほぼ全ての人がスマートフォン持っている\n10年後はいつでもどこでも使えることになってるだろう\n\u0026ldquo;WEIGHTLESS DATA\u0026rdquo; これからデータの重さがなくなる\n例えば鍵 みなさん持ってますね\n数KBのデータがあれば鍵はデータで表せるだろう\nなぜ金属で持ち歩いているのか？\n何万もケータイで持てるのになぜ？\nインターネットの力使えてないといえる\n実際にLockitronというサービスがある\nお金 お札を持ち運んでいるがこれも意味が無い\nsquareがあります\nただ、リーダーがあるとデバイスが増えてる\nそこでsquare cachというものも出してる\nしかしemailなど管理は必要\niphoneだけでできないだろうか？\nmaster cardはそれを解決しようとしてる\npay passというサービス\nなんでこんな大変なのか\n不正起きないよう、さまざまな制約があるから\nbitcoinがある\nこれは問題もあるかもしれないが完全にオンラインで成り立っている\n病院 なんども同じ問診票に同じ情報を書き続けなければならない\nそして医者はまたそれをコンピュータにいれてる\ndrchronoはこれに対応している\nみなさん仕事している中でいらつきを感じる場面あると思う\nそれをメモしてください\nインターネットアクションをとってないことを\nWEIGHTLESS DATA MOVES FAST サンフランシスコからサクラメントにいって事務所に出さないと資料があった\n1.5時間かけていった\nデータでいうと400Byteくらいの内容を書いた\nそしてまた取りに戻った\nつまりトータルで8時間もかかった\nなんと50Byte/h\n急いでもこれ\nなんでこんなかかるのか\nこれと真逆の状態とはどんな状態でしょう\nsnapchat 革新的なのは数十秒でデータが消える\nたとえば人の顔に落書きしておくったり\nこれのなにが特別なのか？\n私たちは手紙をemailで代替している\nパラダイムにのって変わったもの\nしかし十分に適応していない部分がある\nsnapchatを使うと、送った馬鹿げた写真が広まることを気にしなくて良いのです\nCOMMUNIATION BECOMES EASY UBER サンフランシスコのtaxi状況はひどい\nUBERを使えばどこにいるか見えるし自分の場所に来てくれる\n待つ必要もないし、お金もその場で払わなくて良い\nインターネットの力が発揮されている\n簡単だから毎日使っている\nSPOON ROCKET これの対象はタクシーではなくご飯\n6$で連れて行ってくれるて食べられる\n車の送迎サービスもある\nそして温かいご飯食べられる\n大学生の助けになる\nGitHub 世界中で働いている\n先月のmain GitHubのレポジトリを見ると\n 931 pull requests 815 merged 113 authors 5273 commits 443 issues 248 closed  pull requestすると見える化できるし、レビューできる\nディスカッションができる\nなぜこのような活動ができるのか？\nASYNCHRONUS それは非同期にできるから\n実際、いま私は日本にいて時差あるわけだが\nリアルタイムではないがメッセージを送りあうことができる\nこれにより分散して仕事できる\n非同期をサポートするのが\n pull request issue  という機能\nLinusとも話した\n彼以外の人は多くの人が一緒に働くということについて考えていなかった\n大企業だけがそのような仕事していた\nlinuxはまさにそういうパターンの仕事だった\ngithubは分散された仕事を便利にしたもの\nbear 13 githubではbear13という取り組みをやっている\n集まって、新しいプロジェクトや新しいビジョンの話をする\nサンフランシスコでやるが遠隔地のひとはどうするか？\n\u0026lsquo;remote by the fault\u0026rsquo;という考えでやっている\nvideoを見えるようにしている\nURLS URLも大事にしている\ngithubのURLは見れば何を指しているか分かるようにしている\nみなさんのサイトでも考えてほしい\nURLどれだけ読みやすいか\n@mentions これはtwitterにもある機能\nissueなどで使う\nこれがあることで「いいね」というようなメッセージを引き出せる\nCHAT (chatopsのことぽい)\n同期でも非同期でもできる\ncookpad Takaiさんの取り組みは似ている\nうちは28回なのでgithubの勝ちですw\n1secでデプロイできるので何度も本番にデプロイできる\ngraph meで見るとかなりのメッセージが飛んでること確認できる\npagerやpuppetもchatで操作できる\nQA pull requestなどの機能はユーザにはどう使ってほしいと思っている?˙あとこれから予定してる機能ある？ ソフトウェアエンジニアが使えやすい機能を考えている\n遠隔地でのコミュニケーションどうしてる 基本的には非同期でコミュニケーションだが、\nface to faceするのは戦略的な話をするようなとき\nそういう時にはgoogle hangout使う\n翻訳に使った時gitを分からない人がいてpull request分からない人いた。なにか良い解決策ある？ non engineerにgit教えるのは大変。\ngithubはweb上だけでファイル編集とpull requestできるのでそれが使えるのでは\nrubyやrailsに期待する機能ある？ いまそんなコーディングに時間使ってない rubyはプロトタイプにとても適していて好きだ\n問診票は手の震えや記憶も見ている。それをインターネットで解決できるアイデアある？ オンラインでビデオ問診とかある\nさいきん開発してる？ そんなしてない\n奥さんと子供がいないときだけしてる\nCLIでpull requestみるオススメのツールある？ hubとか\nやっぱりwebが便利\n 行政業務システムのRuby化(開発事例紹介 by 木島浩暁 (株式会社日立ソリューションズ)\nRuby化の経緯 システム改修の短期化したかったから\nそこでruby+railsを提案\nスケジュール  ruby化 変更分の取り込み  をウォーターフォールで計画\n構成  web: java バッチ: C  これがrubyとrailsになった\n課題 1.開発体制の構築 多数のruby技術者が必要だった\n=\u0026gt; 島根県企業と共同で行った\nPROBIZMOと協力 VPNや会議システムを構築して対応した\n2.Rails規約に沿わない機能の実装  URLの難読化 外部ファイルの取り込み  rails拡張コンポーネントを挟んで対応した\n2-1.URLの難読化 URLを予測されて直接入力されるのを避けたかった\n開発者は通常通り開発し、難読化はコンポーネントが対応\n2-2.外部ファイルの取り込み 申請書をweb画面から入力するのは難しいので\n外注パンチで作成したファイルを取り込み機能が必要だった\nファイル解析用のDSLを定義した\n3.バッチ処理の性能確保 C言語で書かれていたバッチと同等の速度確保を目標としていた\n47万社のデータをCだと1h22minで処理してた\nそのままrubyにすると70hかかった・・\n Active RecordからSQL直接入力へ変更 GCタイミング修正 parralel gemでの並列実行  このような取り組みで1h10minにできた\nRailsプロセスの起動時間も問題になっていた\n プロセス常駐化し、 そこにプロセス間通信でキック、 処理プロセスをforkする  という流れにすることで改善した\n4.品質の維持  rspec C0は100% テストコードが2.5倍以上を目標  テストに9hourかかる\nクックパッドのテスト並列実行のOSSに期待してます\n最後に rubyにしたことで次期以降での改修時間の短縮に期待している\nQA ruby関連の質問は開発担当のmakiさんが回答\nrails起動の時間かかるというのはバッチ処理用のgem使ったのか、作ったのか？ delayed jobも検討していたが自作した\n200行程度のもの\n作ってからzeusでできるよとも言われた\n機関系でのruby使用は増えそう？ 全国のデータではなく行政単位の処理だったので並列処理できたが、\nもしこれが並列実行できないようなものだったらと考えると検討が必要だろう\n処理が分割ができれば使えそうということ？ その認識で間違っていないと思う\nRDMSがネックになるのでは それはある。\n他のプロジェクトで限界を感じている\nActive Record使うのやめたときエスケープ処理などはどうしたのか ORマッパーだけ使わず、サニタイジング機能などはrailsのものを使った\n 『日本最大級のクラウドソーシング「クラウドワークス」の超速事業起ち上げにおいてRubyの果たした役割』 by 野村真一 (株式会社クラウドワークス)\n自己紹介 モバイルCP -\u0026gt; クーポンサイト -\u0026gt; クラウドソーシング\nRuby使い始めたのはクラウドワークスが初\nクラウドワークスとは 依頼できる仕事はオンラインで完結するものなら何でも\n ウェブアプリとか ランディングページとか サーバ構築とか デザインとか  ミッション 「21世紀の新しいワークスタイルを提案する」\n背景は\n 正社員比率の減少 超高齢化社会 女性の終業ギャップ  大切にしていること ユーザエクスペリエンス\n機能で語る時代ではなくなってきた\n車のCMでも「モノより思い出」といっちゃうくらい\n仕事の受発注において、\nお金だけでなくやりがいなどを期待しているはず\nそういった社会の満足度等を提供していきたい\n「働くを通して人々に笑顔を」 クックパッドさん参考にしてる\n仕事を通じた満足やつながりを生みたい\n「ありがとう」ボタン\nfacebookのlikeのように感謝を可視化した\nリリース後スゴい押されてる\n採用しなかった受注者の方に押されること多い\n「1クリックで世界の仕事とスキルにアクセスを」 これまでのクラウドソーシングサービスは\n予算や仕様が明確でないといけなかったりして複雑だった\nちょっと電話かけて相談するくらいの感じを想定\n「ショートメッセージ」機能もあり、気軽な相談できるようにしてる\n「お仕事相談所」というところで依頼方法や相場も教えてくれる\n開発事例 rails多い\nポケットコンシェルジュも発注してる\nポケットコンシェルジュは時給制を採用してる\nロゴコンペ 新しい事業のロゴを依頼してたくさんのデザインが応募してくれる\n経産省Jump start Nipponでも使われた\n選択と集中 受注と発注は鶏と卵\n発注者にフォーカスしてる\n目標設定も発注者の数\n受注者はあとからついてくるとしてる\nスピード!スピード!スピード! 楽天を参考にしてる\nF1より自転車のほうがイメージあう\n守るものなく、エンジンは自身なので、スタートアップぽい\nたちあげの話 CTOと非常勤の2人でつくった\nrais使ってる\nサービス開発に集中できる\n主に使ってるgem\n  capistrano\n  em-websocket railsモデルそのままチャット機能つくれるので選択\n  OAtuth-plugin\n  メタプログラミングも活用\n今は4名くらいで開発\nPHPに飽きた方がjoinしてる\nrubyスキルはrubyぽく、railsぽく書けてるかで判断できる\n審査 ソースコード出してもらってやってもらっている\nスキルの登録具合 受注者のスキル層的にはPHPが多い\n内部で使っている技術 大半がRubyがらみ\nrails, fluentd, etc\nQA 今後の機能等あれば 3Dプリンタの仕事追加したら発注されてる\nマッチングにふっていきたい\nスケジュール管理、ファイル共有とかを使いたいという要望がきてる\n現状だとdropboxつかってくださいと言ってるが強化したいところ\n 『クラウド時代のRubyアプリケーション設計』 by 相澤歩 (株式会社セールスフォース･ドットコム)\nLinks  http://twelve-factor-ja.herokuapp.com/  自己紹介 rubyコミッタになったのが２年前のrwcだったので感慨深い\nherokuは買収され２年ほど経ち、\nherokuでありセールスフォース・ドットコムの社員\nエバンジェリストとしてエンジニアむけのマーケティング活動してる\n大規模なキャンペーンのさい等にテクニカルアカウントマネージャーとしてサポートもしてる\n製品開発以外やってる\nエンタープライズレベルの契約をすると日本語でサポート受けられる\nHeroku 2007年に3人で創設\n最初はrubyだけホスティングしていた\n2011に買収されてからはjavaやpythonなどなどサポート開始\nしかしユーザの使用言語、システムの言語はRubyが多い\n課金 使った分だけ\nユーザ分布 ランキングは上から\n アメリカ UK カナダ 日本  UKインスタンスできてからUKも増えた\nカナダと日本は僅差\n\u0026lsquo;the twelve-factor app\u0026rsquo; heroku創業者が書いた論文のようなもの\nアプリ構築に必要な12の要素にまとめたもの\n セットアップは宣言的に行う 依存を明確に定義する クラウド環境を仕様 環境と本番の差異をなくす アーキテクチャを変更せずに用意にスケールするように  というようなこと書かれてる\n12のプラクティスのタイトル紹介\n今日は3つだけとりあげる\n1.Codebase  ひとつのアプリは１つのコードもつ ひとつのアプリは複数の環境にデプロイされる 複数のコードベースは複数のアプリとして取り扱う  環境ごとに持つべきではない\ngem化 共通コンポーネントはgemにして複数アプリで使う\njeweler使うとgem化は楽\nrails_12_factor herokuではrails12_factorを入れるようにしてもらってる\naasetsなどのサポートがはいる\ngitのsubmodule これでgitレポジトリの入れ子できる\n2.Config これはデプロイに特化したものなのでコードベースと分離すべき\n環境変数にわける\n3.Build, release, run 依存解決、リリース(実行準備)、実行\nバージョン管理 コードベースのバージョンとリリースのバージョンは違う\nrollbackはリリースのバージョン単位で行う\nheroku内ではbuildpackで依存解決し、最終的にDyno managerでリリースされる\n日本語訳 ここ: http://twelve-factor-ja.herokuapp.com/\nQA アーロンさん「ダジャレ賞さしあげます」 これはダジャレクラブというハッシュタグがあり、その中でいいだじゃれ(たくさん?)つぶやいたのでもらえた\n司会「最高のダジャレおねがいします」 「イベントで良い弁当」\nなぜjewelerにした？ bundlerと悩んだが初心者にはjewelerのが良いと思った\nslug compilerの中ではbundlerしてる\nrubyのバージョン管理もherokuではbundlerで管理してる\n 『Rubyからアジャイル開発･ビッグデータ対応のデータベース(4D DAM)を利用するためのAPIの研究開発』 by 山本哲男 (株式会社八雲ソフトウェア)、高木丈智 (株式会社テクノプロジェクト)\n山本さんの舞台裏  5000人にrwc招待メールおくった 300人から返信 34名カンファレンス参加 20名ツアー参加  八雲ソフトウェアについて 松江駅前にて開業\n八雲は出雲のかかりことば\n8は無限も意味している\nUターン人材を募集して、これまで4名採用した\n首都圏の状況  人材不足 オフショア開発のリスク  文化も違うし 賃金あがってきた    なので東京で営業、地方で開発がよいと考える\n首都圏の技術者60%は仕事があれば地元に帰りたいと思ってるという背景もある\n4D DAM  アジャイル ビッグデータ(高速処理) シンプルなテーブル構造 メンテナンスが簡単  DB内でプログラム実行可能    データベースだが上記に対応\n実際、東証ではSQLは1行しかかかれていない\n東証での実例 2010年に東証に採用された\n不正検知などに貢献\n契機は富士通のアローヘッドを使い始めたこと\n7ヶ月しかなかったがアジェイルで4ヶ月で仮稼働まで辿り着いた\n他社は数年予定だった\nオリンピック殿でも実績ある\n機能解説  ダイナミックアレイ構造 ディクショナリードリブン  変更が用意であるため、アジャイルに適用できる\nテクノプロジェクト 創立29年\n2007年からrubyに取り組んでいる\n4D DAM APIの紹介 4D DAM向けのAPIの提供の話\nRuby版ドライバを作成したのでこれからはRubyから使える\nドライバは年内完成予定\n来年２月にAPIは提供予定\n4D DAMの応用の可能性について  ECサイト 医療情報DB 通信監視 部品管理 フィールドクラウド  フィールドクラウド クラウドと統合したフィールド監視\nexample: 笹子トンネルの崩落\n情報は紙では管理はされていた\n交通規制といった水害対策もセンサーと連動することでできるだろう\nQA 機関システムではRDBMSだが、4D DAMに移行したらACID性は担保される？されないなら対策は？ joinが問題だと思うが常にjoinしたような状態で動くので問題が起きない\nAPI実装上、データの整合性に気をつけていると思うが、どのへん工夫している？ 4D DAMの開発者にCで記述してもらっている\n主にrubyらしい命名の要望だけ開発者に伝えている\n使用する上での懸念点を本音で言ってほしい 八雲ソフトウェアが大きい会社ではないので体力的に懸念はされることはあるだろう\n 『Rubyistによるアジャイル開発事例紹介と進め方』 by 川端光義 (株式会社アジャイルウェア)\nアジャイルウェア Rails4のシルバー試験の問題を作成中、来年４月から受けれるようになる\n総メンバ数: 15名\nRubyの受託で12件ほど\nXPS \u0026amp; XCSの実現を理念としている\n=\u0026gt; 究極のプログラマー満足と顧客満足\nRedmineのプラグイン開発事例 2ヶ月で12個のプラグインを作成した\n4つはOSSとしてgithubに還元した\nちょうどredmineのissueに上がっておりパッチを送った\n発注先として選ばれたのは短期間の12個開発にOKと言えたから\n次の開発フェーズ redmineのガントチャートが使いにくい\n=\u0026gt; MS Projectのように使えるガントチャートを作成することに\nそして Lychee Gantt Chart が生まれた\nWeb上でマウス操作で各種期間などを操作できる\nOrange project THIN REPORTSにお世話になってます\n開発効率 社内ではPivotal Trackerでチケット管理しているが、\nそれを見ると日に(?)2,3時間だけ使われている状態で進んでいる\nRuby, Rubyistの生産性が高いと言える\n映画でリラックスするように彼らはプログラミングでリラックスしている\n変わったこと 要件定義 == プログラミング\n要件も細かく伝えなくていい\nテストはあるがユニットレベルで仕様が柔らかいまま進む\n受け入れテストの前に顧客のacceptが出ながら進む\nスケジュールが前倒しになって管理がいらなくなってくる\nこれはRubyistのおかげ\nエンジニア合わせて組織も変えてきた\n学歴ではなく、githubをみる\nプログラミング以外の物を引き取る\nマネジメントも厳しくしない\n最後に あるカンファレンスでのKent Beckのやりとり\n質問者「周囲を変えないと、アジャイルやXPができない」\nKent Beck 「変えられるのは自分自身だけ、それにつられて周りは変わる」\nQA テスト駆動開発できないというのは？ 受け入れのテストから始められないということ\nユニットテストは最初から書いてる\n仕様が固まった後半からCIも自動化してる\n顧客との仕様固めは開発者が直接行ってる？ 間に担当が立つこともあります\n状況によります\nなぜフルーツの中でもアケビをプロダクト名に選んだのか?ruby色関係ある？ 英語のpawpawが可愛いと思ったから\nruby色だからではない\n クロージングセレモニー by 井上 浩 (Rubyアソシエーション　副理事長, しまねOSS協議会　会長)\n来場者数  day1: 491人 day2: 410人 合計: 901人  開催趣意書 趣意書どおり未来イメージできたと思ってる\n開催テーマ 様々なテーマ交換できましたね\n各種紹介  構成団体 実行委員会 事務局 ワーキンググループ スポンサー  最大の危機 直前でmatz尿管結石に。。\n各種おもてなしありましたね  聖地 やぁ 夜も更けたり 今年も鉄板の石原さん  発表者の紹介、振り返り keynoteでは\n あまりコーディングしない ナイストライを重ねてchange the world  が印象的でしたね\n 三好さんからはなぜJavaを選ばなかったのかという話もありました 受賞者の書いた紙を温めていたのは舞姫隊のあやめ様でした matzのTokyoはナイストライでした 笹田さんご結婚おめでとうございます Tomからはインターネットとプロジェクタの新しい使い方を学びました 相澤さんダジャレ賞おめでとうございます アジャイルウェアさんのウォータフォール万歳  アーロンさん壇上へ 今日は素晴しい通訳(matz)がいますので英語で\nいつもひとりで作業して疲れてる\nアメリカにはおつかれさまという言葉ない\nなので週末にハグをするというのを考えた\n(ここでみんなでhappy friday)\n最後に 尿管結石にはご注意を\n石原さん「来年も待ってるんだからね！」\n","permalink":"https://256days.com/post/2013-11-23-rubyworld-conference-2013-day2-memo/","summary":"\u003cp\u003eRubyWorld Conference 2013 2日目にとったメモです。\u003cbr\u003e\n個人メモなので誤字などご容赦ください。\u003c/p\u003e","title":"RubyWorld Conference 2013 day2 memo"},{"content":"RubyWorld Conference 2013 1日目にとったメモです。\n個人メモなので誤字などご容赦ください。\n全体関連リンク  公式サイト: http://www.rubyworld-conf.org/ 公式UST: http://www.ustream.tv/channel/rubyw-conf-13 togetter day1: http://togetter.com/li/592855 togetter day2: http://togetter.com/li/593359 my memo day1: https://gist.github.com/Matsue/7585061 my memo day2: https://gist.github.com/Matsue/7600639 Social Translatingの資料: https://speakerdeck.com/yasulab/social-translating-the-way-of-translating-rails-tutorial-and-ruby-hacking-guide  Aiming the Moving Target by matz\nlinks  english memo https://www.evernote.com/shard/s54/sh/9cd05cf6-6119-4baa-a1ae-31bd2f23ae34/16638f82bd08ac21c5ad4206d81630de  1990 1990年に社会人\nその会社ではプロジェクトは3年単位で動いていた\n 日本語で設計書書いて それをそのまま実装 テスト 納品  スゴく詳細なドキュメント\nドキュメントは厚さ(センチ)ではかってたくらい\nウォーターフォールだった\nなにか違うと思ってたが説明できなかった\n経験もなかった\n20年経った今は説明できるようになった\n間違った前提 その１ 「なにを作っているか把握してる」\nと、思ってること\nsoftwareは物理法則に制限されない\n最近は記憶容量大きくなりプログラムサイズは制限されない\nいまや、もっとも複雑な被造物といえる\n人間の能力を超え、ドキュメントでカバーできない\nソフトウェアは柔らかくない\nソフトウェアはハード(固く、難しい)\n更新は大変\nその２ 「何を作りたいか把握してる」\nなにをしたらビジネスが成功するかわかっている人は少ない\nソフトウェアを使った時の状態を想像するのは今も昔も難しい\n納品すると大体、「私が思ったのと違う」\n上司や顧客がバカ扱いになりがちだが\n何を作ったらビジネス価値を最大化できるか分かる人は少ない\n実際はみんなバカだった\nその3 「状況は変化しない」という前提\n対策 無知であることを認めるべきだった\n我々ができることは少ない\n保守的戦略 過去から学ぶ\n状況が変化しないなら、良い戦略\nITでは変化が激しいので成立しない\nアリスの赤の女王いわく、\n留まるには速く動き、移動するにはもっと速く動かないといけない\nダチョウアルゴリズム ダチョウは砂嵐きたら砂に頭を埋める\nなにもかも投げ出して、ただ待つ\n冬眠も似てる\n状況が回復するなら良い戦略\nこれまでの2つの戦略 ここまでの２つは現実に反しており、おとぎの国に向かうような戦略\n20年前は上記の戦略をとっちゃってた\nコンピュータは高価で持っているだけで差別化できていた\nネットワークも高価\nなので失敗しないことを最優先してた\nたとえ満足度を犠牲にしても\nそれが唯一のソフトウェア開発の方法であると信じたかった\nいまは持つだけでは差別化できない\nいまもすごいソフトウェアの作り方は分からない\n無知の知\nコンピュータ、クラウド、ネットワーク安くなった\nソフト開発も安くなった\nツールとか言語とかのおかげ\n以前は海外にメールすることもできない世界だった\nrubyはたくさんの海外の方からサポート\n母国語や住んでる場所、性別もしらないこともある\nいまや、巨人の方に乗ることができる\n試行錯誤(try \u0026amp; errors) 何度でも挑戦できることが必要\nコスト最小化が大事\nそこをrubyはサポートしてきた\nそれができるようになって初めて動く標的を狙うことができる\nAiming the Moving Target\n動くターゲットとは本当に価値のあるソフトウェア\n価値は人間の欲求に基づく\nリリースがいまや個人でできる\nプリウスは一人でつくれないだろうが、\nソフトウェアでは一人でつくったもので世界を変えられる\n当たらなかったらピボットできる\n「安く速く何度も」が成功の秘訣\nアジャイルもそれを反映している\n変化に対応する\n成功するかは分からないが成功確率は上がる\n自戒を込めて、\n熱心にコードを書かない\n複雑になり失敗したときのダメージも大きい\nコードを書かないために熱心に働く\n最初のボールだけ転がして、みんなに頑張ってもらう\nrubyもひとりで作っていない\nここも巨人の肩にのる\n競争力維持に必要な物以外はOSSにしてしまうのが正しい戦略\nコアパートも小さくとどめる\nOSSの定義にはないがコミュニティというのは不可欠\nOSSでなくてもコミュニティは有効だろう\nプロジェクトを最小化し、プロジェクトの組織というものが解体されるだろう\n技術ベースでプロジェクトをわたり歩くようになるだろう\nOSSコミュニティはサメ\n進み続けなければ、死ぬ\n大部分は技術的に面白いことで参加してるので、止まると人が離れる\nrubyもコミュニティ開いたり、新しい技術応援したり、カンファレンス開いたりしている\nOSSでなくても進み続けることは必要だろう\nアリスの世界と同様、なるべく速く、何度もためして、何度も撤退すべき\nそして大局的構造を変えられるだろう\n「失敗したら終わりだ」から「失敗してもいい」へ\nまずは失敗をナイストライに言い換えるところから\nコードかかず、\nいいソフトウェアをつくり、\n世界を変えよう\nQA これからrubyで挑戦したいことある？ webでは流行ってきてるがもっと広い世界で使えるようになるといいと思う\nたとえば大学の科学技術計算など助成してる\nあとはmrubyで組み込み目指してる\n公開するもの公開しないものの判断は？ 競争力に関わる物であるか\n最小になるか\nたとえばビジネスロジックだけ出さない\nクックパッドをすべてOSSにしても問題ないと思ってる\nレシピ・ユーザデータが大事\n Speeding up Rails internals using unique Ruby techniques. by Aaron Patterson (AT \u0026amp; T)\nYak Shaving バグを見つけたらわかるまで調べてる\nなのでYak Shavingになる\nよくコンピュータ壊す\nとあるバグ報告の調査を開始 シンボルはGCされない\nDos攻撃になるのが心配なので文字列にしたが遅くなったとの報告\nrubyソースを追った\nとあるソースでruby安全性と速度を担保するには？\n=\u0026gt; 定数を使う\n2.1のフローズン文字列を使うと、安全で速い\nしかし、define_methodはmodue_evalより遅いとのコメントがつく\nそこでベンチマークで確認した\nたしかに遅かったが\nしかしdefine_methodは異なるインタフェースも用意されており、そちらで呼んだら速度改善した\nメモリ使用量についてもコメントあったのでベンチマークをして調査した\nmodule_evalのほうが消費する\n速くて、メモリ使用量も少ない方法はないか？\nを考え改善に至る\n数値列(?)からselectすると文字列で返るというバグから始まり、\nrubyのVMを学び、\nDoS攻撃の対策になり、\nrailsの高速化に寄与でき、\nrailsのメモリ効率がよくなった\nただしバグはまだ直ってないがw\n大事なことは\n「知りたがりましょう」\nQA どれくらいそのバグ修正時間かかった？ 1monthくらい\nまだ直ってないがw\nどれくらい日本語勉強してる？ 日本語は7年勉強してて\nプレゼンは３週間くらい練習した\n クックパッドの継続的デリバリー by 高井直人 (クックパッド株式会社)\n20M UU/month\n1.5Mrecipes\n14432 testsが\n10minutesで終わる\nデプロイ頻度\n11+ deploys/days\n継続的デリバリーの方法 デプロイメントパイプラインで行う\n今日はこれに追って解説\nDBは本番のものをレプリケーションしてdevで使ってる\n少ないデータでは遅い処理検知できない\ngithub enterprise使ってる\nテストは分散実行してるので10分で終わる\nブランチ戦略 GitHub Flow\nfeature toggle\nターゲットユーザに新しい機能出してる\nそれをするのがchanko\nハロウィンデザイン chankoで時期になったらフラグたって表示される\nデザイナがpull requestだしたり\nそれがレビューされてデプロイされる\n月間 800 くらいのpull request\ngithub enterpiseがEC2で動かないのでサーバわけてる\nclone pusherをsinatraで作成\nomkinsというjenkinsで管理してる\nhipchat連携してる\nプラグインは公開してる\nCIサーバは8くらいいる\nテスト増加にあわせて増えている\n目標時間を10分にしてる\nその時間もhipchatに出してる\nテストは本番と同じ環境のSTGで実施\n最新のCI通過分が\n平日の9:30am - 5:00pmでデプロイされる\n金曜は3:00pmまで\nbundle exec cap production deployでデプロイ\nデプロイ後はhipchat, wikiに自動で投稿される\ninfraµモニターおかしかったら、インフラ担当がログ見る\n音も出せるが使われてない\nデプロイしてほしくないときは\ndeploy:lockも用意してる\nたとえばバグでロールバック中、サーバスケール中とか\nQA DB migrationはどうやってる？ devは変えたいタイミングでやってる\n変更時にdumpしてgithubにpushしてる\n本番はインフラと相談しながら\nCI のメンテナンスに割いてるコスト割合は？ むらたさん、ふくもりさんの２名\nソース全部公開する予定とかは？ 依存してない部分は抽象化して出してる\n chanko 分散テスト環境(予定)   JRubyを用いたRailsアプリ開発の実情 by 三好秀徳 (株式会社日立ソリューションズ)\n自己紹介  OSSフォーラム推進 yokohama.rb ruby world conf 2012のまとめしてる るびま編集者になった  Jrubyの紹介  Java API使える 処理速度はCRubyと遜色無し JVMの起動がボトルネックになることはある  Jruby使う理由: Javaの資産を活用したい\n実例 内製Accesssアプリケーションの移行の話 メンテナンス性と速度が低下していたので移行になった\n用件  パスワードzipファイル出力 excel出力 既存のJavaサーバで動かす  =\u0026gt; rubygemsから使えそうな物をピックアップ =\u0026gt; warblerでwarファイル化\ngemの選定 xlsを使えるgem\n spreadsheet axlsx  それぞれバージョン対応しなかったり、開けないことがあった。。\nのでApache POIで代替することになった。\nそれなら動作も問題なかった。\n動かないgem  pg therubyraer unicorn  などなどあるが、\nrailsが自動で代替用意してくれる\njrubyのwikiにもまとまってる\nただし、全て網羅しているわけではない\n zipruby SimpleCov  が実際には動かなかった\n ziprubyはJavaのライブラリで代替 SimpleCovはgithubのissue確認してJRubyのバージョンアップで対応  ここ、ソースだけでなく解決状況を見れるOSSのいいとこ\nrails/rake遅い問題 JVMの起動が遅かった\n CRuby: 0.8sec JRuby: 8.5sec  高速化ライブラリもJRubyだと使えない\n Zeus Spring  対策 Java VMのオプションを修正 Client VMを利用 8.5 -\u0026gt; 3.62秒になった\n個々のPCで処理しないようにした  guard gem sextant  JRubyは互換性あがってきてる  passenger spork  等は対応済み\n新たな高速化gemも出てきた\n=\u0026gt; commands gem\nまとめ gemの互換性注意\nJava利用環境でJRubyは使いどころがある\nQA 文字コード対応できる？ parameter-encodingで指定すれば対応できる\nJRubyを選定に加えた理由は? 一部の要件がRubyではできないがJavaでできることはわかっていたから\nなぜJavaで開発しなかったのか？ Ruby好きだから!\n Ruby開発者を増やすための教育について－8年間のRuby教育で得た知見 by 吉田裕美 (有限会社EY-Office)\nRuby教育の現状 一般データはもっていないのでEY-Officeの教育を紹介\n2012年から研修申し込みが入るようになってきた\n教育業者を使うことのメリット  講義や教育のノウハウがある  社内で教えることのメリット  企業のノウハウを伝えられる 教える側もスキルが上がる  研修期間設定に関連するパラメータ  経験値 能力 etc  EY-Officeの教育コース  1日コース 3日コース\u2028- 5日コース  3日が人気\n1日で済む人は本でも済む\n5日は期間として取りづらい\nコース内容   1日目\n Rubyの基本 ループとか正規表現    2日目\n web application scaffold使いつつrails    3日目\n 国際化対応 TDD体験 脆弱性対応など ブログアプリ等のソースコードリーディング    教育の場でやるべきこと 英語ドキュメントの読み方も教える exampleから見るとか\nデバッグ方法 エラーメッセージはどう読むのか\n良いコードの書き方  なぜ必要か 名前重要  webアプリの基本 html, cssとか\nwebの脆弱性 XSS, SQL injectionとか\n実際のデモが良い\nポイント 関係者の顔を見えるように 開発者はmatzだよとか\nメタ教育 \u0026ndash;helpで大体ヘルプでるとか\nmanコマンドとか\n定着 実際に作って、発表\nコミュニケーション 確認しながら進める\n場数をふむ 同僚に聞いてもらうとか\n練習の場を作る\n環境 windowsは入門程度なら問題ないが動かないgemなどある\n多いのはwindows+VM+Linux\nVMイメージ渡してる\n印刷物はJekyllでつくってpdfにしてキンコーズで対応してる\nQA その場でいれると環境ずれて困るのでは？ bundle済みのrubyごと渡してる\nIDEは使わないの？ 隠蔽されてしまうので基本的には使ってない\n Social Translating: Rails TutorialとRuby Hacking Guideの翻訳を支える仕組み by 安川要平 (YasuLab)、八田昌三 (ビヨンド・パースペクティブ・ソリューションズ株式会社)\nlinks  http://railstutorial.jp/  (事例1) Rail Tutorialの事例 約600page\nTwitter-likeなページをサンプルで作るとかが書かれてる\n7/1に日本語版も公開\n約10人で1ヶ月で対応\n4.0対応は2人で1ヶ月で対応\n(事例2) Rubyソースコード完全解説 Ruby Hacking Guideの英語化\nどうやって対応したのか？ githubを使って実施した\nRHGはJekyllで実施\n7.5 yearsかかった\nGitHub移行後は1.3年\nこれを踏まえてRails Tutorialは工夫した\n改善点 みんなgitに慣れてる訳ではない word使いたい人とか\nプロの翻訳者に相談して仕組みを変えた\nsocial coding のような social translating\nなるべくみんなが使いやすいwebツールで対処\nツール1: facebook group pin機能を使ってREADMEのような投稿を常に表示\n 概要 役割分担 参加方法  ツール2: google translator toolkit  翻訳サポートツール URL指定で翻訳できる 翻訳メモリ、用語集を使える  翻訳メモリとは 原文と訳文のペアが蓄積したもの\n次の翻訳開始時にメモリから一気に翻訳できる\n原文の更新の追尾が楽になる\nメモリの記述形式はテキストやXML\n翻訳のボリュームが大きい時は非常に効果的\nweb記事などは効果薄い\n続きはtechrachoの技術ブログにhachi8833で掲載予定\ndeploy部分の工夫 エンジニアが自動化\ntoolkit上のタグ単位でzipダウンロードしてheroku push\n問題点  pull requestが使えない diffがとりづらい  HTMLからepub化した!! 達人出版ででてる\nCreative Commonsなので配布などOK!\n学生さん、割り勘購入とかもできるよ\nQA 複数人で翻訳すると言い回しの監修はどうしてる？ 例も示してスタイルガイドを定義していた\n適宜きづいた点も指摘していた\n翻訳メモリ、順番変わって言い回し変わったらどうなる？ updateとか名詞なのか動詞なのかとか変わる\n明確な対処方法はない\n表が特に危ないので気をつけるべき\nもしstackover flowなどを追従翻訳しようとすると大変、なにかアイデアある？ READMEを翻訳メモリのようにしてGitHub上でtoolkitにすることを考えたことはある\ntoolkitにpull requestを追加することも考えたことがある\n ひろがるRubyの学びの場 by 五十嵐邦明 (株式会社spice life・一橋大学)\nLinks  https://github.com/igaiga/hitotsubashi-ruby-2013 http://c4sa.nifty.com/ https://github.com/ruby-no-kai/official/wiki  一橋でのRuby講義  ニフティの寄附講義 島根Ruby合宿でも単位がもらえる  講義資料  https://github.com/igaiga/hitotsubashi-ruby-2013 たのしいRuby  などなど\n講義内容  ruby, shellの基本的な解説 wikipediaのアクセス数解析 twitterの解析 ニフティのC4SAでデプロイしたり  ブラウザ上で編集もできるクラウド http://c4sa.nifty.com/    やってみて気づいたところ  そもそもshellとirbの違いとか分からないもの 文法よりもアルゴリズムが難しい  eachで中間データを持たしておくとか   hash理解されづらい プログラマー向け入門書はあるが、初心者向け無い エンジニアが教えることでで最新rubyなどに追従できる  rails girls 参加者の動機\n 同僚のやっている内容知りたい 旦那さんの仕事知りたい などなど  万葉では卒業生むけの勉強会も開催中\nrails 寺子屋 学生向けrailsワークショップ\nいまは高専卒業生多い\n 講義 pull request道場 コード大喜利  pull request道場 開発の流れに慣れるためのpull request練習\nミサワ画像でコミュニケーションw\nコード大喜利 課題を解く形式\nうまく動けば○でる仕組みになってる\n動いてても師範が脆弱性ついたりする\n環境 VMはあまり使ってもらえなかったのでネイティブで\nゴール 社会人も含めた未来に設定することが大事\nなので、たのしい雰囲気や仲間作りを大切にしてる\n場所があるということは重要 興味があっても始めるきっかけがなかったり方法がわからないことがある\n何が出来るのか、どうやってトラブル解決方法、勉強方法まなべる\n五十嵐さんのrubyはじめたきっかけ 先輩がtdiary使ってた\nそこから学ぶことが楽しかった\nQA VMなぜ使ってもらえなかった？  linuxに慣れてない方が多い ネイティブでないのでもっさりしてる  ので敬遠されている模様\n初めての言語がRubyであることのメリット・デメリットは？  ライブラリが豊富であること webですぐ動かせること  が条件だと考えていてそれをruby満たしてる\nあとはくせがなく読みやすいという声も生徒からあった\n参加者の学習状況に差が出た場合の対処は？ 基本的に多数の方にあわせる\n演習の時間多いので、その時にサポートする\n初めてだと翌週でも忘れるし、新規の方もいるので、聞かれたらもう一度説明をするようにしている\n","permalink":"https://256days.com/post/2013-11-23-rubyworld-conference-2013-day1-memo/","summary":"\u003cp\u003eRubyWorld Conference 2013 1日目にとったメモです。\u003cbr\u003e\n個人メモなので誤字などご容赦ください。\u003c/p\u003e","title":"RubyWorld Conference 2013 day1 memo"}]